//  run with MPI:  ff-mpirun -np 4 script.edp
// NBPROC 4

load "real_SuperLU_DIST_FreeFem"
load "complex_SuperLU_DIST_FreeFem"
assert(mpisize>=2);
int[int] procs=[0,1];
mpiGroup gpr(procs);
mpiComm comm(gpr);

// FFCS - reference value for regression tests
real regtest;

if ( bool(comm))
  {
    /////////////////////////////
    //  real arithmetics case
    /////////////////////////////
    // read parameter for SuperLU\_DIST from file
    verbosity=1;
    {
      
      matrix A = 
	[[ 1e16,  2,     2,  1, 1],
	 [ 2,    12,     0,  10 , 10],
	 [ 2,     0,  1e16,  0, 2], 
	 [ 1,     10,    0,  22, 0.],
	 [ 1,     10,    2,  0., 22]];
      
      
      real[int] xx = [ 1,32,45,7,2], x(5), b(5), di(5); 
      b=A*xx;
      cout << "b="  << b  << endl;
      cout << "xx=" << xx << endl;
      
      set(A,solver=sparsesolver,datafilename="ffsuperlu_dist_fileparam.txt",commworld=comm);		
      cout << "solving solution" << endl;
      x = A^-1*b;		
      cout << "b=" << b << endl;
      cout << "x=" << endl; cout << x << endl;
      di = xx-x;
      if(mpirank==0){	
	cout << "x-xx="<< endl; cout << "Linf "<< di.linfty << " L2 " << di.l2 << endl;
      }
    }
    
    // give parameter for superlu in this file with string parameter (sparams) 
    {
      
      matrix A = 
	[[ 1e16,  2,     2,  1, 1],
	 [ 2,    12,     0,  10 , 10],
	 [ 2,     0,  1e16,  0, 2], 
	 [ 1,     10,    0,  22, 0.],
	 [ 1,     10,    2,  0., 22]];
  
      
      real[int] xx = [ 1,32,45,7,2], x(5), b(5), di(5); 
      b=A*xx;
      cout << "b="  << b  << endl;
      cout << "xx=" << xx << endl;
      
      set(A,solver=sparsesolver,sparams="nprow=2,npcol=1,matrix=distributedglobal,ColPerm=MMD_AT_PLUS_A",commworld=comm); 
      // option selected for SuperLU_DIST
      // nprow= 2, npcol = 1               
      // matrix = distributedglobal
      // ParSymbFact = NO, ColPerm = MMD_AT_PLUS_A, RowPerm = LargeDiag
      // DiagPivotThresh = 1.0, DiagScale = NOEQUIL
      // ReplaceTinyPivot = NO, SolveInitialized = NO, RefineInitialized = NO
      // IterRefine = NOREFINE
      
      cout << "solving solution" << endl;
      x = A^-1*b;		
      cout << "b=" << b << endl;
      cout << "x=" << endl; cout << x << endl;
      di = xx-x;
      if(mpirank==0){	
	cout << "x-xx="<< endl; cout << "Linf "<< di.linfty << " L2 " << di.l2 << endl;
      }
      b=A*xx;
      cout << "b="  << b  << endl;
      cout << "xx=" << xx << endl;
    }
    
    /////////////////////////////
    //  complex arithmetics case
    /////////////////////////////
    // read parameter for SuperLU\_DIST from file
     if (1) {
      // Resolution avec SuperLU_DIST COMPLEX
      int N=40;
      complex[int,int] AA(N,N);
      AA=0.+0i;	
      for(int ii=1;ii<N;ii=ii+1) AA(ii-1,ii)=1.+ii*1i;
      for(int ii=1;ii<N;ii=ii+1) AA(ii,ii-1)=1.+ii*1i;	
      AA(0,N-1)=1.+(N+1)*N/2*1i;
      AA(N-1,0)=1.+N*1i;	
      
      matrix<complex> A;
      A = AA;
      
      complex[int] xx(N), x(N), b(N),b1(N), di(N);
      for(int j=0;j<N;j++) xx[j] = 0+j*1i;
      xx[0]= N+N*1i;
      b = A*xx;

      set(A,solver=sparsesolver,datafilename="ffsuperlu_dist_fileparam.txt",commworld=comm); // reading SuperLU_DIST parameter on file ffsuperlu_dist_fileparam.txt
      cout << " ################### " << endl;            

      x = A^-1*b;
      if(mpirank==0){
	cout << "x=  "<< x << endl;
	cout << "xx= " << xx << endl;	
	di=(xx-x);
	cout << "error " << sqrt( abs(di'*di) ) << endl;//'));
	regtest=di.l2;
      }

    
    }
    
    // give parameter for superlu in this file with string parameter (sparams) 
    if(0)
    {
      // Resolution avec MUMPS COMPLEX
      int N=40;
      complex[int,int] AA(N,N);
      AA=0.+0i;
      for(int ii=1;ii<N;ii=ii+1) AA(ii-1,ii)=1.+ii*1i;
      for(int ii=1;ii<N;ii=ii+1) AA(ii,ii-1)=1.+ii*1i;	
      AA(0,N-1)=1.+(N+1)*N/2*1i;
      AA(N-1,0)=1.+N*1i;
      
      matrix<complex> A;
      A = AA;
      
      complex[int] xx(N), x(N), b(N),b1(N), di(N);
      for(int j=0;j<N;j++) xx[j] = 2*j^2+j*1i;
      xx[0]= 0.+N*1i;
      b = A*xx;
      
      set(A,solver=sparsesolver,sparams="nprow=2,npcol=1,matrix=distributedglobal,ColPerm=METIS_AT_PLUS_A",commworld=comm); 
      // option selected for SuperLU_DIST
      // nprow= 2, npcol = 1               
      // matrix = distributedglobal
      // ParSymbFact = NO, ColPerm = METIS_AT_PLUS_A, RowPerm = LargeDiag
      // DiagPivotThresh = 1.0, DiagScale = NOEQUIL
      // ReplaceTinyPivot = NO, SolveInitialized = NO, RefineInitialized = NO
      // IterRefine = NOREFINE
      
      x = A^-1*b;	
      if(mpirank==0){
	cout << "x=  "<< x << endl;
	cout << "xx= " << xx << endl;
	di=(xx-x);
	cout << "error " << sqrt( abs(di'*di) ) << endl;//'));
      }
    }
    
  }
cout << " ************  Fin.." <<mpirank <<endl;
mpiBarrier(mpiCommWorld);	
cout << " Fin.." <<mpirank <<endl;
