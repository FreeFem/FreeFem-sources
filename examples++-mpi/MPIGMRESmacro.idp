// MPIGMRSmacro.idp  file..  version 0. 
// include in MPIGMRES.edp file ..
// Frederic Hecht 2010 
// LGPL licence 
// Author Frederic.Hecht@upmc.fr
// ------------------------------- 

//  macro to def // send-recv message 
// -----------------------------------


func real  maxM(matrix & A)
  {
  	int[int] I(1),J(1);
  	real[int] C(1);
  	[I,J,C] =A;
  	return C.max ;
  }
  
  
macro  InitU(n,Vh,Th,aTh,U)
Vh[int] U(n);
for(int j=0;j<n;++j)
  {  
  	 Th=aTh[j];
  	 U[j]=0;
  }
//EOM


macro   ISendRecvAny(comm,jpart,Si,Ri)
{ /* sorry no Irecv of complex objet ...*/
  int n= jpart.n,nn=n+n;
  if(vdebug) cout << mpirank << " --ISendRecvAny " << n << endl;
  mpiRequest[int] rq(nn);
  
  for (int j=0;j<n;++j)
    Irecv(processor(jpart[j],comm,rq[j]),Ri[j]);
  if(vdebug) cout << mpirank << " ++ISendRecvAny " << n << endl;
  
  for (int j=0;j<n;++j)
    Isend(processor(jpart[j],comm,rq[n+j]),Si[j]);
for (int j=0;j<nn;++j)
  {
  int k= mpiWaitAny(rq);
  if(vdebug)
    cout << " ++ISendRecvAny wait: get " << k << endl;
  }
}
//EOM


macro   SendRecvAny(comm,jpart,Si,Ri)
{  verbosity=200;
 	int n= jpart.n;
 	for (int j=0;j<n;++j)
       processor(comm,jpart[j]) << Si[j];
    cout << " ** wait revc " << endl;
 	for (int j=0;j<n;++j)
       processor(comm,jpart[j]) >> Ri[j];
}
// EOM 


macro CheckUV(comm,jpart,Si,Ri)
{
	    int ipart=mpiRank(comm);
	 	int n= jpart.n;
  		int[int] rn(n),sn(n),in(n);
 		for (int j=0;j<n;++j) 
 		  { sn[j]= Si[j][].n;		  	  
 		   processor(jpart[j],comm) << sn[j];
 		   processor(jpart[j],comm) << ipart;
 		  }
 		 for (int j=0;j<n;++j) 
 		   processor(jpart[j],comm) >> rn[j];
 		 for (int j=0;j<n;++j) 
 		   processor(jpart[j],comm) >> in[j];

 		 int err=0;
 		 for (int j=0;j<n;++j) 
 		  { 
 		   int rj=Ri[j][].n;
 		   err += rj != rn[j];
 		   cout << rj << " s ========= r " << rn[j] << "      " << ipart << " <->  " << in[j] << " " << err << endl;  
 		   
 		  }
 	     assert(err==0);
}//EOM


macro   SendRecvUV(comm,jpart,Si,Ri)
{
 	int n= jpart.n;
	mpiRequest[int] rq(n);
    for (int j=0;j<n;++j)
       Irecv(processor(jpart[j],comm,rq[j]), Ri[j][]);
       
 	for (int j=0;j<n;++j)
       processor(jpart[j],comm) << Si[j][];
  /* 	for (int j=0;j<n;++j)
       processor(jpart[j],comm) >> Ri[j][];*/
 
    for (int j=0;j<n;++j)
	   int k= mpiWaitAny(rq);
}
// EOF 


