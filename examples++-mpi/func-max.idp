int nbmaxS=0,nbmax;
real[int,int] Strouhal(2,100),  Strouhal3(3,3); 
real[int]  mxdrag(4), mxdragi(3); 
real[int]  mxlift(4), mxlifti(3); 
func real t1MaxO2(real c0,real c1,real c2)
{
  return  (1./2.)*(c0-c2)/(c0-2.*c1+c2);
}
func real MaxO2(real c0,real c1,real c2)
{
  return  -(1./8)*(c0^2-8.*c0*c1-2.*c0*c2-8.*c2*c1+16.*c1^2+c2^2)/(c0-2.*c1+c2);
}

func real AddMaxO2(real Cd,int i,real[int] &Maxd,real[int] & Maxdi)
{
    assert(Maxdi.n ==3 && Maxd.n > 3); 
    if( i <=1) // init ...
    {
        Maxdi = -1e100; 
        Maxd  = -1e100;        
        Maxd[0] =-1000;      
    }
    Maxdi[i%3] = Cd;
    if( Maxdi.min > -1e50) 
    {
      int i0=(i+1)%3, i1=(i+2)%3, i2=(i)%3; 
      if( (Maxdi[i0] < Maxdi[i1]) & (Maxdi[i1] > Maxdi[i2])  )
        { // new max 
          int j = Maxd[0]+1+1000;
          Maxd[j] = MaxO2(Maxdi[i0],Maxdi[i1],Maxdi[i2]);
          Maxd[0] = j%(Maxd.n-1)-1000;
         if(mpirank==0 && verbosity>5)
           cout << " max " << " " << Cd << " "  << i << " " << j << " " << Maxd[j] 
                << i0 << " " << i1 << " " << i2 
                << " "  << Maxdi[i0]  << " " << Maxdi[i1]  << " "<< Maxdi[i2]  << endl;
        } 
    }
}
func real  AddStrouhal(int i,real t,real v)
{
  real s=-1; 
  int i3 = i%3;
  Strouhal3(0,i3)= t;
  Strouhal3(1,i3)= v;
  if( i>10) 
  {
    int i2 = (i-1)%3;
    int i1 = (i-2)%3;
    if(Strouhal3(1,i1) < Strouhal3(1,i2) & Strouhal3(1,i2) > Strouhal3(1,i3) )
    {
        real dt = t- Strouhal3(0,i2);
        real t2 = Strouhal3(0,i2);
        int ii = nbmaxS%Strouhal.m;
        real tm = t2+dt*t1MaxO2(Strouhal3(1,i1),Strouhal3(1,i2),Strouhal3(1,i3));
        real fm = MaxO2(Strouhal3(1,i1),Strouhal3(1,i2),Strouhal3(1,i3));
        Strouhal(0,ii) =tm;
        Strouhal(1,ii) =fm;
         ++nbmaxS;
       // if(mpirank==0) cout << ii << " "  << " " << Strouhal3(0,i1) << " < " << Strouhal3(0,i2) << " >  " << Strouhal3(0,i3) << endl; 
    }
  }
  if(nbmaxS > 3)
        {
           int ii = (nbmaxS-1)%Strouhal.m;
           int jj = (nbmaxS-4)%Strouhal.m;
           real per = (Strouhal(0,ii)-Strouhal(0,jj))/3.;
        //   if(mpirank==0) cout << "zzzz  " << ii << " " << jj << " " << per << endl;
           s= 1/per;             
        }
  return s; 
}

