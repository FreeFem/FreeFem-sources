//  run with MPI:  ff-mpirun -np 4 script.edp
// NBPROC 4

// other
load "msh3"
load "medit"
load "real_SuperLU_DIST_FreeFem"

real ttgv=1e10;
string ssparams="nprow=1, npcol="+mpisize;

int nn=8;
mesh Th2=square(nn,nn);
fespace Vh2(Th2,P2);  Vh2 ux,uz,p2;
int[int] rup=[0,2],  rdown=[0,1], rmid=[1,1,2,1,3,1,4,1];
real zmin=0,zmax=1;
mesh3 Th=buildlayers(Th2,nn,
  zbound=[zmin,zmax],  labelmid=rmid, 
  reffaceup = rup,     reffacelow = rdown);
  
fespace VVh(Th,[P2,P2,P2,P1]);
fespace UUh(Th,[P2,P2,P2]);
fespace Uh(Th,P2);
fespace Ph(Th,P1);

macro Grad(u) [dx(u),dy(u),dz(u)]// EOM
macro div(u1,u2,u3) (dx(u1)+dy(u2)+dz(u3)) //EOM

func fup = (1-x)*(x)*y*(1-y)*16;


VVh [u1,u2,u3,p];
VVh [v1,v2,v3,q];

real timeI=clock();
real time1=clock();
varf vStokes([u1,u2,u3,p],[v1,v2,v3,q]) = 
  int3d(Th,qforder=3)( Grad(u1)'*Grad(v1) +  Grad(u2)'*Grad(v2) +  Grad(u3)'*Grad(v3)   //' for emacs
                  - div(u1,u2,u3)*q - div(v1,v2,v3)*p + 1e-10*q*p ) 
  + on(2,u1=fup,u2=0,u3=0) + on(1,u1=0,u2=0,u3=0) ;


matrix MStokes=vStokes(VVh,VVh,tgv=ttgv);
time1=clock()-time1;

real timeF=clock();
set(MStokes,solver=sparsesolver,tgv=ttgv,sparams=ssparams);
timeF=clock()-timeF;

real time2=clock();
real[int] b=vStokes(0,VVh);
time2=clock()-time2;

real time3=clock();
u1[] = MStokes^-1*b;
time3=clock()-time3;

timeI=clock()-timeI;

cout << "============= CPU TIME ============" << endl;
cout << " matrix                  " <<  time1 << endl;
cout << " Fact                    " <<  timeF << endl;
cout << " second member           " <<  time2 << endl;
cout << " solve                   " <<  time3 << endl;
cout << "                          ------------" << endl;
cout << " all                     " <<  timeI << endl;
cout << "============= CPU TIME ============" << endl;
//if(mpirank==0)medit("UV2 PV2",Th,[u1,u2,u3],p);

