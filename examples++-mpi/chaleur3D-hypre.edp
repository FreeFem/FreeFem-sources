//  run with MPI:  ff-mpirun -np 4 script.edp
// NBPROC 4


 // other
load "msh3"
load "medit"
load "hypre_FreeFem"



real ttgv=1e10;
string ssparams="nprow=1, npcol="+mpisize; 

func bool GetNoBC(matrix & A,real[int] & in)
{ // def a array in such what
// on unkwnon i
// in[i] = 1 if no boundary condition
// in[i] = 0 if boundary condition
in = A.diag ; // take the daig of the matrix
real tgv = in.max ;
for(int i=0 ;i<in.n ;i++)
in[i]= in[i] < tgv ; //
cout << "tgv" << tgv << endl;
return true ;
}
int nn=20;
mesh Th2D=square(nn,nn);
int[int] refm=[1,1,2,2,3,3,4,4];
int[int] refu=[0,1];
mesh3 Th=buildlayers(Th2D,nn,zbound=[0.,1.],labelmid=refm,labelup=refu,labeldown=refu);
fespace Vh(Th,P2) ; // P1 FE space
Vh uh,vh,u1=0 ; // unkown and test function.
func f=1 ; // right hand side function
func g=0 ; // boundary condition function
real dt=0.01 ;

real temps=clock();

real time1,time2;
time1=clock();
varf vlaplace(uh,vh) = // definition de problem
int3d(Th)( uh*vh+ dt*(dx(uh)*dx(vh) + dy(uh)*dy(vh)+ dz(uh)*dz(vh)) ) // bil. form
+ int3d(Th)( dt*vh*f) + on(1,2,3,4,uh=g) ;
matrix A = vlaplace(Vh,Vh,tgv=ttgv) ;
time1=clock()-time1;

time2=clock();
set(A,solver=sparsesolver,tgv=ttgv,sparams=ssparams) ; // factorisation
time2=clock()-time2;

real time3=clock();
varf vmasse(u,v) = int3d(Th)(u*v);
matrix M = vmasse(Vh,Vh);
time3=clock()-time3;

real [int] b(A.n) ;
real[int] bcl(A.n) ;
bcl = vlaplace(0,Vh) ; // les termes CL + second membre
real[int] in(A.n) ; // un tableau : 1 si interne 0 si frontiere
GetNoBC(A,in) ; // pour pÂ´enalisation exact de CL (tgv sur aii)

real time4=0,time5=0;
int imax=10;
for(int i=0 ;i<imax;i++)
{
cout << "time " << (i+1)*dt << endl;

real time4tmp=clock();
b = M*uh[];
b = b.*in ; // mise a zero des noeud frontiere
b += bcl ; // ajout des terme de CL + second membre
time4=time4+(clock()-time4tmp);

real time5tmp=clock();
uh[] = A^-1*b ; // resolution
time5=time5+(clock()-time5tmp);

}
savesol("Chaleur-Time-"+imax+"-nn-"+nn+"-superludist.sol",Th,uh);
savemesh(Th,"Chaleur-Time-"+imax+"-nn-"+nn+"-superludist.mesh");
cout << "temps resolution " << clock()-temps << endl;

cout << "======================================" << endl;
cout << " CPU TIME :                  " << endl;
cout << " matrix A                    " << time1 << endl;
cout << " factorization               " << time2 << endl;
cout << " mass matrix                 " << time3 << endl;
cout << " second member (Matrix vector Product with mass matrix)  " << endl;
cout << "                             " << time4/imax << endl;
cout << " solving                     " << time5/imax  << endl;
cout << " all                         " << clock()-temps << endl;
cout << "======================================" << endl;




