//  run with MPI:  ff-mpirun -np 4 script.edp
// NBPROC 4

load "real_pastix_FreeFem"
load "complex_pastix_FreeFem"
verbosity=1;

//#################################
//#  real arithmetic
//#################################
// reading parameter of pastix from data file
{

matrix A = 
      [[  100,  1,  0,  10],
       [  1,  100,  2,  0 ],
       [  0,  2,  100,  3 ], 
       [  10,  0,  3,  100 ]];

    real[int] xx = [ 1,2,3,4], x(4), b(4), di(4); // xb(4),bbb(4);

    b=A*xx;
    cout << "b="  << b  << endl;
    cout << "xx=" << xx << endl;
    if(mpirank==0) cout << "A="<< A << endl;
    set(A,solver=sparsesolver,datafilename="ffpastix_iparm_dparm.txt");	 	
    cout << "solving solution" << endl;
    x = A^-1*b;		
    cout << "b=" << b << endl;
    cout << "x=" << endl; cout << x << endl;
    di = xx-x;
    if(mpirank==0){	
    cout << "x-xx="<< endl; cout << "Linf "<< di.linfty << " L2 " << di.l2 << endl;
    }
    if(mpirank==1){	
    cout << "x-xx="<< endl; cout << "Linf "<< di.linfty << " L2 " << di.l2 << endl;
    }
    if(mpirank==0) cout << "A="<< A << endl;
    x = A^-1*b;	
    cout << "b=" << b << endl;
    cout << "x=" << endl; cout << x << endl;
}

// definition of pastix parameter iparm and dparm in this file 
// These parameters must be given to lparams and dparams respectively

{
matrix A = 
      [[ 1e16,  2,     2,  1, 1],
       [ 2,    12,     0,  10 , 10],
       [ 2,     0,  1e16,  0, 2], 
       [ 1,     10,    0,  22, 0.],
       [ 1,     10,    2,  0., 22]];


    real[int] xx = [ 1,32,45,7,2], x(5), b(5), di(5); 
    b=A*xx;
    cout << "b="  << b  << endl;
    cout << "xx=" << xx << endl;

    int[int] iparm(64);
    real[int] dparm(64);

    if(mpirank == 0){
    	// read iparm and dparm from data file with processor 0 
        ifstream datapastix("ffpastix_iparm_dparm.txt");
        string line;
    	getline(datapastix,line);
    	cout << " line= "<< line << endl;
	getline(datapastix,line);	
    	cout << " line= "<< line << endl;
	getline(datapastix,line);	
    	cout << " line= "<< line << endl;	
    	for(int iii=0; iii<64;iii++){
    	    datapastix >> iparm[iii]; // read iii+2 lines of the file ffpastix_iparm_dparm.txt
	    getline(datapastix,line); 	   
    	}
    	getline(datapastix,line); 
	cout << " line= "<< line << endl;
    	for(int iii=0; iii<64;iii++){
    	    datapastix >> dparm[iii]; // read iii+66 lines of the file ffpastix_iparm_dparm.txt
    	    getline(datapastix,line); 	  
       }
    }
    broadcast(processor(0),iparm); // broadcast iparm to the other processor
    broadcast(processor(0),dparm); // broadcast dparm to the other processor
    if(mpirank ==0){
       cout << "iparm=" << iparm << endl;
       cout << "dparm =" << dparm << endl;
    }      	    
    set(A,solver=sparsesolver,lparams=iparm,dparams=dparm);  // set to pastix solver the parameter iparm and dparm
    if(mpirank) cout << "solving solution" << endl;

    x = A^-1*b;		
    
    di = xx-x;
    if(mpirank==0){	
    cout << "x-xx="<< endl; cout << "Linf "<< di.linfty << " L2 " << di.l2 << endl;
    }
    if(mpirank==1){	
    cout << "x-xx="<< endl; cout << "Linf "<< di.linfty << " L2 " << di.l2 << endl;
    }
}

//#################################
//#  complex arithmetic
//#################################
// read parameter for pastix from data file
{
// Resolution with complex pastix
int N=40;
complex[int,int] AA(N,N);
AA=0.+0i;	
for(int ii=1;ii<N;ii=ii+1) AA(ii-1,ii)=1.+ii*1i;
//for(int ii=1;ii<N;ii=ii+1) AA(ii,ii)=100.;
for(int ii=1;ii<N;ii=ii+1) AA(ii,ii-1)=1.+ii*1i;	
AA(0,N-1)=1.+1.*(N+1)*N/2*1i;
AA(N-1,0)=1.+N*1i;	

matrix<complex> A;
A = AA;
  
complex[int] xx(N), x(N), b(N),b1(N), di(N);
for(int j=0;j<N;j++) xx[j] = j+j*1i;
xx[0]= N+N*1i;
b = A*xx;

set(A,solver=sparsesolver,datafilename="ffpastix_iparm_dparm.txt"); // reading pastix parameter on file ffsuperlu_dist_fileparam.txt

x = A^-1*b;
if(mpirank==0){
cout << "x=  "<< x << endl;
cout << "xx= " << xx << endl;	
di=(xx-x);
cout << "error " << sqrt( abs(di'*di) ) << endl;
}
}

// definition of pastix parameter iparm and dparm in this file 
// These parameters must be given to lparams and dparams respectively
{
// Solving with pastix solver
int N=40;
complex[int,int] AB(N,N);
AB=0.+0i;
for(int ii=1;ii<N;ii=ii+1) AB(ii-1,ii)=1.+ii*1i;
for(int ii=1;ii<N;ii=ii+1) AB(ii,ii-1)=1.+ii*1i;	
AB(0,N-1)=1.+(N+1)*N/2*1i;
AB(N-1,0)=1.+N*1i;

matrix<complex> A1;
A1 = AB;
 
complex[int] xx(N), x(N), b(N),b1(N), di(N);
for(int j=0;j<N;j++) xx[j] = j^2+j*1i;
xx[0]= N+N*1i;
b = A1*xx;

int[int] iparm(64);
real[int] dparm(64);

if(mpirank == 0){
    // read iparm and dparm from data file with processor 0 
    ifstream datapastix("ffpastix_iparm_dparm.txt");
    string line;
    getline(datapastix,line);
    cout << " line= "<< line << endl;
    getline(datapastix,line);	
    cout << " line= "<< line << endl;
    getline(datapastix,line);	
    cout << " line= "<< line << endl;	
    for(int iii=0; iii<64;iii++){
       datapastix >> iparm[iii]; // read iii+2 lines of the file ffpastix_iparm_dparm.txt
       getline(datapastix,line); 	   
    }
    getline(datapastix,line); 
    cout << " line= "<< line << endl;
    for(int iii=0; iii<64;iii++){
       datapastix >> dparm[iii]; // read iii+66 lines of the file ffpastix_iparm_dparm.txt
       getline(datapastix,line); 	  
       }
    }
    broadcast(processor(0),iparm); // broadcast iparm to the other processor
    broadcast(processor(0),dparm); // broadcast dparm to the other processor
    if(mpirank ==0){
       cout << "iparm=" << iparm << endl;
       cout << "dparm =" << dparm << endl;
    }      	    

    set(A1,solver=sparsesolver,lparams=iparm,dparams=dparm);
    if(mpirank == 0) cout << "solving solution" << endl;

    x = A1^-1*b;	
    if(mpirank==0){
    cout << "x=  "<< x << endl;
    cout << "xx= " << xx << endl;
    di=(xx-x);
    cout << "error " << sqrt( abs(di'*di) ) << endl;
    }
}

