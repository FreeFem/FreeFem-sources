//load "dSuperLU_DIST"
load "interfacepastix"
verbosity=2;

// reading parameter of pastix from datafile
{
matrix A = 
      [[ 1e16,  2,     2,  1, 1],
       [ 2,    12,     0,  10 , 10],
       [ 2,     0,  1e16,  0, 2], 
       [ 1,     10,    0,  22, 0.],
       [ 1,     10,    2,  0., 22]];


    real[int] xx = [ 1,32,45,7,2], x(5), b(5), di(5); // xb(4),bbb(4);
    b=A*xx;
    cout << "b="  << b  << endl;
    cout << "xx=" << xx << endl;
    
    set(A,solver=sparsesolver,datafilename="ffpastix_iparm_dparm.txt");	 	
    cout << "solving solution" << endl;
    x = A^-1*b;		
    cout << "b=" << b << endl;
    cout << "x=" << endl; cout << x << endl;
    di = xx-x;
    if(mpirank==0){	
    cout << "x-xx="<< endl; cout << "Linf "<< di.linfty << " L2 " << di.l2 << endl;
    }
}

// reading parameter of pastix from array : iparm and dparm

{
matrix A = 
      [[ 1e16,  2,     2,  1, 1],
       [ 2,    12,     0,  10 , 10],
       [ 2,     0,  1e16,  0, 2], 
       [ 1,     10,    0,  22, 0.],
       [ 1,     10,    2,  0., 22]];


    real[int] xx = [ 1,32,45,7,2], x(5), b(5), di(5); // xb(4),bbb(4);
    b=A*xx;
    cout << "b="  << b  << endl;
    cout << "xx=" << xx << endl;

    int[int] iparm(64);
    real[int] dparm(64);

    if(mpirank == 0){
    	// read iparm and dparm from data file with processor 0 
        ifstream datapastix("ffpastix_iparm_dparm.txt");
        string line;
    	getline(datapastix,line);
    	cout << " line= "<< line << endl;
    	for(int iii=0; iii<64;iii++){
    	    datapastix >> iparm[iii]; // read iii+2 lines of the file ffpastix_iparm_dparm.txt
	    getline(datapastix,line); 	   
    	}
    	getline(datapastix,line);    
    	for(int iii=0; iii<64;iii++){
    	    datapastix >> dparm[iii]; // read iii+66 lines of the file ffpastix_iparm_dparm.txt
    	    getline(datapastix,line); 	  
       }
    }
    broadcast(processor(0),iparm); // broadcast iparm to the other processor
    broadcast(processor(0),dparm); // broadcast dparm to the other processor

    set(A,solver=sparsesolver,lparams=iparm,dparams=dparm);   	
    cout << "solving solution" << endl;
    x = A^-1*b;		
    cout << "b=" << b << endl;
    cout << "x=" << endl; cout << x << endl;
    di = xx-x;
    if(mpirank==0){	
    cout << "x-xx="<< endl; cout << "Linf "<< di.linfty << " L2 " << di.l2 << endl;
    }
}
