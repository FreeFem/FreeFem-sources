load "interfacepastix"

verbosity=2;

// reading parameter of pastix from datafile
{
matrix A = 

      [[ 30,  2,     2,  1, 1],
       [ 2.,    12,     0,  10 , 10],
       [ 2.,     0,  30,  0, 2], 
       [ 1,     10,    0,  22, 0],
       [ 1,     10,    2,  0, 22]];


    real[int] xx = [ 1,32,45,7,2], x(5), b(5), di(5); // xb(4),bbb(4);
    b=A*xx;
    cout << "b="  << b  << endl;
    cout << "xx=" << xx << endl;
    
    set(A,solver=sparsesolver);	 	
    cout << "solving solution" << endl;
    x = A^-1*b;		
    cout << "b=" << b << endl;
    cout << "x=" << endl; cout << x << endl;
    di = xx-x;
    if(mpirank==0){	
    cout << "x-xx="<< endl; cout << "Linf "<< di.linfty << " L2 " << di.l2 << endl;
    }
}

// reading parameter of pastix from array : iparm and dparm

{
matrix A = 
      [[ 30,  2,     2,  1, 1],
       [ 2.,    300,     0,  10 , 10],
       [ 2.,     0,  30,  0, 2], 
       [ 1,     10,    0,  22, 0],
       [ 1,     10,    2,  0, 22]];


    real[int] xx = [ 1,32,455,7,2], x(5), b(5), di(5); // xb(4),bbb(4);
    b=A*xx;
    cout << "b="  << b  << endl;
    cout << "xx=" << xx << endl;

    int[int] iparm(64);
    real[int] dparm(64);

   // broadcast dparm to the other processor

    set(A,solver=sparsesolver);   	
    cout << "solving solution" << endl;
    x = A^-1*b;		
    cout << "b=" << b << endl;
    cout << "x=" << endl; cout << x << endl;
    di = xx-x;
    if(mpirank==0){	
    cout << "x-xx="<< endl; cout << "Linf "<< di.linfty << " L2 " << di.l2 << endl;
    }
}
