//ff-tags: cube diffusion DG
//    Discontinous Galerlin Method
//   based on paper from 
// Riviere, Beatrice; Wheeler, Mary F.; Girault, Vivette
// title: 
// A priori error estimates for finite element 
// methods based on discontinuous approximation spaces
//  for elliptic problems.
//  SIAM J. Numer. Anal. 39 (2001), no. 3, 902--931 (electronic).
//  ---------------------------------
//  Formulation given by Vivette Girault
//  ------ 
// Author: F. Hecht , december 2003
// -------------------------------
//   nonsymetric bilinear form
//   ------------------------
//  solve $ -\Delta u = f$ on $\Omega$ and $u= g$ on $\Gamma$
load "msh3"
macro grad(u) [dx(u),dy(u),dz(u)] //
macro dn(u) (N'*grad(u) ) //  def the normal derivative 
int nn=5;
mesh3 Th = cube(nn,nn,nn); // unite square 
//savemesh(Th,"cube10.mesh");
//mesh3 Th("cube10.mesh");
int[int] labs=labels(Th);
fespace Vh(Th,P2dc3d);     // Discontinous P2 finite element
fespace Xh(Th,P2);
//  if param = 0 => Vh must be P2 otherwise we need some penalisation  
real pena=1e2; // a paramater to add penalisation 
func f=1;
func g=0;
Vh u,v;
Xh uu,vv;
problem A(u,v,solver=sparsesolver) = 
   int3d(Th)( grad(u)'*grad(v))
 + intallfaces(Th)(//  loop on all  edge of all triangle 
           ( jump(v)*mean(dn(u)) -  jump(u)*mean(dn(v)) 
          + pena*jump(u)*jump(v) ) / nElementonB 
)
 
- int3d(Th)(f*v) 
- int2d(Th)(g*dn(v)  + pena*g*v) 

;
problem A1(uu,vv,solver=sparsesolver) 
= 
 int3d(Th)(grad(uu)'*grad(vv)) - int3d(Th)(f*vv) + on(labs,uu=g);
 
 A; // solve  DG
 A1; // solve continuous

 real err= sqrt(int3d(Th) ( sqr(u-uu)));
 cout << " err= "<< err<< " " << u[].linfty << " " << uu[].linfty << endl; 
plot(u,uu,cmm="Discontinue Galerkin",wait=1,value=1);
plot(u,cmm="Discontinue Galerkin",wait=1,value=1,fill=1);
assert(err< 0.01);
