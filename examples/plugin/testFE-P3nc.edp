// Theorem 3.3 in https://arxiv.org/pdf/2105.14981.pdf 
load "Element_P4dc"
load "Element_P4"
load "Element_P3nc"
func real cc(real aa) {real a=aa; if(abs(a)<1e-10) a=0; return a;} 
int[int] ne1=[1,2,0];
int[int] ne2=[2,0,1];

// the ref triangle 
int[int] ll=[2,0,0,1];
mesh Th=square(1,1,flags=2,label=ll);

Th = trunc(Th,x<0.5,label=0);


//Th = movemesh(Th,[x+0.1*y,y-0.2*x]);
//Th = movemesh(Th,[x*2,y*2]);

mesh Thg = trunc(Th,1,split=2,label=-1);
plot(Th, wait=1);
cout << " Th: " << Th[0][0] << Th[0][1]  << Th[0][2]  << endl; 
int it0=0; 

fespace Lh(Th,P1);
Lh[int] l(3);
l[0][][0]=1;
l[1][][1]=1;
l[2][][2]=1;


fespace Wh(Th,P4dc);
fespace Vh(Th,P3nc);
Wh[int] mn(10);
int k=0;
real cc6 = 3*4*5;
//func bk = (l[0] - l[1]) * (l[1] - l[2]) * (l[2] - l[0]);
func l0 =l[0];
func l1 =l[1];
func l2 =l[2];

mn[k++]=      l0 * l0 * l0;
mn[k++]=  l1 * l1 * l1;
mn[k++]=  l2 * l2 * l2;                                            //3
mn[k++]=        l0 * l0 * l1;
mn[k++]=   l0 * l0 * l2;
mn[k++]=   l1 * l1 * l0;
mn[k++]=   l1 * l1 * l2;
mn[k++]=   l2 * l2 * l0;
mn[k++]=   l2 * l2 * l1;
  //6
mn[k++]=        l0 * l1 * l2;                                                                       //2
//mn[k++]=        bk * l0;
//mn[k++]=   bk * l1 ;                                                                    // P4 element

assert(k==10);
/*
      l0 * l0 * l0, l1 * l1 * l1, l2 * l2 * l2,                                            //3
      l0 * l0 * l1, l0 * l0 * l2, l1 * l1 * l0, l1 * l1 * l2, l2 * l2 * l0, l2 * l2 * l1,  //6
      l0 * l1 * l2,                                                                        //2

*/
Vh u,v;
real[int,int] CC(10,10),C1(10,10);
for (int j=0;j<10;++j)
{
	Wh u=mn[j];
	int i=0;
	for(int k=0; k<3;k++)
	{
		int i1= (k+1)%3, i2=(k+2)%3;
		CC(j,i++)= cc(int1d(Th,k,qforder=9)(u*l[i1]/lenEdge));
		CC(j,i++)=  cc(int1d(Th,k,qforder=9)(u*l[i2]/lenEdge));
		CC(j,i++)= cc(int1d(Th,k,qforder=9)(u*l[i2]*l[i1]/lenEdge)) ; 
	}
	CC(j,i++)= cc(int2d(Th,qforder=9)( u/area)) ;// bof bof !!!
}
C1=CC		;
CC *=cc6;
cout << " CC =" << CC << endl;
  load "lapack"
inv(C1); 
real[int,int]   Ct =  C1';

cout << " C1 =" << C1 << "\n C1' " << Ct << endl;
cout << " {";
for( int i=0; i<10; ++i)
{ cout << "{";
for( int j=0; j<10; ++j)
{  cout << C1(j,i)  ;
   if( j != 9) cout << ",";}
   cout << "}";
   if( i != 9) cout << ",\n";
}
cout << "}\n\n";


for (int j=0;j<Vh.ndofK;++j)
{
	int i = Vh(0,j);
	cout << j << " -> " <<  i << " : " ;
    u=0;
	u[][i]=1;
	for(int k=0; k<3;k++)
	{
		int i1= (k+1)%3, i2=(k+2)%3;
		if ( i2 < i1) swap(i1,i2); 
		cout << " " << cc(int1d(Th,k,qforder=9)(u*l[i1]/lenEdge)) << " " << cc(int1d(Th,k,qforder=9)(u*l[i2]/lenEdge)) << " " << cc(int1d(Th,k,qforder=9)(u*l[i2]*l[i1]/lenEdge)) ; 
	}
	cout << " " << cc(int2d(Th,qforder=9)( u/area))  <<  " ::::   " ; 
	//plot(u,wait=1);
	v=u;
	for (int j=0;j<Vh.ndofK;++j)
	cout << cc(v[][Vh(0,j)]) << " " ;
	cout << endl;

}


 Th=square(5,5);
 u=x*x*y;
 v = u;
 cout << " err = " << sqrt(int2d(Th)(square((u)-(u))));
 solve PL2(u,v)=int2d(Th,qforder=7)(u*v)-int2d(Th,qforder=9)(x*x*y*v);
 // verification  !!!!!
 plot(u,wait=1);
 real err=0,err1=0,err2=0; 
for (int i=0;i<Vh.ndof;++i)
{
    u=0;

	u[][i]=1;
	Wh u3=u;
	v=u;
	v[]-=u[];
	real e  = v[].linfty;
	real e1 = sqrt(int2d(Th)(square(dx(u)-dx(u3))));
	real e2 = sqrt(int2d(Th)(square(dy(u)-dy(u3))));
	Wh dxu=dx(u), dxu3=dx(u3);
	Wh dyu=dy(u), dyu3=dy(u3);
	//plot(dxu,cmm=" dxu ", wait=1);
	//plot(dxu3,cmm=" dxu3 ", wait=1);
	dxu [] -= dxu3[];
	dyu [] -= dyu3[];
	real ee =  dxu []. linfty +  dyu []. linfty + e1 + e2;
	if( ee > 1e-6)
	  cout << i << " " << e << " " << e1 << " " << e2 << " :: " << dxu []. linfty << " " << dyu []. linfty << endl;
	err+= ee;
}
cout << " err=" << err  << endl; ; 
assert( err < 1e-6);
