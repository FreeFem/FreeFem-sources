//ff-mpirun -np 4 Helmholtz_circle_Neumann.edp -wg

// for the make check:
// NBPROC 4
// PARAM

load "bem"
load "msh3"

complex k = 10;

// incident wave
real[int] dir=[1,0];
func finc = exp(1i*k*(x*dir[0]+y*dir[1]));
func dxfinc = 1i*k*dir[0]*finc;
func dyfinc = 1i*k*dir[1]*finc;

//  Mesh
int n = 1000;
border circle(t=0, 2*pi){x=cos(t); y=sin(t); z=0;}
meshL Th = buildmeshL(circle(n));

Th = OrientNormal(Th,unbounded=1);

// Dof
fespace Uh(Th,P1);

// Hmatrix for formulation of first kind
BemKernel ker1("HS",k=k);
varf vk1(u,v)=int1dx1d(Th)(Th)(BEM(ker1,u,v)) ;  
HMatrix<complex> HFirstKind = vk1(Uh,Uh,eta=10,eps=1e-3,minclustersize=10,maxblocksize=1000000);
//HMatrix<complex> HFirstKind = assemblecomplexHEHS(Uh,Uh,k,eta=10,epsilon=1e-3,minclustersize=10,maxblocksize=1000000);
if (mpirank == 0) cout << HFirstKind.infos << endl;
display(HFirstKind);

// Hmatrix for formulation of second kind
BemKernel ker2("DL",k=k);
varf vk2(u,v)=int1dx1d(Th)(Th)(BEM(ker2,u,v))  - int1d(Th)(0.5*u*v);  

HMatrix<complex> HSecondKind = vk2(Uh,Uh,eta=10,eps=1e-3,minclustersize=10,maxblocksize=1000000);
//HMatrix<complex> HSecondKind = assemblecomplexHEDLwmass(Uh,Uh,k,eta=10,epsilon=1e-3,minclustersize=10,maxblocksize=1000000,alpha=-0.5);
if (mpirank == 0) cout << HSecondKind.infos << endl;
display(HSecondKind);

// Hmatrix for combined formulation
BemKernel ker3("HS",k=k);
BemKernel ker4("DL",k=k);
BemKernel ker5=(1./(1i*k))*ker3+ker4;
varf vk3(u,v)=int1dx1d(Th)(Th)(BEM(ker5,u,v)) - int1d(Th)(0.5*u*v);  

HMatrix<complex> HCombined = vk3(Uh,Uh,eta=10,eps=1e-3,minclustersize=10,maxblocksize=1000000);
//HMatrix<complex> HCombined = assemblecomplexHEcombinedHSDL(Uh,Uh,k,eta=10,epsilon=1e-3,minclustersize=10,maxblocksize=1000000,alpha=-0.5,combinedcoef=1./(1i*k));
if (mpirank == 0) cout << HCombined.infos << endl;
display(HCombined);


// Solve formulation of first kind
Uh<complex> uFirstKind, bFirstKind;
varf vmassFirstKind(u,v) = -int1d(Th)((dxfinc*Tl.y-dyfinc*Tl.x)*v);// change New Nt -> Tl (the tangent to Curve Nt^ortho == Tl )
bFirstKind[] = vmassFirstKind(0,Uh);
uFirstKind[] = HFirstKind^-1*bFirstKind[];
plot(uFirstKind,dim=2,nbiso=20,value=1,cmm="First kind");

// Solve formulation of second kind
Uh<complex> uSecondKind, bSecondKind;
varf vmassSecondKind(u,v) = int1d(Th)(-(finc)*v);
bSecondKind[] = vmassSecondKind(0,Uh);
uSecondKind[] = HSecondKind^-1*bSecondKind[];
plot(uSecondKind,dim=2,nbiso=20,value=1,cmm="Second kind");

// Solve combined formulation
Uh<complex> uCombined, bCombined;
bCombined[] = 1./(1i*k)*bFirstKind[]+bSecondKind[];
uCombined[] = HCombined^-1*bCombined[];
plot(uCombined,dim=2,nbiso=20,value=1,cmm="Combined");


// Mesh output
int np = 200;
int R = 4;

border b1(t=-R, R){x=t; y=-R;}
border b2(t=-R, R){x=R; y=t;}
border b3(t=-R, R){x=-t; y=R;}
border b4(t=-R, R){x=-R; y=-t;}
border circleout(t=0, 2*pi){x=1.1*cos(t); y=1.1*sin(t); z=0;}
mesh ThOut = buildmesh(b1(np)+b2(np)+b3(np)+b4(np)+circleout(-np*pi/R));

// Incident wave in volume
fespace UhOut(ThOut,P1);
UhOut<complex> vinc;
vinc = finc;

// HMatrix for potential
BemPotential Pot("DL",k=k);
varf vp(u,v)=int1d(Th)(POT(Pot,u,v)) ;  
HMatrix<complex> HPot = vp(Uh,UhOut,eta=10,eps=1e-3,minclustersize=10,maxblocksize=1000000);
//HMatrix<complex> HPot = assemblecomplexHESLPot(Uh,UhOut,k,eta=10,epsilon=1e-3,minclustersize=10,maxblocksize=1000000);
if (mpirank == 0) cout << HPot.infos << endl;
display(HPot);

// Solution for formulation of first kind
UhOut<complex> vFirstKind;
vFirstKind[] = HPot*uFirstKind[];
vFirstKind[] += vinc[];
UhOut vFirstKindabs = abs(vFirstKind);

plot(vFirstKindabs, dim=1, fill=1, value=1, nbiso=20,cmm="First kind");

// Solution for formulation of second kind
UhOut<complex> vSecondKind;
vSecondKind[] = HPot*uSecondKind[];
vSecondKind[] += vinc[];
UhOut vSecondKindabs = abs(vSecondKind);

plot(vSecondKindabs, dim=1, fill=1, value=1, nbiso=20,cmm="Second kind");

// Solution for combined formulation
UhOut<complex> vCombined;
vCombined[] = HPot*uCombined[];
vCombined[] += vinc[];
UhOut vCombinedabs = abs(vCombined);

plot(vCombinedabs, dim=1, fill=1, value=1, nbiso=20,cmm="Combined");


