//  run with MPI:  ff-mpirun -np 4 script.edp
// NBPROC 4
// PARAM

load "iovtk"
load "PETSc-complex"
macro dimension()3L// EOM
include "macro_ddm.idp"
load "bem"

complex k     = getARGV("-k", 10.0);

// incident wave
real[int] dir = [1,0];
func finc     = exp(1i*k*(dir[0]*x + dir[1]*y));
int n         = 1000;

border circle(t=0, 2*pi) { x=cos(t); y=sin(t); z=0; }
meshL ThL = buildmeshL(circle(n));
ThL = OrientNormal(ThL, unbounded = 1);

fespace Uh(ThL, P1);
BemKernel ker("SL", 1, k);
varf vk(u, v) = int1dx1d(ThL)(ThL)(BEM(ker, u, v));
HMatrix<complex> A = vk(Uh, Uh, sym = 1);
Mat<complex> H = A;

varf vRHS(u, v) = -int1d(ThL)(finc*v);
Uh<complex> b, u;
b[] = vRHS(0, Uh);
u[] = 0;
{
    int[int] range = H.range;
    set(H, sparams = "-ksp_view -ksp_monitor -pc_type cholesky");
    complex[int] tmp(range[1] - range[0]);
    KSPSolve(H, b[](range[0]:range[1] - 1), tmp);
    u[](range[0]:range[1] - 1) = tmp;
}
// visualization
if(!NoGraphicWindow) {
    b[] = u[];
    mpiAllReduce(b[], u[], mpiCommWorld, mpiSUM);
    int np = 200;
    int R = 4;

    border b1(t=-R, R) { x = t ; y = -R; }
    border b2(t=-R, R) { x = R ; y = t; }
    border b3(t=-R, R) { x = -t; y = R; }
    border b4(t=-R, R) { x = -R; y = -t; }

    mesh ThOut = buildmesh(b1(np) + b2(np) + b3(np) + b4(np) + circle(-np*pi/R));
    fespace UhOut(ThOut, P1);
    BemPotential Pot("SL", k);
    varf vp(u, v) = int1d(ThL)(POT(Pot, u, v));
    HMatrix<complex> B = vp(Uh, UhOut);
    UhOut<complex> v, vinc;
    vinc = finc;
    v[] = B*u[];
    v[] += vinc[];
    UhOut vr = abs(v);
    plot(vr, dim = 2, fill = 1, nbiso = 20, cmm = "Solution");
    if(mpirank == 0) {
        int[int] fforder = [1, 1];
        savevtk("helmholtz-3d-line.vtu", ThOut, real(v), imag(v), dataname = "u.re u.im", order = fforder, bin = 1);
    }
}
