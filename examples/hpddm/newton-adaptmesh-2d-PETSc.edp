//  run with MPI:  ff-mpirun -np 4 script.edp
// NBPROC 4

load "PETSc"                        // PETSc plugin
macro dimension()2// EOM            // 2D or 3D
include "macro_ddm.idp"             // additional DDM functions
func Pk = P2;                       // finite element space
func Pkdc = P2dc;                   // finite element space

mesh Th = square(getARGV("-global", 40), getARGV("-global", 40));
mesh ThBackup = Th;
Mat A;
macro ThRefinementFactor()getARGV("-split", 1)//
MatCreate(Th, A, Pk);

fespace Vh(Th, Pk);
fespace Ph(Th, Pkdc);
Vh b = 1;
real a = 0.001;
func real f(real u) { return u*a+u-log(1+u); }
func real df(real u) { return a+u/(1+u); }
func real ddf(real u) { return 1/((1+u)*(1+u)); }

Ph alpha;
Ph dfalpha;
Ph ddfalpha;
Vh u = 0;

varf vJ(uh, vh) = int2d(Th)(dfalpha*(dx(u)*dx(vh) + dy(u)*dy(vh)))
    + on(1, 2, 3, 4, uh = 0);
varf vC(uh, vh) = int2d(Th)(b*vh)
    + on(1, 2, 3, 4, uh = 0);
varf vhJ(uh, vh) = int2d(Th)(dfalpha*(dx(uh)*dx(vh) + dy(uh)*dy(vh)) + ddfalpha*(dx(u)*dx(vh) + dy(u)*dy(vh)) * (dx(u)*dx(uh) + dy(u)*dy(uh)))
    + on(1, 2, 3, 4, uh = 0);

func real[int] funcRes(real[int]& inPETSc) {
    ChangeNumbering(A, u[], inPETSc, inverse = true, exchange = true);
    alpha = dx(u)*dx(u) + dy(u)*dy(u);
    dfalpha = df(alpha);
    ddfalpha = 2 * ddf(alpha);
    real[int] v = vJ(0, Vh, tgv = -1);
    real[int] outPETSc;
    ChangeNumbering(A, v, outPETSc);
    return outPETSc;
}
func int funcJ(real[int]& inPETSc) {
    ChangeNumbering(A, u[], inPETSc, inverse = true, exchange = true);
    A = vhJ(Vh, Vh, tgv = -1);
    return 0;
}

real[int] xPETSc, bPETSc;
u[] = vC(0, Vh);
ChangeNumbering(A, u[], bPETSc);
xPETSc.resize(bPETSc.n);
xPETSc = 0;
SNESSolve(A, funcJ, funcRes, bPETSc, xPETSc, sparams = "-snes_monitor -ksp_monitor_true_residual -snes_max_it 4 -snes_converged_reason -ksp_converged_reason -pc_type lu -snes_view");
ChangeNumbering(A, u[], xPETSc, inverse = true, exchange = false);
fespace VhG(ThBackup, Pk);
VhG uG, uReduce;
uReduce = u;
mpiAllReduce(uReduce[], uG[], mpiCommWorld, mpiSUM);
if(mpirank == 0) {
    plot(uG, cmm = "Global solution", wait = 1, fill = 1, dim = 3);
    ThBackup = adaptmesh(ThBackup, uG);
}
broadcast(processor(0), ThBackup);
uG = uG;
plot(uG, cmm = "Global solution", wait = 1, fill = 1, dim = 3);
{
    Th = ThBackup;
    Mat Adapt;
    MatCreate(Th, Adapt, Pk);
    A = Adapt;
}
u = uG;
macro def(u)u//
plotMPI(Th, u, Pk, def, real, cmm = "Global solution");
xPETSc.resize(0);
ChangeNumbering(A, u[], xPETSc);
u[] = vC(0, Vh);
ChangeNumbering(A, u[], bPETSc);
SNESSolve(A, funcJ, funcRes, bPETSc, xPETSc, sparams = "-snes_monitor -snes_max_it 40 -ksp_monitor_true_residual -snes_converged_reason -ksp_converged_reason -pc_type lu -snes_view");
ChangeNumbering(A, u[], xPETSc, inverse = true, exchange = true);
plotMPI(Th, u, Pk, def, real, cmm = "Global solution");
