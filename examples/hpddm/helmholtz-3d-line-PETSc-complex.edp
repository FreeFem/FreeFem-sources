//  run with MPI:  ff-mpirun -np 4 script.edp
// NBPROC 4
// PARAM

load "iovtk"
load "PETSc-complex"
load "lapack"
macro dimension()3L// EOM
include "macro_ddm.idp"
load "bem"

complex k     = getARGV("-k", 10.0);

// incident wave
real[int] dir = [1,0];
func finc     = exp(1i*k*(dir[0]*x + dir[1]*y));
int n         = 1000;

border circle(t=0, 2*pi) { x=cos(t); y=sin(t); z=0; }
meshL ThL = buildmeshL(circle(n));
ThL = OrientNormal(ThL, unbounded = 1);
meshL ThG = ThL;

fespace Uh(ThL, P1);
BemKernel ker("SL", 1, k);
varf vk(u, v) = int1dx1d(ThL)(ThL)(BEM(ker, u, v));
HMatrix<complex> A = vk(Uh, Uh);
Mat<complex> H;
createMat(ThL, H, P1);
bool mass = usedARGV("-mass") != -1;
if(mass) {
    varf vM(u, v) = int1d(ThL)(u * v);
    matrix<complex> Loc = vM(Uh, Uh);
    H = Loc;
    set(H, sparams = "-mass_ksp_converged_reason", prefix = "mass_");
}
int[int] perm;
{
    fespace UhG(ThG, P1);
    UhG<complex> numbering;
    numbering[] = 0:UhG.ndof - 1;
    Uh<complex> glob2loc = numbering;
    complex[int] permc;
    ChangeNumbering(H, glob2loc[], permc);
    perm.resize(permc.n);
    for[i, p : permc] perm[i] = real(p);
}

func complex[int] op(complex[int]& in) {
    complex[int] out(in.n), u(ThG.nt), v(ThG.nt);
    for[i, p : perm] u[p] = in[i];
    mpiAllReduce(u, v, mpiCommWorld, mpiSUM);
    u = A * v;
    for[i, p : perm] out[i] = u[p];
    return out;
}
complex[int,int] dense(1, 1);
func complex[int] prec(complex[int]& in) {
    complex[int] out(in.n);
    if(!mass) {
        if(dense.n == 1 && dense.m == 1) {
            HMatrix<complex> A = vk(Uh, Uh, commworld=mpiCommSelf);
            dense.resize(Uh.ndof, Uh.ndof);
            dense = A;
            dense = dense^-1;
        }
        complex[int] u(Uh.ndof), v(Uh.ndof);
        ChangeNumbering(H, u, in, inverse = true);
        v = dense * u;
        ChangeNumbering(H, v, out);
    }
    else {
        KSPSolve(H, in, out);
    }
    return out;
}

varf vRHS(u, v) = -int1d(ThL)(finc*v);

Uh<complex> bf;
bf[] = vRHS(0, Uh);
complex[int] b, u;
ChangeNumbering(H, bf[], b);
u.resize(b.n);
KSPSolve(op, b, u, precon = prec, sparams = "-ksp_type fgmres -ksp_view_singularvalues -ksp_converged_reason -ksp_gmres_restart 1000 -pc_type shell");
// visualization
if(!NoGraphicWindow) {
    ThL = OrientNormal(ThG, unbounded = 1);
    Uh<complex> uf;
    bf = 0;
    for[i, p : perm] bf[][p] = u[i];
    mpiAllReduce(bf[], uf[], mpiCommWorld, mpiSUM);

    int np = 200;
    int R = 4;

    border b1(t=-R, R) { x = t ; y = -R; }
    border b2(t=-R, R) { x = R ; y = t; }
    border b3(t=-R, R) { x = -t; y = R; }
    border b4(t=-R, R) { x = -R; y = -t; }

    mesh ThOut = buildmesh(b1(np) + b2(np) + b3(np) + b4(np) + circle(-np*pi/R));
    fespace UhOut(ThOut, P1);
    BemPotential Pot("SL", k);
    varf vp(u, v) = int1d(ThL)(POT(Pot, u, v));
    HMatrix<complex> B = vp(Uh, UhOut);
    UhOut<complex> v, vinc;
    vinc = finc;
    v[] = B*uf[];
    v[] += vinc[];
    UhOut vr = abs(v);
    plot(vr, dim = 2, fill = 1, nbiso = 20, cmm = "Solution");
    if(mpirank == 0) {
        int[int] fforder = [1, 1];
        savevtk("helmholtz-3d-line.vtu", ThOut, real(v), imag(v), dataname = "u.re u.im", order = fforder, bin = 1);
    }
}
