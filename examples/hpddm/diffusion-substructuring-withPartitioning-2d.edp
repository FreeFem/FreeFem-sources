//  run with MPI:  ff-mpirun -np 4 script.edp
// NBPROC 4

assert(mpisize == 4);
load "hpddm_substructuring"         // HPDDM plugin
macro dimension()2// EOM            // 2D or 3D
include "macro_ddm_substructuring.idp" // additional DDM functions

macro def(i)i// EOM                 // scalar field definition
macro init(i)i// EOM                // scalar field initialization
macro grad(u)[dx(u), dy(u)]// EOM   // two-dimensional gradient
macro BC(u, val)u = val// EOM       // Dirichlet boundary conditions
func Pk = P1;                       // finite element space

int labNeumann = getARGV("-labNeumann", 2);                     // interface between subdomains
int s = getARGV("-split", 1);                                   // refinement factor

mpiComm comm;
int p = getARGV("-hpddm_level_2_p", 1);
bool excluded = splitComm(mpiCommWorld, p, comm, topology = getARGV("-hpddm_level_2_topology", 0), exclude = (usedARGV("-hpddm_level_2_exclude") != -1));

if(verbosity > 0 && mpirank == 0) {
    cout << " --- " << mpirank << "/" << mpisize;
    cout << " - diffusion-2d-substructuring.edp - input parameters: refinement factor = " << s << endl;
}

mesh Th = square(1, 1);
fespace Wh(Th, Pk);           // local finite element space
int[int][int] intersection;   // local-to-neighbors renumbering
int[int] interfaceNb;         //
int[int] labDirichlet = [1, 3];
{
    int[int] l = [2, 1, 3, 2];
    Th = square(getARGV("-global", 40), getARGV("-global", 40), label = l);    // global mesh
    fespace Ph(Th, P0);
    Ph part;
    part = (x > 0.5 && y > 0.5 ? 3 : (x > 0.5 ? 2 : (y < 0.5 ? 1 : 0)));
    buildSubstructuringWithPartitioning(Th, interfaceNb, part[], 10, labDirichlet, labNeumann, s, intersection, Pk, BC, comm, excluded);
}

func f = 10;
varf vPb(u, v) = int2d(Th)(grad(u)' * grad(v)) + int2d(Th)(f * v) + on(labDirichlet, u = 1.0);
matrix<real> Mat = vPb(Wh, Wh, sym = 1); // local operator
real[int] rhs = vPb(0, Wh);                  // local right-hand side

bdd A(Mat, intersection, communicator = comm);
// this can be replaced by feti
bool adaptive = isSetOption("geneo_nu") || isSetOption("geneo_threshold");

pair ret;
if(mpisize == 1)
    renumber(A, Mat, interfaceNb, effort = rhs);
else {
    if(excluded)
        AttachCoarseOperator(mpiCommWorld, A);
    else {
        Wh[int] def(Rb)(0);
        real[int] float(Wh.ndof);
        varf floatingPb(def(u), def(v)) = on(labDirichlet, BC(u, 1.0));
        float = floatingPb(0, Wh);
        if(float.max < 0.9 && !adaptive) {
            Rb.resize(1);
            Rb[0][] = 1;
        }
        if(getARGV("-hpddm_substructuring_scaling", 0) != 2)
            renumber(A, Mat, interfaceNb, R = Rb, effort = rhs);
        else {
            Wh def(mu) = 1.0;
            renumber(A, Mat, interfaceNb, R = Rb, effort = rhs, rho = mu[]);
        }
        AttachCoarseOperator(mpiCommWorld, A, R = Rb, ret = ret);
    }
}

Wh<real> def(u) = 0.0;    // local solution

if(mpisize == mpiSize(comm))
    u[] = A^-1 * rhs;
else
    DDM(A, rhs, u[], excluded = excluded);

if(!excluded)
    OriginalNumbering(A, u[], interfaceNb);
plotMPI(Th, u, Pk, def, real, cmm = "Global solution");

statistics(A);
