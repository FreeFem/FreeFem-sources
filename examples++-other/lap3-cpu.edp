//  a example to test the level of optimisation
// --------------------------------------------
int nn=300;
 mesh Th=square(nn,nn);
verbosity=5;
 fespace Vh(Th,P1);     // P1 FE space
 Vh uh,vh;              // unkown and test function. 
 func f=1;                 //  right hand side function 
 func g=0;                 //  boundary condition function

 problem laplace0(uh,vh,solver=Cholesky,tgv=1e30) =                    //  definion of  the problem 
    int2d(Th)( dx(uh)*dx(vh) + dy(uh)*dy(vh) ) //  bilinear form
  + int1d(Th,1)( uh*vh) 
  + int1d(Th,1)( - vh)
  + int2d(Th)( -f*vh )                          //  linear form
  + on(2,3,4,uh=g) ;                      //  boundary condition form

 problem laplace1(uh,vh,solver=CG,tgv=1e30) =                    //  definion of  the problem 
    int2d(Th)( dx(uh)*dx(vh) + dy(uh)*dy(vh) ) //  bilinear form
  + int1d(Th,1)( uh*vh) 
  + int1d(Th,1)( - vh)
  + int2d(Th)( -f*vh )                          //  linear form
  + on(2,3,4,uh=g) ;                      //  boundary condition form

real cpu=clock() ;
laplace0; // solve the problem plot(uh); // to see the result
cout << "-- lap cholesky " << nn << "x" << nn << "  : " <<  -cpu+clock() << " s" << endl;
uh=0;
cpu=clock() ;
laplace1; // solve the problem plot(uh); // to see the result
cout << "-- lap CG       " << nn << "x" << nn << "  : " <<  -cpu+clock() << " s" << endl;
uh=0;

if(HaveUMFPACK){
  problem laplace2(uh,vh,solver=UMFPACK,tgv=1e30) =                    //  definion of  the problem 
    int2d(Th)( dx(uh)*dx(vh) + dy(uh)*dy(vh) ) //  bilinear form
    + int1d(Th,1)( uh*vh) 
    + int1d(Th,1)( - vh)
    + int2d(Th)( -f*vh )                          //  linear form
    + on(2,3,4,uh=g) ;                      //  boundary condition form

  cpu=clock(); 
  laplace2; // solve the problem plot(uh); // to see the result
  cout << "-- lap UMFPACK  " << nn << "x" << nn << "  : "
       <<  -cpu+clock() << " s" << endl;
}
else{
  cout << "-- lap UMFPACK  " << nn << "x" << nn << "  : "
       <<  "not available" << endl;
}

//  plot(uh,ps="lap1-cpu.eps",value=true);
