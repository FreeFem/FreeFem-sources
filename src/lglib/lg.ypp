*** /home/alh/ff/draft/src/lglib/lg.ypp	2013-12-19 11:48:27.410086820 +0100
--- /tmp/lg.ypp~other.zArFWU	2013-12-19 11:48:27.406086792 +0100
***************
*** 1,4 ****
! // \file
  
  %{ 
      // -*- Mode : c++ -*-
--- 1,4 ----
! /// \file
  
  %{ 
      // -*- Mode : c++ -*-
***************
*** 30,35 ****
--- 30,36 ----
       */
      
  #include "config-wrapper.h"
+ #define eflval yylval 
  #include <iostream>
  #include  <complex>
  #include <string>
***************
*** 89,99 ****
  Block * routineinblock[nbembtype]; // Add FH july 2005 pb clean on return 
  int kkembtype=-1;
  int inloopcount=0;
- 
- /// <<currentblock>> Block class from [[file:../fflib/AFunction.hpp::Block]]
- 
  Block *currentblock;
- 
  // Add FH july 2005 
  //  problem clean variable after break,continue and return.
  const int sizeStackOfLoop=100; 
--- 90,96 ----
***************
*** 106,122 ****
  int fespacedim;
  extern int UnShowAlloc;
  int ShowAlloc(const char *s,size_t &);
- 
- // <<yylex>> Connection from grammar to lexer object zzzfff [[file:../fflib/lex.hpp::zzzfff]] of class mylex
- // [[file:../fflib/lex.hpp::class mylex]]. Method mylex::scan() is implemented at [[file:../fflib/lex.cpp::mylex_scan]]
- 
  inline int yylex()  {return zzzfff->scan();}
  inline int lineno() {return zzzfff->lineno();}
  
  extern bool withrgraphique;
- 
- /// <<fingraphique>>
- 
  inline void fingraphique()
   { if(withrgraphique) 
     { withrgraphique=false;
--- 103,112 ----
***************
*** 133,167 ****
  void (*end_parallele)()=0;
  %}
  
- /* <<YYSTYPE>> definition. <<yylval>> is renamed <<lglval>> by bison at [[file:lg.tab.cpp::lglval]]. It is allocated in
-  lg.tab.o */
- 
  %union{ 
!   double dnum;
!   long lnum;
!   char * str;
!   char oper[8];
! 
!   /* cf [[file:../fflib/AFunction.hpp::CC_F0]] */
!   CC_F0 cexp;
! 
!   /* cf [[file:../fflib/AFunction.hpp::Routine]] */
!   Routine *routine;
! 
!   /* array of parameters for FF language operators. cf [[file:../fflib/AFunction.hpp::AC_F0]] */
!   AC_F0 args;
! 
!   /* cf [[file:../fflib/AnyType.hpp::aType]] */
!   aType type;
! 
!   /* cf [[file:../fflib/AFunction.hpp::CListOfInst]] */
!   CListOfInst cinst;
! 
!   /* cf [[file:../fflib/AFunction.hpp::Block]] */
!   Block *block; 
! 
!   /* cf [[file:../fflib/AFunction.hpp::ListOfId]] */
!   ListOfId *clist_id;
  }
  
  /* BISON Declarations */
--- 123,141 ----
  void (*end_parallele)()=0;
  %}
  
  %union{ 
!  double dnum;
!  long lnum;
!  char * str;
!  char oper[8];
!  CC_F0 cexp;
!  Routine   *routine;
!  AC_F0 args;
!  aType type;
!  CListOfInst cinst;
!  Block * block; 
!  ListOfId *clist_id;
! /* ListCatch * clist_Catchs;*/
  }
  
  /* BISON Declarations */
***************
*** 282,371 ****
  
  %% 
  
! /* <<start_symbol>> called from [[Compile]] */
! 
! start:
!     input /*[[input]]*/
!     ENDOFFILE {
!       const char *magicffglut="#!ffglutdata3.1\n";// for complex and vector 3d plot 
! 
!       // FFCS: divert stream to FFCS
!       if(ThePlotStream) ffapi::fwriteinit(magicffglut,strlen(magicffglut),1,ThePlotStream);	            
! 
!       // <<sizestack>> cf [[currentblock]]
!       size_t sizestack = currentblock->size()+1024 ; //  before close 
! 
!       // $1 is of type [[YYSTYPE]]
!       $1+=currentblock->close(currentblock);
! 
!       if(verbosity>2 || mpirank==0) cout << " sizestack + 1024 =" << sizestack << "  ( " << sizestack-1024 <<" )\n" ;   
!       size_t lg0,lg1;                       
!       int NbPtr = ShowAlloc("init execution ",lg0); // number of un delele ptr
!       UnShowAlloc =0;// add FH for parallee
!       if(verbosity>2  || mpirank==0) cout << endl;  
! 
!       {
! 
!         // <<create_global_FF_stack>> calls [[file:../fflib/ffstack.hpp::newStack]]
! 
!         Stack stack = newStack(sizestack);
! 
!         double CPUcompile= CPUtime();
!         try {                  
! 
!           // calls [[file:../fflib/AFunction.hpp::CListOfInst::eval]]
! 
!           $1.eval(stack);
!         }
!         catch ( E_exception & e)  {
!           cerr << e.what() << " ,  mpirank " << mpirank << endl;
!           return 1; 
!         }
!         catch( Error & err) {
!           cerr << err.what() << endl;
!           cerr << " err code " << err.errcode() << " ,  mpirank " << mpirank << endl;
!           return err.errcode();
!         }
!         catch( ...) { cerr << "Strange catch exception ???\n"; 
!           cerr << " at exec line  " << TheCurrentLine << " ,  mpirank " << mpirank << endl;
!           return 1; 
!         }
! 
!         if(verbosity) cout << "times: compile "<< CPUcompile-CPUcompileInit <<"s, execution " 
!                            <<  CPUtime()-CPUcompile  <<"s,  mpirank:" << mpirank << endl;
! 
!         /// <<delete_global_FF_stack>>
! 
!         deleteStack(stack);
!       } 
! 
!       fingraphique();
! 
!       if(ThePlotStream){
! 
!         // FFCS: divert stream to FFCS
!         ffapi::ff_pclose(ThePlotStream);
! 
!         ThePlotStream=0;
!       }
! 
!       UnShowAlloc =1;
!       NbPtr = ShowAlloc("end execution -- ",lg1) - NbPtr;
                          
!       if (NbPtr) { cout << " ######## We forget of deleting   " << NbPtr 
!                         << " Nb pointer,   " <<  lg1-lg0 << "Bytes " << " ,  mpirank " << mpirank <<endl;}
!       return 0;
!     }
  ;
  
! /*<<input>>*/
! 
! input:   instructions /*[[instructions]]*/
  ;
           
! /*<<instructions>>*/
! 
! instructions:  instruction /*[[instruction]]*/   {$$=$1;;;}
          | instructions  instruction   { $$= ($1+=$2) }         
          ;
  
--- 256,309 ----
  
  %% 
  
! start:   input ENDOFFILE {
! 		        const char *  magicffglut="#!ffglutdata3.1\n";// for complex and vector 3d plot 
! 			//FFCS: divert stream to FFCS
!                         if(ThePlotStream) ffapi::fwriteinit(magicffglut,strlen(magicffglut),1,ThePlotStream);	            
!                         size_t sizestack = currentblock->size()+1024 ; //  before close 
!                         $1+=currentblock->close(currentblock);
!                         if(verbosity>2 || mpirank==0) cout << " sizestack + 1024 =" << sizestack << "  ( " << sizestack-1024 <<" )\n" ;   
!                         size_t lg0,lg1;                       
!                         int NbPtr = ShowAlloc("init execution ",lg0); // number of un delele ptr
! 			UnShowAlloc =0;// add FH for parallee
!                         if(verbosity>2  || mpirank==0) cout << endl;  
!                         { Stack stack = newStack(sizestack);
!                         double CPUcompile= CPUtime();
!                         try {                  
!                           $1.eval(stack);}
!                         catch ( E_exception & e)  {
!                           cerr << e.what() << " ,  mpirank " << mpirank << endl;
!                           return 1; }
!                         catch( Error & err) {
!                           cerr << err.what() << endl;
! 			  cerr << " err code " << err.errcode() << " ,  mpirank " << mpirank << endl;
!                           return err.errcode();
!                         }
!                          catch( ...) { cerr << "Strange catch exception ???\n"; 
!                           cerr << " at exec line  " << TheCurrentLine << " ,  mpirank " << mpirank << endl;
!                           return 1; 
!                          }
! 
!                         if(verbosity)  cout << "times: compile "<< CPUcompile-CPUcompileInit <<"s, execution " 
! 			    <<  CPUtime()-CPUcompile  <<"s,  mpirank:" << mpirank << endl;
!                         deleteStack(stack);
!                         //debugstack.clear() 
!                         } 
!                         fingraphique();
! 			//FFCS: divert stream to FFCS
! 			if(ThePlotStream) {ffapi::ff_pclose(ThePlotStream); ThePlotStream=0;}
! 			UnShowAlloc =1;
!                         NbPtr = ShowAlloc("end execution -- ",lg1) - NbPtr;
                          
! 			    if (NbPtr) { cout << " ######## We forget of deleting   " << NbPtr 
! 			                      << " Nb pointer,   " <<  lg1-lg0 << "Bytes " << " ,  mpirank " << mpirank <<endl;}
!   return 0;}
  ;
  
! input:   instructions 
  ;
           
! instructions:  instruction   {$$=$1;;;}
          | instructions  instruction   { $$= ($1+=$2) }         
          ;
  
***************
*** 395,403 ****
  list_of_id1:  id                      { $$ = new ListOfId(); $$->push_back(UnId($1)); }
              | list_of_id1 ',' id      { $$=$1  ; $$->push_back(UnId($3)); }
  ;
!    
! /*<<id>>*/
!       
  id: ID | FESPACE|FESPACE3|FESPACE1; 
  
  /* <<list_of_dcls>> */
--- 333,339 ----
  list_of_id1:  id                      { $$ = new ListOfId(); $$->push_back(UnId($1)); }
              | list_of_id1 ',' id      { $$=$1  ; $$->push_back(UnId($3)); }
  ;
!          
  id: ID | FESPACE|FESPACE3|FESPACE1; 
  
  /* <<list_of_dcls>> */
***************
*** 483,489 ****
      
  /* <<declaration>> */
  
! declaration:   type_of_dcl {dcltype=$1} list_of_dcls ';' {$$=$3} /* see [[type_of_dcl]] [[list_of_dcls]] */
               | FESPACEID  fespace_def_list    ';' {$$=$2}  
               | spaceIDs ';'{ $$=$1} 
               | FUNCTION ID '=' Expr ';' {$$=currentblock->NewID($1,$2,$4);} 
--- 419,425 ----
      
  /* <<declaration>> */
  
! declaration:   type_of_dcl {dcltype=$1} list_of_dcls ';' {$$=$3} /* see [[list_of_dcls]] */
               | FESPACEID  fespace_def_list    ';' {$$=$2}  
               | spaceIDs ';'{ $$=$1} 
               | FUNCTION ID '=' Expr ';' {$$=currentblock->NewID($1,$2,$4);} 
***************
*** 527,540 ****
  
  try: TRY { Block::open(currentblock) };
  
! /*<<instruction>>*/
  
  instruction:   ';' {$$=0;} 
           | INCLUDE  STRING  {zzzfff->input($2);$$= 0; }
           | LOAD  STRING  {load($2);$$= 0; }
           |  try  '{' instructions '}' catchs {$$=Try($3,$5,currentblock->close(currentblock));}
!          |  Expr ';' {$$=$1} /*[[Expr]]*/
!          |  declaration  {$$=$1} /*[[declaration]]*/
           |  for_loop  '(' Expr ';' Expr ';' Expr ')' instruction {inloopcount--; $$=For($3,$5,$7,$9)} 
           |  for_loop  '(' declaration_for ';' Expr ';' Expr ')' instruction 
                  {inloopcount--; 
--- 463,476 ----
  
  try: TRY { Block::open(currentblock) };
  
! /* <<instruction>> */
  
  instruction:   ';' {$$=0;} 
           | INCLUDE  STRING  {zzzfff->input($2);$$= 0; }
           | LOAD  STRING  {load($2);$$= 0; }
           |  try  '{' instructions '}' catchs {$$=Try($3,$5,currentblock->close(currentblock));}
!          |  Expr  ';' {$$=$1}  
!          |  declaration  {$$=$1} 
           |  for_loop  '(' Expr ';' Expr ';' Expr ')' instruction {inloopcount--; $$=For($3,$5,$7,$9)} 
           |  for_loop  '(' declaration_for ';' Expr ';' Expr ')' instruction 
                  {inloopcount--; 
***************
*** 582,595 ****
     currentblock->close(currentblock)} 
   ;
  
- /*<<Expr>>*/
- 
  Expr:	 
!          no_comma_expr /*[[no_comma_expr]]*/
         | Expr ',' Expr {$$=C_F0(TheOperators,$2,$1,$3);}
  ;
  
- /*<<unop>>*/
  	
  unop:
  	  '-' 
--- 518,528 ----
     currentblock->close(currentblock)} 
   ;
  
  Expr:	 
!          no_comma_expr 
         | Expr ',' Expr {$$=C_F0(TheOperators,$2,$1,$3);}
  ;
  
  	
  unop:
  	  '-' 
***************
*** 599,608 ****
  	| MOINSMOINS 
  ;
  
- /*<<no_comma_expr>>*/
- 
  no_comma_expr:
!       no_set_expr /*[[no_set_expr]]*/
  	| no_set_expr '=' no_comma_expr {$$=C_F0(TheOperators,$2,$1,$3)}
  	| no_set_expr PLUSEQ no_comma_expr {$$=C_F0(TheOperators,"+=",$1,$3)}
  	| no_set_expr MOINSEQ no_comma_expr {$$=C_F0(TheOperators,"-=",$1,$3)}
--- 532,539 ----
  	| MOINSMOINS 
  ;
  
  no_comma_expr:
!       no_set_expr 
  	| no_set_expr '=' no_comma_expr {$$=C_F0(TheOperators,$2,$1,$3)}
  	| no_set_expr PLUSEQ no_comma_expr {$$=C_F0(TheOperators,"+=",$1,$3)}
  	| no_set_expr MOINSEQ no_comma_expr {$$=C_F0(TheOperators,"-=",$1,$3)}
***************
*** 612,630 ****
  	| no_set_expr DOTDIVEQ no_comma_expr {$$=C_F0(TheOperators,"./=",$1,$3)}
  ;
  
- /*<<no_set_expr>>*/
  
  no_set_expr:
! 	no_ternary_expr /*[[no_ternary_expr]]*/
  	| no_ternary_expr '?' no_ternary_expr ':' no_ternary_expr {$$=C_F0(TheOperators,"?:",$1,$3,$5)}
          | no_ternary_expr ':' no_ternary_expr {$$=C_F0(TheOperators,"::",$1,$3)}
  	| no_ternary_expr ':' no_ternary_expr ':' no_ternary_expr {$$=C_F0(TheOperators,"::",$1,$3,$5)} 	
  ;
- 
- /*<<no_ternary_expr>>*/
- 
  no_ternary_expr:
! 	  unary_expr /*[[unary_expr]]*/
  	| no_ternary_expr '*' no_ternary_expr {$$=C_F0(TheOperators,$2,$1,$3)}
  	| no_ternary_expr DOTSTAR no_ternary_expr {$$=C_F0(TheOperators,$2,$1,$3)}
  	| no_ternary_expr DOTSLASH no_ternary_expr {$$=C_F0(TheOperators,$2,$1,$3)}
--- 543,558 ----
  	| no_set_expr DOTDIVEQ no_comma_expr {$$=C_F0(TheOperators,"./=",$1,$3)}
  ;
  
  
  no_set_expr:
! 	no_ternary_expr
  	| no_ternary_expr '?' no_ternary_expr ':' no_ternary_expr {$$=C_F0(TheOperators,"?:",$1,$3,$5)}
          | no_ternary_expr ':' no_ternary_expr {$$=C_F0(TheOperators,"::",$1,$3)}
  	| no_ternary_expr ':' no_ternary_expr ':' no_ternary_expr {$$=C_F0(TheOperators,"::",$1,$3,$5)} 	
+ 			    
  ;
  no_ternary_expr:
! 	  unary_expr 
  	| no_ternary_expr '*' no_ternary_expr {$$=C_F0(TheOperators,$2,$1,$3)}
  	| no_ternary_expr DOTSTAR no_ternary_expr {$$=C_F0(TheOperators,$2,$1,$3)}
  	| no_ternary_expr DOTSLASH no_ternary_expr {$$=C_F0(TheOperators,$2,$1,$3)}
***************
*** 647,654 ****
  	
  ;
  
- /*<<sub_script_expr>>*/
- 
  sub_script_expr:  
  	    no_ternary_expr {$$=$1} 
      |   ':' {$$=C_F0(TheOperators,":")}			    
--- 575,580 ----
***************
*** 657,719 ****
  
  ;
    
- /*<<parameters>>*/
- 
  parameters:  {$$=0} 
! 	|   FESPACE {$$=Find($1)} /*[[file:../fflib/AFunction2.cpp::Find]]*/
  	|   FESPACE1 {$$=Find($1)} 
  	|   FESPACE3 {$$=Find($1)} 
! 
!     /* cf [[id]] [[no_set_expr]] */
! 	|  id '=' no_set_expr { $$=make_pair<const char *,const C_F0>($1,$3)}
! 
! 	|   sub_script_expr {$$=$1} /*[[sub_script_expr]]*/
  	| parameters ',' FESPACE { $$ = ($1 += Find($3)) }
  	| parameters ',' FESPACE1 { $$ = ($1 += Find($3)) }
  	| parameters ',' FESPACE3 { $$ = ($1 += Find($3)) }
! 	| parameters ',' sub_script_expr { $$ = ($1 += $3) } /*[[sub_script_expr]]*/
! 
!     /* cf [[id]] [[no_set_expr]] */
! 	| parameters ',' id '=' no_set_expr { $$= ($1+= make_pair<const char *,const C_F0>($3,$5)) }
  ; 
  
  array:   no_comma_expr {$$=$1} 
         | array ',' no_comma_expr {$$ = ($1 += $3) };
       
- /*<<unary_expr>>*/
      
  unary_expr:
!     pow_expr /*[[pow_expr]]*/
!   | unop  pow_expr %prec UNARY {$$=C_F0(TheOperators,$1,$2)} /*[[unop]] [[pow_expr]]*/
  ;   
  
! /*<<pow_expr>>*/
! 
! pow_expr: primary /*[[primary]]*/
    |      primary  '^' unary_expr   {$$=C_F0(TheOperators,$2,$1,$3)} 
    |      primary  '_' unary_expr   {$$=C_F0(TheOperators,$2,$1,$3)} 
    |      primary '\''              {$$=C_F0(TheOperators,$2,$1)} 
  ;
  
- /*<<primary>>*/
- 
  primary:  
- 
-   /* <<primary_ID>> calls [[file:~/ff/draft/src/fflib/AFunction2.cpp::Find]]
-      returns [[file:~/ff/draft/src/fflib/AFunction.hpp::C_F0]] */
- 
             ID           {$$=Find($1);}
- 
    |        LNUM         {$$= CConstant($1)}
    |        DNUM         {$$= CConstant($1)}
    |        CNUM         {$$= CConstant(complex<double>(0,$1))}
    |        STRING {$$= CConstant<const char *>($1)}
- 
-   /* <<primary_brackets_parameters>> refers to [[parameters]] and creates an object of class
-      [[file:../fflib/AFunction.hpp::C_F0]] */
- 
    |        primary '('  parameters ')'  {$$=C_F0($1,$2,$3);}
- 
    |        primary '[' sub_script_expr ']'    {$$=C_F0($1,$2,$3)}
    |        primary '[' sub_script_expr ',' sub_script_expr ']'  {$$=C_F0($1,$2,$3,$5)}
    |        primary '['  ']'        {$$=C_F0($1,"[]")}
--- 583,623 ----
  
  ;
    
  parameters:  {$$=0} 
! 	|   FESPACE {$$=Find($1)} 
  	|   FESPACE1 {$$=Find($1)} 
  	|   FESPACE3 {$$=Find($1)} 
! 	|  id '=' no_set_expr { $$=make_pair<const char *,const C_F0>($1,$3)} 	
! 	|   sub_script_expr {$$=$1} 
  	| parameters ',' FESPACE { $$ = ($1 += Find($3)) }
  	| parameters ',' FESPACE1 { $$ = ($1 += Find($3)) }
  	| parameters ',' FESPACE3 { $$ = ($1 += Find($3)) }
! 	| parameters ',' sub_script_expr { $$ = ($1 += $3) }
! 	| parameters ',' id '=' no_set_expr { $$= ($1+= make_pair<const char *,const C_F0>($3,$5)) } 
  ; 
  
  array:   no_comma_expr {$$=$1} 
         | array ',' no_comma_expr {$$ = ($1 += $3) };
       
      
  unary_expr:
!     pow_expr   
!   | unop  pow_expr %prec UNARY {$$=C_F0(TheOperators,$1,$2)} 
  ;   
  
! pow_expr: primary
    |      primary  '^' unary_expr   {$$=C_F0(TheOperators,$2,$1,$3)} 
    |      primary  '_' unary_expr   {$$=C_F0(TheOperators,$2,$1,$3)} 
    |      primary '\''              {$$=C_F0(TheOperators,$2,$1)} 
  ;
  
  primary:  
             ID           {$$=Find($1);}
    |        LNUM         {$$= CConstant($1)}
    |        DNUM         {$$= CConstant($1)}
    |        CNUM         {$$= CConstant(complex<double>(0,$1))}
    |        STRING {$$= CConstant<const char *>($1)}
    |        primary '('  parameters ')'  {$$=C_F0($1,$2,$3);}
    |        primary '[' sub_script_expr ']'    {$$=C_F0($1,$2,$3)}
    |        primary '[' sub_script_expr ',' sub_script_expr ']'  {$$=C_F0($1,$2,$3,$5)}
    |        primary '['  ']'        {$$=C_F0($1,"[]")}
***************
*** 761,793 ****
  void init_lgmesh3() ;
  void init_algo();
  bool withrgraphique = false;
  
! /// <<Compile>> Called by mainff(). Activates the bison parser by calling yyparse()
  int Compile()
  {
- 
-   // see [[YYSTYPE]] [[yylval]] [[lglval]]
    extern   YYSTYPE *plglval;  // modif FH 
- 
-   /// plglval is allocated at [[file:../fflib/global.cpp::plglval]]
    plglval = &lglval;
- 
    int retvalue=0;
! 
    currentblock=0;
    Block::open(currentblock);  
    try {
      UnShowAlloc =0;
!     retvalue=yyparse(); // grammar analysis starting from [[start_symbol]]
!    
!     if(retvalue==0)  
!       if(currentblock) 
!         {retvalue=1; if(!mpirank) cerr <<  "Error:a block is not close" << endl; }  
!       else {
!         if( verbosity  ) {
  	      UnShowAlloc =1;
! 	      cerr << " CodeAlloc : nb ptr  "<< CodeAlloc::nb << ",  size :"  <<  CodeAlloc::lg << " mpirank: " <<mpirank << endl;
! 	      if(!mpirank) cerr <<  "Bien: On a fini Normalement" << endl; }
        }
    }
  
--- 665,702 ----
  void init_lgmesh3() ;
  void init_algo();
  bool withrgraphique = false;
+ //string  StrVersionNumber();
  
! /// Called by mainff() and activates the bison parser by calling yyparse()
  int Compile()
  {
    extern   YYSTYPE *plglval;  // modif FH 
    plglval = &lglval;
    int retvalue=0;
!   //  int ok;
!   
    currentblock=0;
    Block::open(currentblock);  
    try {
      UnShowAlloc =0;
!     retvalue=yyparse (); //  compile
!     
!     if    (retvalue==0)  
!       {
! 	if(currentblock) 
! 	  {
! 	    retvalue=1;
! 	    if(!mpirank) cerr <<  "Error:a block is not close" << endl; 
! 	  }     
! 	else {
! 	  if( verbosity  ) 
! 	    { 
  	      UnShowAlloc =1;
! 	      cerr << " CodeAlloc : nb ptr  "<< CodeAlloc::nb << ",  size :"  <<  CodeAlloc::lg 
! 		   << " mpirank: " <<mpirank << endl    ;
! 	      if(!mpirank) cerr <<  "Bien: On a fini Normalement" << endl; 
! 	    }
! 	}
        }
    }
  
***************
*** 795,818 ****
      {
        retvalue=e.errcode();
        if(mpirank ==0)
!       cerr << "error " << e.what() 
! 	   << "\n code = "<<  retvalue << " mpirank: " <<mpirank  << endl;
      }
    catch(std::ios_base::failure & e)
      {
!      cerr << "std  catch io failure \n what : " << e.what() << endl;; 
!      cerr << " at exec line  " << TheCurrentLine << " mpirank: " <<mpirank  << endl; 
      }
    catch(std::exception & e)
      {
!      cerr << "std  catch exception \n what : " << e.what() << endl;; 
!      cerr << " at exec line  " << TheCurrentLine << " mpirank: " <<mpirank  << endl; 
!     
      }
    catch(...)
!    {
!      cerr << "Strange catch exception ???\n"; 
!      cerr << " at exec line  " << TheCurrentLine << " mpirank: " <<mpirank << endl; 
      }
    return retvalue; 
  }
--- 704,727 ----
      {
        retvalue=e.errcode();
        if(mpirank ==0)
! 	cerr << "error " << e.what() 
! 	     << "\n code = "<<  retvalue << " mpirank: " <<mpirank  << endl;
      }
    catch(std::ios_base::failure & e)
      {
!       cerr << "std  catch io failure \n what : " << e.what() << endl;; 
!       cerr << " at exec line  " << TheCurrentLine << " mpirank: " <<mpirank  << endl; 
      }
    catch(std::exception & e)
      {
!       cerr << "std  catch exception \n what : " << e.what() << endl;; 
!       cerr << " at exec line  " << TheCurrentLine << " mpirank: " <<mpirank  << endl; 
!       
      }
    catch(...)
!     {
!       cerr << "Strange catch exception ???\n"; 
!       cerr << " at exec line  " << TheCurrentLine << " mpirank: " <<mpirank << endl; 
      }
    return retvalue; 
  }
***************
*** 892,899 ****
  	karg[i]=argv[i];
      pkarg= &karg;
  
!     /// <<zzzfff>>
!     zzzfff = Newlex(cout,echo_edp);
    
    
  /*  
--- 801,807 ----
  	karg[i]=argv[i];
      pkarg= &karg;
  
!   zzzfff = Newlex(cout,echo_edp);
    
    
  /*  
***************
*** 937,947 ****
    //  callInitsFunct() ; //  init for dynamique libs ...
  
     if(verbosity>2 || mpirank==0)  cout << endl;
!   zzzfff->input(cc); // [[file:../fflib/lex.cpp::void mylex input]]
    EnvironmentLoad(); // just before compile
    verbosity=vvold; 
      
!   retvalue= Compile(); // [[Compile]]
     // cout << " xxxxx " <<  retvalue << " " << ThePlotStream << endl;
  
    if(end_parallele) end_parallele();
--- 845,855 ----
    //  callInitsFunct() ; //  init for dynamique libs ...
  
     if(verbosity>2 || mpirank==0)  cout << endl;
!   zzzfff->input(cc);
    EnvironmentLoad(); // just before compile
    verbosity=vvold; 
      
!   retvalue= Compile();
     // cout << " xxxxx " <<  retvalue << " " << ThePlotStream << endl;
  
    if(end_parallele) end_parallele();
