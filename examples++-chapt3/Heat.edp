bool withplot=0;
real cpu1,cpu2;
func k = 1.8*(y<0.5)+0.2;
real kf = 1, ue=20, T=5, dt=0.1 ;
mesh Th=square(150,50,[3*x,y]);
fespace Vh(Th,P1);
Vh u,uold,v,usave;
int kk=0;
problem Heat(u,v,init=kk)
    = int2d(Th)(u*v/dt + k*(dx(u) * dx(v) + dy(u) * dy(v)))
      + int1d(Th,1,3)(kf*v*u)
      - int1d(Th,1,3)(kf*v*ue)
      - int2d(Th)(uold*v/dt) + on(2,4,u=30)
                ;
real cpu=clock();                
u=0;
for(real t=0;t<T;t+=dt) // time bacis loop 
  {
    uold=u;
    Heat;
    kk++;
    if(withplot) plot(u);
     
}
// Optimize  code 
cpu1 = clock()-cpu;
plot(u);
usave[]=u[];
varf vA(u,v)
    = int2d(Th)(u*v/dt + k*(dx(u) * dx(v) + dy(u) * dy(v)))
                + int1d(Th,1,3)(kf*v*u)
                + on(2,4,u=30)
                ;
varf vB(u,v)    =  int2d(Th)(u*v/dt) ;
varf vRHS(u,v)  =  int1d(Th,1,3)(kf*v*ue);
varf vL(u,v)    =  on(2,4,u=30);


{
 cpu=clock();
real[int] rhsbc=vL(0,Vh);
real[int] rhs0=vRHS(0,Vh);
matrix A = vA(Vh,Vh,solver=sparsesolver);
matrix B = vB(Vh,Vh); 

u=0;
for(real t=0;t<T;t+=dt) // Optimize time  loop (speed of C language) 
  {
  	real[int] b=  B*u[];
  	b+= rhs0;
    b = rhsbc ? rhsbc : b;
    u[] = A^-1*b; 
    if(withplot)    plot(u);   
}
cpu2 = clock()-cpu;
}
plot(u,cmm=" u2 ");
cout << " cpu metho 1 = " << cpu1 << " cpu metho matrix = " << cpu2 << " ratio = " <<  cpu1/cpu2 << endl;

             


