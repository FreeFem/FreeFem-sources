// Regression tests
// ----------------

// $Id$

// Regression tests
// ----------------

// The tests are checked against reference values by "make check" in
// each examples subdirectory

// "ref.edp" contains all reference values and may be rebuilt with
// "make Ref"

// $Id$

// The values tested here may not have a physical or mathematical
// meaning. Their main property is to gather numerical values from the
// whole domain, to be checked for consistency with previous runs.

NoUseOfWait=true;
int verbosityy=verbosity;




include "ref.edp";





// The values tested here may not have a physical or mathematical
// meaning. Their main property is to gather numerical values from the
// whole domain, to be checked for consistency with previous runs.


cout << "--------- file : aadaptation.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "aadaptation.edp";
	real TESTaadaptation=regvalue;
		cout<<"aadaptation reference value = "<<REFaadaptation
				<<" test value ="<<TESTaadaptation<<endl;
			assert(TESTaadaptation<REFaadaptation*(1+0.1));
				assert(TESTaadaptation>REFaadaptation*(1-0.1));
};
;
cout << "--------- file : aalapacien.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "aalapacien.edp";
	real TESTaalapacien=1+err;
		cout<<"aalapacien reference value = "<<REFaalapacien
				<<" test value ="<<TESTaalapacien<<endl;
			assert(TESTaalapacien<REFaalapacien*(1+0.00001));
				assert(TESTaalapacien>REFaalapacien*(1-0.00001));
};
;
cout << "--------- file : aalaplace-nc.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "aalaplace-nc.edp";
	real TESTaalaplaceXnc=u[]'*u[];
		cout<<"aalaplace-nc reference value = "<<REFaalaplaceXnc
				<<" test value ="<<TESTaalaplaceXnc<<endl;
			assert(TESTaalaplaceXnc<REFaalaplaceXnc*(1+0.1));
				assert(TESTaalaplaceXnc>REFaalaplaceXnc*(1-0.1));
};
;
cout << "--------- file : aamove.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "aamove.edp";
	real TESTaamove=u[]'*u[];
		cout<<"aamove reference value = "<<REFaamove
				<<" test value ="<<TESTaamove<<endl;
			assert(TESTaamove<REFaamove*(1+0.1));
				assert(TESTaamove>REFaamove*(1-0.1));
};
;
cout << "--------- file : aaRT.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "aaRT.edp";
	real TESTaaRT=u1[]'*u1[];
		cout<<"aaRT reference value = "<<REFaaRT
				<<" test value ="<<TESTaaRT<<endl;
			assert(TESTaaRT<REFaaRT*(1+0.1));
				assert(TESTaaRT>REFaaRT*(1-0.1));
};
;
cout << "--------- file : arrayoFVh.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "arrayoFVh.edp";
	real TESTarrayoFVh=u[]'*u[];
		cout<<"arrayoFVh reference value = "<<REFarrayoFVh
				<<" test value ="<<TESTarrayoFVh<<endl;
			assert(TESTarrayoFVh<REFarrayoFVh*(1+0.1));
				assert(TESTarrayoFVh>REFarrayoFVh*(1-0.1));
};
;
cout << "--------- file : bilap.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "bilap.edp";
	real TESTbilap=xx(0:n)'*xx(0:n);
		cout<<"bilap reference value = "<<REFbilap
				<<" test value ="<<TESTbilap<<endl;
			assert(TESTbilap<REFbilap*(1+0.1));
				assert(TESTbilap>REFbilap*(1-0.1));
};
;
cout << "--------- file : D2.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "D2.edp";
	real TESTD2=w[]'*w[];
		cout<<"D2 reference value = "<<REFD2
				<<" test value ="<<TESTD2<<endl;
			assert(TESTD2<REFD2+1e-20);
				assert(TESTD2>REFD2-1e-20);
};
;
cout << "--------- file : demo1.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "demo1.edp";
	real TESTdemo1=u[]'*u[];
		cout<<"demo1 reference value = "<<REFdemo1
				<<" test value ="<<TESTdemo1<<endl;
			assert(TESTdemo1<REFdemo1*(1+0.1));
				assert(TESTdemo1>REFdemo1*(1-0.1));
};
;
cout << "--------- file : demo.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "demo.edp";
	real TESTdemo=u[]'*u[];
		cout<<"demo reference value = "<<REFdemo
				<<" test value ="<<TESTdemo<<endl;
			assert(TESTdemo<REFdemo*(1+0.1));
				assert(TESTdemo>REFdemo*(1-0.1));
};
;
cout << "--------- file : funct.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "funct.edp";
	real TESTfunct=myfunction(1.0,3.);
		cout<<"funct reference value = "<<REFfunct
				<<" test value ="<<TESTfunct<<endl;
			assert(TESTfunct<REFfunct*(1+0.1));
				assert(TESTfunct>REFfunct*(1-0.1));
};
;
cout << "--------- file : lapacienprecon.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "lapacienprecon.edp";
	real TESTlapacienprecon=u[]'*u[];
		cout<<"lapacienprecon reference value = "<<REFlapacienprecon
				<<" test value ="<<TESTlapacienprecon<<endl;
			assert(TESTlapacienprecon<REFlapacienprecon*(1+0.1));
				assert(TESTlapacienprecon>REFlapacienprecon*(1-0.1));
};
;
cout << "--------- file : lap_mat.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "lap_mat.edp";
	real TESTlapXmat=u1[]'*u1[];
		cout<<"lap_mat reference value = "<<REFlapXmat
				<<" test value ="<<TESTlapXmat<<endl;
			assert(TESTlapXmat<REFlapXmat*(1+0.1));
				assert(TESTlapXmat>REFlapXmat*(1-0.1));
};
;
cout << "--------- file : NSP1P1b.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "NSP1P1b.edp";
	real TESTNSP1P1b=int2d(Th)(square(u1)+square(u2));
		cout<<"NSP1P1b reference value = "<<REFNSP1P1b
				<<" test value ="<<TESTNSP1P1b<<endl;
			assert(TESTNSP1P1b<REFNSP1P1b*(1+0.2));
				assert(TESTNSP1P1b>REFNSP1P1b*(1-0.2));
};
;
cout << "--------- file : NSP1P1.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "NSP1P1.edp";
	real TESTNSP1P1=int2d(Th)(square(u1)+square(u2));
		cout<<"NSP1P1 reference value = "<<REFNSP1P1
				<<" test value ="<<TESTNSP1P1<<endl;
			assert(TESTNSP1P1<REFNSP1P1*(1+10));
				assert(TESTNSP1P1>REFNSP1P1*(1-10));
};
;
cout << "--------- file : NSP1P2.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "NSP1P2.edp";
	real TESTNSP1P2=int2d(Th)(square(u1)+square(u2));
		cout<<"NSP1P2 reference value = "<<REFNSP1P2
				<<" test value ="<<TESTNSP1P2<<endl;
			assert(TESTNSP1P2<REFNSP1P2*(1+0.2));
				assert(TESTNSP1P2>REFNSP1P2*(1-0.2));
};
;
cout << "--------- file : parareal.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "parareal.edp";
	real TESTparareal=pu'*pu;
		cout<<"parareal reference value = "<<REFparareal
				<<" test value ="<<TESTparareal<<endl;
			assert(TESTparareal<REFparareal*(1+0.1));
				assert(TESTparareal>REFparareal*(1-0.1));
};
;

 cout << "--------- file : Richard.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "Richard.edp";
	real TESTRichard=hmax;
		cout<<"Richard reference value = "<<REFRichard
				<<" test value ="<<TESTRichard<<endl;
			assert(TESTRichard<REFRichard*(1+0.1));
				assert(TESTRichard>REFRichard*(1-0.1));
};
;

cout << "--------- file : teste.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "teste.edp";
	real TESTteste=P.x;
		cout<<"teste reference value = "<<REFteste
				<<" test value ="<<TESTteste<<endl;
			assert(TESTteste<REFteste*(1+0.1));
				assert(TESTteste>REFteste*(1-0.1));
};
;
cout << "--------- file : testFE.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "testFE.edp";
	
};
;
cout << "--------- file : wafer-heating-laser-axi.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "wafer-heating-laser-axi.edp";
	real TESTwaferXheatingXlaserXaxi=xx'*xx;
		cout<<"wafer-heating-laser-axi reference value = "<<REFwaferXheatingXlaserXaxi
				<<" test value ="<<TESTwaferXheatingXlaserXaxi<<endl;
			assert(TESTwaferXheatingXlaserXaxi<REFwaferXheatingXlaserXaxi*(1+0.1));
				assert(TESTwaferXheatingXlaserXaxi>REFwaferXheatingXlaserXaxi*(1-0.1));
};
;
