// Regression tests
// ----------------

// $Id$

// Regression tests
// ----------------

// The tests are checked against reference values by "make check" in
// each examples subdirectory

// "ref.edp" contains all reference values and may be rebuilt with
// "make Ref"

// $Id$

// The values tested here may not have a physical or mathematical
// meaning. Their main property is to gather numerical values from the
// whole domain, to be checked for consistency with previous runs.

NoUseOfWait=true;
int verbosityy=verbosity;




ofstream ref("ref.edp");





// The values tested here may not have a physical or mathematical
// meaning. Their main property is to gather numerical values from the
// whole domain, to be checked for consistency with previous runs.


cout << "--------- file : aadaptation.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "aadaptation.edp";
	real TESTaadaptation=regvalue;
		ref<<"real REFaadaptation="<<TESTaadaptation<<";"<<endl;
};
;
cout << "--------- file : aalapacien.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "aalapacien.edp";
	real TESTaalapacien=1+err;
		ref<<"real REFaalapacien="<<TESTaalapacien<<";"<<endl;
};
;
cout << "--------- file : aalaplace-nc.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "aalaplace-nc.edp";
	real TESTaalaplaceXnc=u[]'*u[];
		ref<<"real REFaalaplaceXnc="<<TESTaalaplaceXnc<<";"<<endl;
};
;
cout << "--------- file : aamove.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "aamove.edp";
	real TESTaamove=u[]'*u[];
		ref<<"real REFaamove="<<TESTaamove<<";"<<endl;
};
;
cout << "--------- file : aaRT.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "aaRT.edp";
	real TESTaaRT=u1[]'*u1[];
		ref<<"real REFaaRT="<<TESTaaRT<<";"<<endl;
};
;
cout << "--------- file : arrayoFVh.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "arrayoFVh.edp";
	real TESTarrayoFVh=u[]'*u[];
		ref<<"real REFarrayoFVh="<<TESTarrayoFVh<<";"<<endl;
};
;
cout << "--------- file : bilap.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "bilap.edp";
	real TESTbilap=xx(0:n)'*xx(0:n);
		ref<<"real REFbilap="<<TESTbilap<<";"<<endl;
};
;
cout << "--------- file : D2.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "D2.edp";
	real TESTD2=w[]'*w[];
		ref<<"real REFD2="<<TESTD2<<";"<<endl;
};
;
cout << "--------- file : demo1.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "demo1.edp";
	real TESTdemo1=u[]'*u[];
		ref<<"real REFdemo1="<<TESTdemo1<<";"<<endl;
};
;
cout << "--------- file : demo.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "demo.edp";
	real TESTdemo=u[]'*u[];
		ref<<"real REFdemo="<<TESTdemo<<";"<<endl;
};
;
cout << "--------- file : funct.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "funct.edp";
	real TESTfunct=myfunction(1.0,3.);
		ref<<"real REFfunct="<<TESTfunct<<";"<<endl;
};
;
cout << "--------- file : lapacienprecon.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "lapacienprecon.edp";
	real TESTlapacienprecon=u[]'*u[];
		ref<<"real REFlapacienprecon="<<TESTlapacienprecon<<";"<<endl;
};
;
cout << "--------- file : lap_mat.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "lap_mat.edp";
	real TESTlapXmat=u1[]'*u1[];
		ref<<"real REFlapXmat="<<TESTlapXmat<<";"<<endl;
};
;
cout << "--------- file : NSP1P1b.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "NSP1P1b.edp";
	real TESTNSP1P1b=int2d(Th)(square(u1)+square(u2));
		ref<<"real REFNSP1P1b="<<TESTNSP1P1b<<";"<<endl;
};
;
cout << "--------- file : NSP1P1.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "NSP1P1.edp";
	real TESTNSP1P1=int2d(Th)(square(u1)+square(u2));
		ref<<"real REFNSP1P1="<<TESTNSP1P1<<";"<<endl;
};
;
cout << "--------- file : NSP1P2.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "NSP1P2.edp";
	real TESTNSP1P2=int2d(Th)(square(u1)+square(u2));
		ref<<"real REFNSP1P2="<<TESTNSP1P2<<";"<<endl;
};
;
cout << "--------- file : parareal.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "parareal.edp";
	real TESTparareal=pu'*pu;
		ref<<"real REFparareal="<<TESTparareal<<";"<<endl;
};
;

 cout << "--------- file : Richard.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "Richard.edp";
	real TESTRichard=hmax;
		ref<<"real REFRichard="<<TESTRichard<<";"<<endl;
};
;

cout << "--------- file : teste.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "teste.edp";
	real TESTteste=P.x;
		ref<<"real REFteste="<<TESTteste<<";"<<endl;
};
;
cout << "--------- file : testFE.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "testFE.edp";
	
};
;
cout << "--------- file : wafer-heating-laser-axi.edp -----------------" << endl;
verbosity=verbosityy;
{
		
	
	include "wafer-heating-laser-axi.edp";
	real TESTwaferXheatingXlaserXaxi=xx'*xx;
		ref<<"real REFwaferXheatingXlaserXaxi="<<TESTwaferXheatingXlaserXaxi<<";"<<endl;
};
;
