load "msh3"
load "tetgen"
load "medit"
// 2 bacis functions to build surface mesh 
/*
  mesh3   SurfaceHex(N,B,L,orient);
    --   build the surface mesh of a 3d box 
    where: for exqmple:
  int[int]  N=[nx,ny,nz]; //  the number of seg in the 3 direction
  real [int,int]  B=[[xmin,xmax],[ymin,ymax],[zmin,zmax]]; // bounding bax  
  int [int,int]  L=[[1,2],[3,4],[5,6]]; // the label of the 6 face left,right, front, back, down, right
  orient the global orientation of the surface 1 extern (-1 intern)


 func mesh3 Sphere(real R,real h,int L,int orient);
   -- build a surfqce mesh of a sphere with 1 mapping (spheriale coordinate) 
  where R is  the raduis, 
        h is the mesh size  of  the shpere
        L is the label the the sphere
        orient the global orientation of the surface 1 extern (-1 intern

*/
func mesh3 SurfaceHex(int[int] & N,real[int,int] &B ,int[int,int] & L,int orientation)
{
//  real volumetet;  // use in tetg.
    //  first  build the 6 faces of the hex.
    real x0=B(0,0),x1=B(0,1);
    real y0=B(1,0),y1=B(1,1);
    real z0=B(2,0),z1=B(2,1);
    
    int nx=N[0],ny=N[1],nz=N[2];
    //  a  volume  of  on tet. 
  //  volumetet= (x1-x0)*(y1-y0)*(z1-z0)/ (nx*ny*ny) /6.;
    
    mesh Thx = square(ny,nz,[y0+(y1-y0)*x,z0+(z1-z0)*y]);
    mesh Thy = square(nx,nz,[x0+(x1-x0)*x,z0+(z1-z0)*y]);
    mesh Thz = square(nx,ny,[x0+(x1-x0)*x,y0+(y1-y0)*y]);
    
    int l1=L(0,0);
         int l2=L(0,1);
         int l3=L(1,0);
         int l4=L(1,1);
         int l5=L(2,0);
         int l6=L(2,1);
    
    
    int[int] refz=[0,l5];  //  bas
    int[int] refZ=[0,l6];   //  haut
    int[int] refy=[0,l3];  //  devant
    int[int] refY=[0,l4];   // derriere
    int[int] refx=[0,l1];  // gauche
    int[int] refX=[0,l2];   // droite 
    
    
    mesh3 Thx0 = movemesh23(Thx,transfo=[x0,x,y],orientation=-orientation,refface=refx);
    mesh3 Thx1 = movemesh23(Thx,transfo=[x1,x,y],orientation=+orientation,refface=refX);
    mesh3 Thy0 = movemesh23(Thy,transfo=[x,y0,y],orientation=+orientation,refface=refy);
    mesh3 Thy1 = movemesh23(Thy,transfo=[x,y1,y],orientation=-orientation,refface=refY);
    mesh3 Thz0 = movemesh23(Thz,transfo=[x,y,z0],orientation=-orientation,refface=refz);
    mesh3 Thz1 = movemesh23(Thz,transfo=[x,y,z1],orientation=+orientation,refface=refZ);
    
    //medit("  --- ", Thx0,Thx1,Thy0,Thy1,Thz0,Thz1);
    mesh3 Th= Thx0+Thx1+Thy0+Thy1+Thz0+Thz1;
        cout << " ******** "<< endl;
    return Th;
}
 
 
 func mesh3 Sphere(real R,real h,int L,int orientation)
  {
    mesh  Th=square(10,20,[x*pi-pi/2,2*y*pi]);  //  $]\frac{-pi}{2},frac{-pi}{2}[\times]0,2\pi[ $
    //  a paratrization of a sphere 
    func f1 =cos(x)*cos(y);
    func f2 =cos(x)*sin(y);
    func f3 = sin(x);
    //  de  partiel derivatrive of the parametrization DF
    func f1x=sin(x)*cos(y);   
    func f1y=-cos(x)*sin(y);
    func f2x=-sin(x)*sin(y);
    func f2y=cos(x)*cos(y);
    func f3x=cos(x);
    func f3y=0;
    // $  M = DF^t DF $
    func m11=f1x^2+f2x^2+f3x^2;
    func m21=f1x*f1y+f2x*f2y+f3x*f3y;
    func m22=f1y^2+f2y^2+f3y^2;
    
    func perio=[[4,y],[2,y],[1,x],[3,x]];  // to store the periodic condition 
     
    real hh=h/R;// hh  taille du maille sur la shere unite. 
    real vv= 1/square(hh);
    verbosity=2;
    Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
    Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
    Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
    Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
    int[int] ref=[0,L];  
   
    mesh3  ThS= movemesh23(Th,transfo=[f1*R,f2*R,f3*R],orientation=orientation,refface=ref);
           cout << " ******** "<< endl;
         return ThS;
  }
  
if(0)
  {   
  real hs = 0.1;  // mesh size on sphere 
  int[int]  N=[20,20,20];
  real [int,int]  B=[[-1,1],[-1,1],[-1,1]];
  int [int,int]  L=[[1,2],[3,4],[5,6]];
  
  ////////////////////////////////
  mesh3 ThH = SurfaceHex(N,B,L,1);
   mesh3 ThS =Sphere(0.5,hs,7,1); // "gluing" surface meshs to tolat boundary meshes
   cout << " xxxx" << ThH.nv << " " << ThS.nv << endl;
   
   mesh3 ThHS=ThH+ThS;
   savemesh(ThHS,"Th.mesh");
   exec("ffmedit Th.mesh");
   
  //medit("Th Hex + shpere", ThHS,wait=1);
  cout << " xxxx" << ThH.nv << " " << ThS.nv << endl;
   real voltet=(hs^3)/6.;
   cout << " voltet = " << voltet << endl;
  // build a mesh of a axis parallel box with TetGen
  
  real[int] domaine = [0,0,0,1,voltet,0,0,0.7,2,voltet];
  
  mesh3 Th = tetg(ThHS,switch="pqaAAYYQ",nbofregions=2,regionlist=domaine);    
  // Tetrahelize the interior of the cube with tetgen
  medit("tetg",Th);
  
  //savemesh(Th,"Th-hex-sph.mesh");
  }