# Configuration script using Automake + Autoconf for FreeFem++
# ------------------------------------------------------------

# Antoine Le Hyaric - LJLL Paris 6 - lehyaric@ann.jussieu.fr - 13/5/04
# $Id$

# Version numbering: x.xx-pp where "pp" is the package version (when
# the same FreeFem++ version is packaged several times). For
# coherency, this should have the same value as the top-most package
# number in debian/changelog.

AC_INIT(FreeFem++,2.4-0,hecht@ann.jussieu.fr,freefem++)
AC_CONFIG_SRCDIR(src/FreeFem++-CoCoa)

# Automake 1.4 is too old
AM_INIT_AUTOMAKE(1.6.3 dist-zip)

AM_CONFIG_HEADER(config.h)
AC_PROG_MAKE_SET

AC_PROG_RANLIB

# To allow anonymous CVS version to contain a "./configure" and
# Makefiles

AM_MAINTAINER_MODE

# Necessary compilers
AC_PROG_CXX

AC_ARG_ENABLE(fortran,[  --disable-fortran	No Fortran compiler available ( ARPACK need it)])
     ff_g2c_lib="";	 
if test "$enable_fortran" != no
then
	AC_PROG_F77
#	AC_F77_LIBRARY_LDFLAGS   modif FH
	AC_ARG_WITH(flib,[  --with-flib= the fortran library ])
	if test "$with_flib" != no -o -n  "$with_flib"
	then 
	  ff_g2c_lib=$with_flib
	fi
fi

AC_ARG_ENABLE(c,[  --disable-c		No C compiler available (C BLAS need it)])
if test "$enable_c" != no
then
	AC_PROG_CC
else

	# We need to define this otherwise ./configure crashes with
	# the message "configure: error: conditional "am__fastdepCC"
	# was never defined".

	am__fastdepCC_TRUE=
	am__fastdepCC_FALSE='#'
fi

AM_PROG_LEX
AC_PROG_YACC
AC_LANG(C++)

# Some useful libraries

AC_CHECK_LIB(pthread,pthread_create)

# Necessary absolute pathname for local directory when some libraries
# are used from several different locations (for instance locally in
# configure.ac and in a subdir).
curdir=`pwd`

# Configure options
# -----------------

echo $ac_configure_args > configure.param
# by default the suffix of the  .so lib file is .so
#      it is .dll   under windows
#      it is .dylib under macos X
ff_suffix_dylib="so";	
# Checking wether we can produce a MacIntosh-specific version
# -----------------------------------------------------------

AC_MSG_CHECKING(wether we are on a MacIntosh)
ff_mac=no
ff_aglprog=
if test `uname` = Darwin;
then
	ff_suffix_dylib="dylib"
	ff_mac=yes
	ff_aglprog=FreeFem++-agl${EXEEXT}
fi
AC_MSG_RESULT($ff_mac)

# Checking wether we can produce a Microsoft Windows-specific version
# -------------------------------------------------------------------

# Sometimes (under cygwin for instance) the default version of FLTK
# does not fit our purpose

AC_ARG_ENABLE(default-fltk,
	[  --disable-default-fltk	Does not use default FLTK])

AC_ARG_ENABLE(cygwindll,
	[  --enable-cygwindll	Forces the use of the Cygwin DLL (not recommended)])

# Default FLTK version under Cygwin does not use threads. So we cannot
# use it.

if test "$enable_cygwindll" = yes
then
	enable_default_fltk=no
fi

AC_MSG_CHECKING(wether we are on Microsoft Windows)
ff_uname=`uname`
#  flag to build window 32   version   ff_mingw = yes 
ff_mingw=no
case $ff_uname in
CYGWIN*)
	ff_suffix_dylib="dll";
        ff_win32=yes;
	# We need Mingw to avoid Cygwin's extra DLLs
	if test "$enable_cygwindll" != yes
	then
                ff_mingw=yes 
                enable_cygwindll=no;
		CXXFLAGS="$CXXFLAGS -mno-cygwin -mwindows -mthreads -I/usr/include/mingw"
		FFLAGS="$FFLAGS -mno-cygwin"
		CFLAGS="$CFLAGS -mno-cygwin -I/usr/include/mingw"
		LIBS="$LIBS -mno-cygwin -mwindows -mthreads -lws2_32"
         	# Resources for FreeFem++-cs in Microsoft Windows format
	        AC_SUBST(WINDRESOBJ,windres.o)
                AC_SUBST(WIN32DLLTARGET,win32-dll-target)
                AC_DEFINE(PURE_WIN32,1,A pure windows applications no cygwin dll)
	fi


	;;
*)ff_win32=no;;
esac
AC_MSG_RESULT($ff_win32)

if test "$ff_win32" = no
then
	enable_cygwindll=no
fi

# FreeFem++-specific version information
# --------------------------------------

# Version numbering, converted to a floating point value
ff_numver="`echo $VERSION|sed 's/-\(.*\)/+\1.0*0.000001/'`"
AC_DEFINE_UNQUOTED(VersionFreeFempp,$ff_numver,FreeFem++ version as a float)

# Since src/fflib/strversionnumber.cpp is recreated at each build, this
# date is only useful for config-version.h

FF_DATE=`date`
AC_DEFINE_UNQUOTED(VersionFreeFemDate,"$FF_DATE",FreeFem++ build date)

# Separate configuration header file for version information, included
# in config-macos9.h

cat << EOF > config-version.h
/* FreeFem++ version information for MacOS 9 configuration */
/* File generated by configure.ac */

/* Define to the full name and version of this package. */
#define PACKAGE_STRING "$PACKAGE_STRING"

/* Define to the one symbol short name of this package. */
#define PACKAGE_TARNAME "$PACKAGE_TARNAME"

/* Define to the version of this package. */
#define PACKAGE_VERSION "$PACKAGE_VERSION"

/* Version number of package */
#define VERSION "$VERSION"

/* FreeFem++ build date */
#define VersionFreeFemDate "$FF_DATE"

/* FreeFem++ version as a float */
#define VersionFreeFempp ($ff_numver)
EOF

# Checking wether to produce a debug version
# ------------------------------------------

# Generic or hardware-dependant optimization
m4_include(acmacros.m4)
m4_include(acoptim.m4)

# ------------------------------
# compilation flags of FreeFem++ 
# ------------------------------
#  -DDRAWING  bamg active some drawing facility in bamg (inquire mesh)
#  -DBAMG_LONG_LONG active the use of  long long in bamg
#  -DDEBUG active the  checking in bamg  
#  -DNCHECKPTR remove check pointer facility 
#  -DCHECK_KN active subscripting of some array  
#  -DWITHCHECK of the dynamic type ckecking of the langague (very slow)
#  -DEIGENVALUE  to compile the eigen value part
#  ------------------------------------------------

# FreeFrem++-specific optimizations -fpascal-strings
if test "$enable_debug" = yes;
then
	CXXFLAGS="$CXXFLAGS -DDRAWING -DBAMG_LONG_LONG -DCHECK_KN"
	if test "$ff_mac" = yes;
	then
		CXXFLAGS="$CXXFLAGS -fno-inline  -fexceptions"
	fi
else
	CXXFLAGS="$CXXFLAGS -DDRAWING -DBAMG_LONG_LONG  -DNCHECKPTR"
	if test "$ff_mac" = yes;
	then
		CXXFLAGS="$CXXFLAGS "
	fi
fi

#whether or not to add a suffix to the package name
#--------------------------------------------------

AC_ARG_WITH(suffix,[  --with-suffix=[G3/G4/G4,P4,..] or --without-suffix (default no suffix to package name)])

AC_MSG_CHECKING(suffix to add to package name)	
ff_suffix=
if test "$with_suffix" = yes -o "$with_suffix" = no -o "$with_suffix" = ""
then
  AC_MSG_RESULT(none)
else
  ff_suffix="-$with_suffix"
  AC_MSG_RESULT($ff_suffix)
fi
AC_SUBST(ADD_PACKAGE_NAME,$ff_suffix)

# Checking wether we can produce a X11 version
# --------------------------------------------

AC_MSG_CHECKING(wether we can compile for X11)
ff_x11=no

# At the moment, we cannot compile for X11 on Mingw because /usr/X11R6
# is part of Cygwin, not Mingw.

if test "$ff_mingw" = no 
then
	if test -d /usr/X11R6
	then
		ff_x11=yes
		ff_x11prog=FreeFem++-x11${EXEEXT}
	fi
fi

AC_MSG_RESULT($ff_x11)

if test "$ff_x11" = yes
then
	CPPFLAGS="$CPPFLAGS -I/usr/X11R6/include"

	# When libXxf86vm is present, it is necessary to add it to define
	# "XF86VidModeQueryVersion" (called by OpenGL) on newer X11 systems

	ff_save_libs="$LIBS"
	LIBS="$LIBS -L/usr/X11R6/lib"
	AC_CHECK_LIB(Xxf86vm,
		XF86VidModeQueryVersion,
		ff_Xxf86vm="-lXxf86vm",
		ff_Xxf86vm="")
	LIBS="$ff_save_libs"

	ff_x11_libs="-L/usr/X11R6/lib $ff_Xxf86vm -lXext -lXpm -lX11 -lm"
	AC_SUBST(X11_LIBS,$ff_x11_libs)
fi

# Checking that OpenGL is accessible
# ----------------------------------

ff_gl_ok=no
ff_glx_ok=no
ff_agl_ok=no

# GL libraries seem to depend on some dlopen capabilities
if test "$enable_static" != yes
then
	# If we cannot find gl.h, no OpenGL version can be produced
	AC_CHECK_HEADERS(GL/gl.h,
		ff_gl_ok=yes
		ff_agl_ok=yes,
		ff_gl_ok=no
		ff_agl_ok=no)
	if test "$ff_gl_ok" = yes
	then
		AC_CHECK_HEADERS(GL/glx.h,
			ff_glx_ok=yes,
			ff_glx_ok=no)
	fi
	if test "$ff_glx_ok" = yes
	then
		AC_CHECK_LIB(GL,
			glBegin,
			ff_glx_ok=yes,
			ff_glx_ok=no)
	fi
	if test "$ff_glx_ok" = yes
	then
		AC_CHECK_LIB(GLU,
			gluSphere,
			ff_glx_ok=yes,
			ff_glx_ok=no,
			-lGL)
	fi
fi

# If we cannot find GL, we cannot compile FreeFem++-agl
if test "$ff_agl_ok" = no
then
	ff_aglprog=
fi

# If we cannot find GLX, we cannot compile FreeFem++ with it
if test "$ff_glx_ok" = yes
then
	ff_glxprog=FreeFem++-glx${EXEEXT}
fi

AC_ARG_WITH(suffix,[  --with-suffix=[G3/G4/G4,P4,..] or --without-suffix (default no suffix package name)])
if test "$with_suffix" = yes
then
  with_suffix=""
elif test "$with_suffix" = no -o -z "$with_suffix" 
then
  with_suffix=""
else
  with_suffix="-$with_suffix"
fi
  AC_MSG_CHECKING(add suffix $with_suffix )	
  AC_SUBST(ADD_PACKAGE_NAME,$with_suffix)
  AC_MSG_RESULT(yes)


# Checking wether we can produce a parallel version
# -------------------------------------------------

# We need to choose between mpich and lam for the Debian package
AC_ARG_WITH(mpi,[  --with-mpi=[mpich/lam/yes/no]	or --without-mpi	Choose MPI implementation (default is mpich)])

# Default is mpich
if test "$with_mpi" = yes
then
	with_mpi=mpich
fi

if test "$with_mpi" != no
then
	AC_MSG_CHECKING(for mpiCC.$with_mpi)
	ff_save_cxx="$CXX"
	CXX=mpiCC.$with_mpi
	AC_LINK_IFELSE(
[#include <stdio.h>
#include <mpi.h>
int main(int argc,char **argv){
  char name[[BUFSIZ]];
  int length;
  
  MPI_Init(&argc, &argv);
  MPI_Get_processor_name(name, &length);
  printf("%s: hello world\n", name);
  MPI_Finalize();
  return 0;
}],
ff_mpi=yes,
ff_mpi=no)
	CXX="$ff_save_cxx"
	AC_MSG_RESULT($ff_mpi)

	# Also check that mpirun is there. If it isn't, then MPI is
	# not fully installed.

	if test "$ff_mpi" = yes;
	then
		AC_CHECK_PROG(ff_mpirun,mpirun,yes,no)
		if test "$ff_mpirun" = no
		then
			ff_mpi=no
		fi
	fi

	if test "$ff_mpi" = yes;
	then

		# We do not AC_DEFINE any special flag for parallel
		# computation here, because it must only be set when the
		# parallel program is compiled (see src/mpi/Makfile.am)

		AC_SUBST(MPIPROG,FreeFem++-mpi${EXEEXT})
	fi
fi

# Looking for useful configuration utilities
# ------------------------------------------

#getting utility software archives through the internet
AC_ARG_ENABLE(generic_blas,[  --enable-generic_blas	Download generic blas (implie --enable-download)])

AC_ARG_ENABLE(download,[  --enable-download	Download missing libraries (BLAS,ARPACK,UMFPACK,FLTK)])

#replacing wget with another command
ff_wget_command=wget
ff_wget=no

AC_ARG_WITH(wget,
	[  --with-wget=command	Replace "wget" with another command. Implies --enable-download],
	   enable_download=yes
	   ff_wget=yes
	   ff_wget_command="${withval}")

if test "$enable_generic_blas" = yes
then
	enable_download=yes
fi

# if enabling downloads find wget or curl to do download 
# ------------------------------------------------------

if test  "$ff_wget" = no -a "$enable_download" = yes
then
	ff_wget=""
	AC_CHECK_PROG(ff_wget,wget,yes,no)
fi
if test  "$ff_wget" = no -a "$enable_download" = yes
then
	ff_wget=""
	AC_CHECK_PROG(ff_wget,curl,yes,no)
	if test "$ff_wget" = "yes" 
	then
	ff_wget_command="curl -O"
	fi
fi

AC_SUBST(WGET,$ff_wget_command)

#  modif FH -----
#  -- looking for cadna  
#  the round-off error propagation 
# the web site http://www-anp.lip6.fr/cadna/
#  --------------------
ff_cadna_ok=no
ff_libs_old="$LIBS"
ff_ldflags_old="$LDFLAGS"
ff_cadna_dir="${curdir}/download/cadna"
  LDFLAGS="$LDFLAGS -L$ff_cadna_dir"
  AC_CHECK_LIB(cadnafree,arit_zero,
                ff_cadna_ok=yes)
  AC_CHECK_HEADERS(${ff_cadna_dir}/cadnafree.h,
       ff_cadna_h=yes, ff_cadna_h=no)

   LIBS="$ff_libs_old"
   LDFLAGS="$ff_ldflags_old"    

   if test "$ff_cadna_ok" = yes  -a "$ff_cadna_h" = yes 
    then
      AC_DEFINE(HAVE_CADNA,1, freecadna is use to evalute the round-off error propagation )
      CPPFLAGS="$CPPFLAGS -I$ff_cadna_dir"
      LIBS=" -L$ff_cadna_dir -lcadnafree $ff_libs_old"
   fi


# Looking for the FFTW3
# --------------------
ff_fftw_ok=no
ff_libs_old="$LIBS"
ff_ldflags_old="$LDFLAGS"
ff_cppflags_old="$CPPFLAGS"
for ff_fftw_dir in "" "${curdir}/download/install";
do
   if test "$ff_fftw_ok" = no
	then
	  if test -n "$ff_fftw_dir"
	  then
           LDFLAGS="$LDFLAGS -L${ff_fftw_dir}/lib"
           CPPFLAGS="$CPPFLAGS -I${ff_fftw_dir}/include"
       	  fi

  AC_CHECK_LIB(fftw3,fftw_execute,
                ff_fftw_ok=yes)
  AC_CHECK_HEADERS(fftw3.h,
             ff_fftw_h=yes, ff_fftw_h=no)

   if test "$ff_fftw_ok" = yes  -a "$ff_fftw_h" = yes 
    then
      AC_DEFINE(HAVE_FFTW,1, fftw is compute fft)
   else
       LIBS="$ff_libs_old"
       LDFLAGS="$ff_ldflags_old"
       CPPFLAGS="$ff_cppflags_old"    
   fi
fi
done
# Looking for the BLAS
# --------------------

# User-specified location

ff_blas_ok=no
AC_ARG_WITH(blas,
	[  --with-blas=library	Use a specific version of the Blas],
	ff_blas_ok=yes
	ff_blas_lib="${withval}")

ff_blas_inc=""

# Specific BLAS library location for FreeBSD
ff_freebsd_blas="-lf2c -lf77blas -latlas -lgslcblas"

# Trying  blas library
for iblas in \
"-lblas" "-framework vecLib" "-L/usr/lib/atlas -lblas" \
$ff_freebsd_blas
do
#   
#"-L${curdir}/download/blas -lcblas -lf77blas" \
#"-L${curdir}/download/blas/ATLAS/lib/ff++ -lcblas -lf77blas -latlas" \ 
#"-L${curdir}/download/blas/WinNT_PPRO256 -lcblas -lf77blas -latlas" \
#
if test "$ff_blas_ok" = no;
then
        AC_MSG_CHECKING(for daxpy_ in $iblas)
        ff_save_libs="$LIBS"
        LIBS="$LIBS $iblas"
        AC_LINK_IFELSE(
                [AC_LANG_CALL(,daxpy_)],
                ff_blas_ok=yes
		ff_blas_lib="$iblas",
                LIBS="$ff_save_libs")
        AC_MSG_RESULT($ff_blas_ok)
fi
done


# If all else fails, download!
if test "$ff_blas_ok" = no -a "$ff_wget" = yes \
   -a "$enable_fortran" != no -a "$enable_c" != no
then
	AC_CHECK_PROG(ff_unzip,unzip,yes,no)

	AC_MSG_CHECKING(for BLAS version to download)

	# Do not update $LIBS, but create an extra LIB variable,
	# because this lib does not exist yet, and this could make the
	# following tests fail.

	# When compiling a generic version, we do not need an
	# optimized version of the BLAS.

	if test "$enable_generic" = yes -o "$enable_generic_blas" = yes 
	then
		ff_download_blas=generic
		ff_blas_lib="-L${curdir}/download/blas -lcblas -lf77blas"
		ff_blas_inc="-I${curdir}/download/blas/CBLAS/src"

		AC_SUBST(GENERIC_BLAS,"libf77blas.a libcblas.a")
		AC_SUBST(GENERIC_BLAS_BUILT_SOURCES,'BLAS CBLAS  $(F77BLAS_SOURCES) $(CBLAS_SOURCES)')
	else
		# There are precompiled versions for Windows. We cannot
		# distinguish the different versions easily so we just
		# download the most generic one. A more specific version can
		# always be downloaded by hand.

		# BUG: at the moment, some necessary symbols are missing from
		# the precompiled version (e.g. _dgemm_).

###	if test "$ff_win32" = yes -a "$enable_generic" = yes -a "$ff_unzip" = yes
		if false
		then
			ff_download_blas=atlas-binary
			ff_blas_lib="-L${curdir}/download/blas/WinNT_PPRO256 -lcblas -llapack -lf77blas -latlas"
			ff_blas_inc="-I${curdir}/download/blas/WinNT_PPRO256"
		else
			ff_download_blas=atlas-source
			ff_blas_lib="-L${curdir}/download/blas/ATLAS/lib/ff++ -lcblas -llapack -lf77blas -latlas"
			ff_blas_inc="-I${curdir}/download/blas/ATLAS/include"
		fi
	fi

	AC_MSG_RESULT($ff_download_blas)
	AC_SUBST(DOWNLOAD_BLAS,$ff_download_blas)
	ff_blas_ok=yes
        ff_cblas_h=yes
fi
AC_MSG_RESULT($ff_blas_inc)
AC_SUBST(BLASLIB,$ff_blas_lib)
AC_SUBST(BLASINC,$ff_blas_inc)
#looking for cblas.h  FH 
if test "$ff_blas_ok" = yes;
then
  AC_CHECK_HEADERS(cblas.h,
       ff_cblas_h=yes,
       ff_cblas_h=no)
  AC_CHECK_HEADERS(vecLib/cblas.h,
       ff_cblas_h=yes
       ff_cblas_h=no)

fi



# Looking for ARPACK
# ------------------

# We need the following g77 libraries to connect to the Fortran 77
# Arpack.

if test "$ff_blas_ok" = yes;
then
       if test  -n "$ff_g2c_lib"
       then
           LIBS="$LIBS $ff_g2c_lib"       
       else 
	  ff_g2c_ok=no
	  AC_CHECK_LIB(g2c,G77_second_0,
		LIBS="$LIBS -lg2c"
		ff_g2c_lib="-lg2c"
		ff_g2c_ok=yes)

	  if test "$ff_g2c_ok" = no;
	     then
	        AC_MSG_CHECKING(for G77_second_0 in /sw/lib/libg2c.a)
		ff_save_libs="$LIBS"
		LIBS="$LIBS -L/sw/lib -lg2c"
		AC_LINK_IFELSE(
			[AC_LANG_CALL(,G77_second_0)],
			ff_g2c_lib="-L/sw/lib -lg2c"
			ff_g2c_ok=yes,
			LIBS="$ff_save_libs")
		AC_MSG_RESULT($ff_g2c_ok)
	  fi
	fi
fi

# Copy the result of g2c investigations into a separate variable
# because BLAS compilation will need it.

AC_SUBST(G2CLIB,$ff_g2c_lib)
#looking of  lapack
# warning $$ because the make eat one 
ff_lapackdir='$$(LAPACKdir)'
if test `uname` = Darwin;
then
ff_lapackdir=
fi
# Arpack itself

ff_arpack_ok=no   
ff_save_libs="$LIBS"
ff_arpack_libs=
if test "$ff_blas_ok" = yes;
then

	# User-specified location
	AC_ARG_WITH(arpack,
		[  --with-arpack=library	Use a specific version of Arpack],
		ff_arpack_ok=yes
		ff_arpack_libs="${withval}")

	# Default locations
	if test "$ff_arpack_ok" = no;
	then
		AC_CHECK_LIB(arpack,dsaupd_,
			ff_arpack_libs="-larpack -llapack"
			ff_arpack_ok=yes,,
			-llapack)
	fi

   # Trying to "locate" Arpack
   if test "$ff_arpack_ok" = no -a "$enable_download" != yes ;
   then
        AC_MSG_CHECKING(for libarpack with locate)
        ff_lib_arpack=`locate libarpack|grep  'libarpack.*.a$'|head -1`
	LIBS="$ff_lib_arpack $LIBS"
        AC_LINK_IFELSE(
                [AC_LANG_CALL(,dsaupd_)],
                ff_arpack_ok=yes
                ff_arpack_libs="$ff_lib_arpack")
        AC_MSG_RESULT($ff_arpack_ok)
    fi

	# If all else fails, download!
	if test "$ff_arpack_ok" = no -a "$ff_wget" = yes \
	   -a "$enable_fortran" != no
	then
		AC_MSG_NOTICE(using downloaded Arpack)
		AC_SUBST(DOWNLOAD_ARPACK,arpack)
		AC_SUBST(FF_LAPACKdir,$ff_lapackdir)
		# Do not update $LIBS, but create an extra LIB variable,
		# because this lib does not exist yet, and this could make the
		# following tests fail.
                ff_arpack_libs="-L${curdir}/download/arpack/ARPACK -larpack_ff++"
		ff_arpack_ok=yes

	fi
fi
if test  "$ff_arpack_ok" != yes 
 then
	    AC_MSG_NOTICE(-- NO ARPACK --  wget: $ff_wget)
fi

# Do not insert ARPACK libs in $LIBS yet, because they may not exist
# yet, and this could make the following tests fail.

LIBS="$ff_save_libs"

if test "$ff_arpack_ok" = yes;
then
        AC_SUBST(ARPACKLIB,$ff_arpack_libs)
	EIGENOBJ='eigenvalue.$(OBJEXT)'
	AC_DEFINE(HAVE_LIBARPACK,1,Arpack is used for eigenvalue computation)

	# Determines whether to run the eigenvalue tests
	AC_SUBST([EIGENTEST],../regtests.sh)
fi
AC_SUBST([EIGENOBJ])

# Looking for UMFPACK
# -------------------

ff_amd_ok=no
ff_umfpack_ok=no
if test "$ff_blas_ok" = yes;
then
        # User-specified location
        AC_ARG_WITH(amd,
                [  --with-amd=library	Use a specific version of AMD],
                ff_amd_ok=yes
		ff_umfpack_lib="${withval}")

        AC_ARG_WITH(umfpack,
                [  --with-umfpack=library	Use a specific version of Umfpack],
                ff_umfpack_ok=yes
                ff_umfpack_lib="${withval} $ff_umfpack_lib"
		AC_DEFINE(HAVE_LIBUMFPACK,1,
			Umfpack is used for sparse matrices computations))

	# Trying default locations

	AC_CHECK_HEADERS(umfpack.h umfpack/umfpack.h,ff_umfpack_header=yes)

	# Somes systems like FreeBSD hide umfpack.h in a directory
	# called UMFPACK (all capitals). This breaks the standard
	# #define produced by autoconf in config.h.in.

	if test "$ff_umfpack_header" != yes;
	then
		AC_CHECK_HEADER(UMFPACK/umfpack.h,
			AC_DEFINE(HAVE_BIG_UMFPACK_UMFPACK_H,1,
				If umfpack.h is located in UMFPACK subdir))
	fi

	if test "$ff_amd_ok" = no;
	then
		AC_CHECK_LIB(amd,amd_info,
			ff_umfpack_lib="-lamd"
			ff_amd_ok=yes)
	fi

	if test "$ff_umfpack_ok" = no -a "$ff_amd_ok" = yes;
	then
		AC_CHECK_LIB(umfpack,umf_i_malloc,
			AC_DEFINE(HAVE_LIBUMFPACK,1,UMFPACK)	
			ff_umfpack_lib="$ff_umfpack_lib -lumfpack"
			ff_umfpack_ok=yes,,$ff_umfpack_lib)
	fi
fi

# If all else fails, download!
if test "$ff_umfpack_ok" = no -a "$ff_wget" = yes 
   then
	AC_MSG_NOTICE(using downloaded UMFPACK)
	AC_SUBST(DOWNLOAD_UMFPACK,umfpack)

	# Do not update $LIBS, but create an extra LIB variable,
	# because this lib does not exist yet, and this could make the
	# following tests fail.

	ff_umfpack_lib="${curdir}/download/umfpack/UMFPACKv4.4/UMFPACK/Lib/libumfpack.a ${curdir}/download/umfpack/UMFPACKv4.4/AMD/Lib/libamd.a"
	AC_DEFINE(HAVE_LIBUMFPACK,1,UMFPACK)
	if test "$ff_win32" = yes; then
  	AC_SUBST(FF_UMFPACK_CONFIG,-DCBLAS)
	fi
	ff_umfpack_ok=yes
fi

if test "$ff_umfpack_ok" = no
then
	 AC_MSG_NOTICE( -- NOT  UMFPACK  ff_wget = $ff_wget)
fi

AC_SUBST(UMFPACKLIB,$ff_umfpack_lib)

# Checking for some functions that may not appear everywhere
# ----------------------------------------------------------

# asinh acosh atanh are not in Mingw yet
AC_CHECK_FUNCS(asinh acosh atanh getenv)

# If times() and sysconf() are not here, UMFPACK should know
if test "$ff_umfpack_ok" = yes
then
	AC_CHECK_FUNCS(times sysconf,
			     ff_umfpack_posix_ok=yes,
			     ff_umfpack_posix_ok=no)
	if test "$ff_umfpack_posix_ok" = no
	then
		AC_SUBST(FF_UMFPACK_CONFIG,"-DCBLAS -DNPOSIX")
	fi
fi

# Enable static linking (no shared libraries)
# -------------------------------------------

AC_ARG_ENABLE(static,
	[  --enable-static	Build binaries with no shared library dependencies])
if test "$enable_static" = yes
then
	AC_CHECK_PROG(ff_libtool,libtool,yes,no)
	if test "$ff_libtool" = yes
	then
		LDFLAGS="$LDFLAGS -all-static"
		AC_SUBST(STATICTOOL,libtool)
	else
		AC_MSG_ERROR(libtool not found)
	fi
fi

# Dynamic loading of compiled functions
# -------------------------------------

# Not if we don't want shared libraries (non FH  modif FH juin 2005)
ff_dynload=no
if test "$enable_static" != yes
then

	# Availability of dlopen(). Use AC_COMPILE rather than
	# AC_CHECK_HEADERS because the latter has problems seeing it (in
	# Cygwin) when it does not compile (in Mingw).

	AC_MSG_CHECKING(for dlfcn.h)
	AC_COMPILE_IFELSE([#include <dlfcn.h>],
		ff_dynload=yes,
		ff_dynload=no)
	AC_MSG_RESULT($ff_dynload)
fi

# Checks that we also have the corresponding library
if test "$ff_dynload" = yes
then
	AC_CHECK_LIB(dl,dlinfo)

	# Checks that everythings works ok
	AC_MSG_CHECKING(whether dlopen links ok)
	AC_LINK_IFELSE(
[#include <dlfcn.h>
int main(int argc,char **argv){
  dlopen("",RTLD_LAZY);
  return 0;
}],
	ff_dynload=yes,
	ff_dynload=no)
	AC_MSG_RESULT($ff_dynload)
fi

#  the -rdynamic don't exist on macos 
if test "$ff_dynload" = yes
then
	AC_DEFINE(HAVE_DLFCN_H,1,Dynamic loading - not mandatory)
	# Activate dynamic loading tests (see examples++-load/Makefile.am)
	AC_SUBST(LOAD_TESTS,../regtests.sh)
	AC_SUBST(LOAD_COMPILE,load_compile)
        AC_SUBST(DYLIB_SUFFIX,$ff_suffix_dylib)

	# gcc on MacOS does not produce an error with "-rdynamic" but
	# still complains about it.
	if test "$ff_mac" = "no" -a "$ff_win32"  = "no" ;
	then
		CHECK_COMPILE_FLAG(C++,-rdynamic,CXXFLAGS)
	fi
fi

# Checking wether we can generate some documentation
# --------------------------------------------------

AC_CHECK_PROG(ff_latex,latex,yes,no)
AC_CHECK_PROG(ff_makeindex,makeindex,yes,no)
AC_CHECK_PROG(ff_dvips,dvips,yes,no)
# to translate the figure 
AC_CHECK_PROG(ff_pdf2ps,pdf2ps,yes,no)
AC_CHECK_PROG(ff_epstopdf,epstopdf,yes,no)
AC_CHECK_PROG(ff_convert,convert,yes,no)
if test "$ff_latex" = yes -a "$ff_makeindex" = yes -a "$ff_dvips" = yes -a $ff_pdf2ps = yes -a $ff_convert = yes;
then
	AC_SUBST(DOCPS,"freefem++doc.ps")

	AC_CHECK_PROG(ff_gzip,gzip,yes,no)
	if test "$ff_gzip" = yes;
	then
		AC_SUBST(DOCPSGZ,"freefem++doc.ps.gz")
	fi
fi

# PDF documentation building sometimes poses problems because of
# pdfsync.sty. So we need to be able to disable it.
enable_pdf=yes
AC_ARG_ENABLE(pdf,[  --disable-pdf	Disable PDF documentation building])
if test "$enable_pdf" = yes 
then
   AC_CHECK_PROG(ff_pdflatex,pdflatex,yes,no)
   if test "$ff_pdflatex" = yes -a $ff_epstopdf = yes -a $ff_convert = yes;
   then
	AC_SUBST(DOCPDF,"freefem++doc.pdf")
   fi
fi

# HISTORY logging through CVS, but only if we are in a CVS working area
if test -d CVS
then
	AC_CHECK_PROG(ff_history,cvs2cl,yes,no)
	if test "$ff_history" = yes
	then
	   AC_SUBST(HISTORY,history)
	fi
fi

# Choosing compilation options for the standard version (in src/std)
# ------------------------------------------------------------------

# The "standard" configured version can use win32 (mingw) or x11

if test "$ff_mingw" = yes 
then
	ff_std_graph_obj=Pcrgraph.$OBJEXT
	ff_std_ldflags=-mwindows
	ff_std_libs=
else
	ff_std_graph_obj=Xrgraph.$OBJEXT
	ff_std_ldflags=
	ff_std_libs=$ff_x11_libs

	# If the standard version already uses x11, we do not need to
	# make the contents of the src/x11 directory.
	ff_x11prog=
fi
AC_SUBST(STD_GRAPH_OBJ,$ff_std_graph_obj)
AC_SUBST(STD_LDFLAGS,$ff_std_ldflags)

AC_SUBST(STD_LIBS,$ff_std_libs)

# Can we produce an IDE?
# ----------------------

# For development purposes, we may need to use X libraries instead of
# native libraries (mainly to run the programs remotely)
AC_ARG_WITH(fltk,[  --without-fltk	(to suppress explicity    --enable-download imply --with-fltk ) ])
AC_ARG_WITH(xfltk,[  --with-xfltk	When recompiling FLTK, use X libraries instead of native Win32 or MacOS])

if test "$with_fltk" = no 
then 
     ff_fltk=no
	AC_MSG_NOTICE(without FLTK)
else
# under mingw use download fltk version
if test "$ff_mingw" = yes 
then
	AC_MSG_NOTICE(under mingw not using default FLTK)
 enable_default_fltk=no 
fi

# Default FLTK (in the machine's default PATH)
if test "$enable_default_fltk" = no
then
	AC_MSG_NOTICE(not using default FLTK)
	ff_fltk=no
else

	# Checks that fltk-config exists
	ff_fltk_config=fltk-config
	AC_CHECK_PROG(ff_fltk,fltk-config,yes,no)

	# Checks that FLTK is compiled with threads enabled
	AC_MSG_CHECKING(that FLTK is compiled with threads)
	AC_COMPILE_IFELSE(
[#include <FL/Fl.H>
main(){
  Fl::lock();
}
],
		ff_fltk_threads=yes,
		ff_fltk_threads=no)
	AC_MSG_RESULT($ff_fltk_threads)
	if test "$ff_fltk_threads" = no
	then
		ff_fltk=no
		AC_MSG_NOTICE(not using default FLTK because it does not know threads)
	fi	
fi

# Downloading and compiling FLTK
if test "$ff_fltk" = no -a "$enable_download" = yes
then
	AC_MSG_NOTICE(using downloaded FLTK)
	AC_SUBST(DOWNLOAD_FLTK,fltk)
	ff_fltk_version=1.1.6
	AC_SUBST(FLTK_VERSION,$ff_fltk_version)
	ff_fltk_config="$curdir/download/fltk/fltk-$ff_fltk_version/install/bin/fltk-config"
	ff_fltk=yes
fi

if test "$ff_fltk" = yes
then
	# For the moment, FreeFem++-ide${EXEEXT} is not built
	# because it first needs FreeFEM++ to accept several
	# successive runs without restart.
        
	ff_ideprog="FreeFem++-ide${EXEEXT} FreeFem++-cs${EXEEXT} FreeFem++-client${EXEEXT} FreeFem++-server${EXEEXT}"
	ff_idetest="./testhighlight.sh"
	if test "$enable_cygwindll" = yes 
	 then
           AC_SUBST(FLTK_CONFIG_PARAM,"--enable-localzlib --enable-cygwin")
        elif test "$ff_mingw" = yes 
	 then
           AC_SUBST(FLTK_CONFIG_PARAM,"--enable-localzlib --disable-cygwin")
	else
           AC_SUBST(FLTK_CONFIG_PARAM,"--disable-cygwin")
	fi

	AC_SUBST(FLTK_CONFIG,$ff_fltk_config)

	# Only links X11 libraries into FreeFem++-cs if we are not on
	# Windows (Mingw) or Macintosh (these do not need X11)

	if test "$ff_mac" != yes -a "$ff_mingw" != yes 
	then
		AC_SUBST(IDE_LIBS,$ff_x11_libs)
	fi

	if test "$with_xfltk" = yes
	then
		AC_SUBST(FLTK_XONLY,"--with-x")
	fi
fi
fi

# Flex compatibility with Bison
# -----------------------------

# If Flex does not know Bison options, it cannot deal with
# src/ide/hl_lex.l++. So we need to make src/ide/hl_lex.c++ up-to-date
# by hand (under Cygwin, "cvs update" does not make hl_lex.c++ newer
# than hl_lex.l++ even if it was when a commit was done).
AC_MSG_CHECKING(flex compatibility with bison)
if test `flex --help|fgrep bison|wc -l` = 0
then
	AC_MSG_RESULT(no)
	touch src/ide/hl_lex.c++
else
	AC_MSG_RESULT(yes)
fi

# Find out kernel and libc versions
# ---------------------------------

if test "$ff_win32" != yes -a "$ff_mac" != yes
then
	AC_MSG_CHECKING(kernel version)
	ff_kernel_version=`cat /proc/version|perl -e '<STDIN>=~/(\d+\.\d+\.\d+)/;print $1;'`
	AC_MSG_RESULT($ff_kernel_version)
	AC_SUBST(KERNEL_VERSION,$ff_kernel_version)

	AC_MSG_CHECKING(libc version)
	ff_libc_version=`ldd /bin/sh | awk '/libc/{print $3}' | xargs readlink | sed -e 's/\.so$//'`
	AC_MSG_RESULT($ff_libc_version)
	AC_SUBST(LIBC_VERSION,$ff_libc_version)
fi
#  def variable pour les makefiles 

# creating all makefiles
# ----------------------

# The final list of executable programs
AC_SUBST(GLXPROG,$ff_glxprog)
AC_SUBST(AGLPROG,$ff_aglprog)
AC_SUBST(X11PROG,$ff_x11prog)
AC_SUBST(IDEPROG,$ff_ideprog)
# The final test program
AC_SUBST(IDE_TESTS,$ff_idetest)


# All makefiles
AC_OUTPUT(Makefile
	download/Makefile
	download/blas/Makefile
	download/arpack/Makefile
	download/umfpack/Makefile
	download/fltk/Makefile
	src/Makefile
	src/bamglib/Makefile
	src/iml/Makefile
	src/Graphics/Makefile
	src/femlib/Makefile
	src/Algo/Makefile
	src/umfpack/Makefile
	src/lglib/Makefile
	src/fflib/Makefile
	src/std/Makefile
	src/x11/Makefile
	src/bin-win32/Makefile
	src/ide/Makefile
	src/nw/Makefile
	src/mpi/Makefile
	src/agl/Makefile
	src/glx/Makefile
	src/bamg/Makefile
	examples++/Makefile
	examples++-eigen/Makefile
	examples++-tutorial/Makefile
	examples++-mpi/Makefile
	examples++-load/Makefile
	examples++-chapt3/Makefile
	examples++-bug/Makefile
	examples++-other/Makefile
	DOC/Makefile)
