Compilation under unix or MacOs 10 or cygwin with g++
-----------------------------------------------------

This file details specific "./configure" options for FreeFem++. For
standard options, please refer to the file named "INSTALL".

To produce FreeFem++ programs containing debugging symbols and no
optimization, use "--enable-debug".

By default, "./configure" looks for the BLAS, ARPACK and UMFPACK
libraries on the local system. If it cannot find them, the compilation
step ("make") downloads the missing ones (from their official
websites) and compiles them. But you can specify a library
file (ending with ".a") instead with the following options:

--with-arpack=library file
--with-amd=library file
--with-umfpack=library file

Here are the different versions of FreeFem++ produced by one
compilation (some versions may be missing if your system does not
support them):

* FreeFem++: standard version (using X11 graphics on Linux and MacOS
  10, Win32 on Windows and CoCoa on MacOS 9) (located in src/std)

* FreeFem++-nw: without graphics (located in src/nw)

* FreeFem++-glx: graphics based on OpenGL (located in src/glx)

* FreeFem++-agl: graphics based on MacOS CoCoa (located in src/agl)

* FreeFem++-mpi: parallel version, without graphics (located in src/mpi)

The compilation procedure (produced with automake) builds all the
libraries and executables sequentially. Running "make" in a
subdirectory does not rebuild dependencies in other directories.

The compilation has been tested under linux and MacOs/Darwin with g++
version 2.95.2, 2.95.3, 3.01 3.1 3.3. It take 15 mn to compile all on
my PowerBook G4 666Mhz 256MB.

Examples
--------

All the Examples are in the two directories examples++ and
examples++-tutorial. The suffix is .edp ("equations aux derivees
partielles" in French)

To test all the examples under unix: 

> cd examples++; ../src/std/FreeFem++ all.edp
> cd examples++-tutorial; ../src/std/FreeFem++ all.edp

To try the  dynamic linking loader example:
> cd example++-load
> ./load.link myfunction 
> g++ -c -I../src/fflib -I../src/femlib -I../src/Graphics myfunction.cpp
> g++ -shared myfunction.o -o myfunction.so
> ../src/nw/FreeFem++-nw load.edp
-- FreeFem++ v1.38 (date Tue Feb 10 12:04:30 CET 2004)
 file : load.edp
 Load: lg_fem  --  no UMFPACK => replace UMFPACK  by LU  
lg_mesh eigenvalue 
 load "./myfunction.so" lood: myfunction 
load: dlopen(./myfunction.so) = 0x84be700

    1 :  mesh Th=square(5,5);
    2 :  fespace Vh(Th,P1);
    3 :  Vh uh=myfunction(); // warning  do not forget () 
    4 :  cout << uh[].min << " " << uh[].max << endl;
    5 : 
    6 : 
    7 :  sizestack + 1024 =1224  ( 200 )
----------CheckPtr:-----init execution ------ NbUndelPtr  996  Alloc: 79131  NbPtr 1011 

   Nb of edges on Mortars  = 0
   Nb of edges on Boundary = 20, neb = 20
 Nb Of Nodes = 36
 Nb of DF = 36
0 0.841471
times: compile 0.01s, execution -2.0837e-19s
----------CheckPtr:-----end execution -- ------ NbUndelPtr  996  Alloc: 79131  NbPtr 1048 
Bien: On a fini Normalement
                CheckPtr:Nb of undelete pointer is 995 last 101
                CheckPtr:Max Memory used     93.672 kbytes  Memory undelete 78619 

Note 1: if this does not work, please check the manual page of dlopen
for your system.

Note 2: on MacOSX, link problems occur because of some incompatibility
between RTTI, templates and the apple c++ version (2.95.2). But this
is now working with the new g++3 compiler (default compiler in MacOs
10.2) and also with g++-3.3.
