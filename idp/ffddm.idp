load "medit"
load "MUMPS_mpi"

include "getARGV.idp"// to process command line options

include "ffddm_parameters.idp"

include "ffddm_partitioning.idp"

include "ffddm_coarsemeshCS.idp"

include "ffddm_geneoCS.idp"

include "ffddm_functions.idp"

include "ffddm_geneoCS_3rdlvl.idp"

func string removespaces(string& str) {
	string res = "";
	for (int i = 0; i < str.size; i++)
	if (str(i:i) != " " && str(i:i) != "\t" && str(i:i) != "\n")
		res = res + str(i:i);
	return res;
}

macro ffddmsetupPrecondinit(pr)
IFMACRO(!pr#setupprecondinit)

IFMACRO(pr#localmacroaug,1)
matrix<pr#prfe#K> pr#CSinterp;
ENDIFMACRO

matrix<pr#prfe#K> pr#AglobEprec;
matrix<pr#prfe#K>[int] pr#aR(pr#prfe#prmesh#npart);       /* local (ras or Robin) matrices (for the preconditioner) */
matrix<pr#prfe#K> pr#aRdEprec;

string pr#prec = "none";

int pr#bCM = 0;

string pr#corr = "none";

matrix<pr#prfe#K> pr#E;
matrix<pr#prfe#K> pr#ZCM,pr#ZCMi,pr#ECM;

int pr#si;

int[int] pr#sizelg(pr#prfe#prmesh#npart), pr#offseti(pr#prfe#prmesh#npart);

int[int] pr#sizelgworld(mpiSize(pr#prfe#prmesh#mpicomm)), pr#offsetiworld(mpiSize(pr#prfe#prmesh#mpicomm));

int pr#ncoarsespace = 0;

pr#prfe#K[int][int] pr#Z(0);

int pr#nbiter = 0;

pr#prfe#K[int][int] pr#RitzValues(0),pr#RitzHarmonicValues(0);

ffddmgeneratePrecondfunctions(pr,pr#prfe)

NewMacro pr#setupprecondinit()1 EndMacro
ENDIFMACRO
// EOM

macro ffddmsetupOperatorinit(pr,preffe)
IFMACRO(!pr#setupoperatorinit)

IFMACRO(pr#bem,1)
NewMacro pr#Tmatrix() HMatrix EndMacro
ENDIFMACRO
IFMACRO(!pr#bem)
NewMacro pr#Tmatrix() matrix EndMacro
ENDIFMACRO

NewMacro pr#localmacroaug preffe#prmesh#buildAug EndMacro

NewMacro pr#prfe()preffe EndMacro

NewMacro pr#fromVhi(ui,VhName,res)
if (preffe#prmesh#isincomm)
{
	string str = Stringification(VhName);
	string svhglob = Stringification(preffe#Vhglob);
	string svhi = Stringification(preffe#Vhi);
	string svhaug = Stringification(preffe#AugVhi);
	string svhcoarse = Stringification(pr#VhCoarse);
	str = removespaces(str);
	svhglob = removespaces(svhglob);
	svhi = removespaces(svhi);
	svhaug = removespaces(svhaug);
	svhcoarse = removespaces(svhcoarse);
		
	if (bseq) {
		assert(ui.n == preffe#Vhglob.ndof);
		if (str == svhglob) {
			res = ui;
		}
		else if (str == svhi) {
			res = ui;	
		}
		else if (str == svhaug) {
			assert(0);
			IFMACRO(pr#localmacroaug,0)
			cout << "you need to use ffddmbuildaug" << endl;
			assert(0);
			ENDIFMACRO
			IFMACRO(pr#localmacroaug,1)
			res = preffe#Auginterp*ui;
			ENDIFMACRO
		}
		else if (str == svhcoarse) {
			IFMACRO(pr#localmacroaug,0)
			cout << "you need to use ffddmbuildaug" << endl;
			assert(0);
			ENDIFMACRO
			IFMACRO(pr#localmacroaug,1)
			res = pr#CSinterp*ui;
			ENDIFMACRO
		}		
		else {
			cout << "***** TODO *****" << endl;
			assert(0);
		}
	}
	else {
		assert(ui.n == preffe#Vhi.ndof);
		if (str == svhi) {
			res = ui;
		}
		else if (str == svhaug) {
			IFMACRO(pr#localmacroaug,0)
			cout << "you need to use ffddmbuildaug" << endl;
			assert(0);
			ENDIFMACRO
			IFMACRO(pr#localmacroaug,1)
			preffe#K[int] tmp = ui .* preffe#Dk[mpiRank(preffe#prmesh#commddm)];
			res = preffe#Auginterp'*tmp;
			preffe#Augupdate(res,false);
			ENDIFMACRO
		}
		else if (str == svhcoarse) {
			IFMACRO(pr#localmacroaug,0)
			cout << "you need to use ffddmbuildaug" << endl;
			assert(0);
			ENDIFMACRO
			IFMACRO(pr#localmacroaug,1)
			preffe#K[int] tmp(res.n);
 			if (!preffe#prmesh#excluded) {
				preffe#K[int] ls = ui .* preffe#Dk[mpiRank(preffe#prmesh#commddm)];
			    tmp = pr#CSinterp*ls;
			}
			else
				tmp = 0;
			res = 0;
			mpiReduce(tmp,res,processor(0,preffe#prmesh#mpicomm),mpiSUM);
			if (mpiRank(preffe#prmesh#mpicomm) < preffe#prmesh#pCS)
		  	broadcast(processor(0,preffe#prmesh#commCS),res);
		  	ENDIFMACRO
		}
		else {
			preffe#K[int] inttmp(VhName.ndof);
			inttmp = 0;
			if (!preffe#prmesh#excluded) {
				IFMACRO(preffe#K,complex)
				matrix Mintr = interpolate(preffe#Vhi,VhName);
				matrix<complex> Mint = Mintr;
				ENDIFMACRO
				IFMACRO(preffe#K,real)
				matrix Mint = interpolate(preffe#Vhi,VhName);
				ENDIFMACRO
				preffe#K[int] inttmp2 = ui .* preffe#Dk[mpiRank(preffe#prmesh#commddm)];
				inttmp = Mint'*inttmp2;
			}
			mpiAllReduce(inttmp,res,preffe#prmesh#mpicomm,mpiSUM);
		}
	}
}
EndMacro

real pr#tdirect = 0, pr#teigenv = 0, pr#tbuildE = 0, pr#ttotal = 0;
real pr#tgmresi, pr#tpreci, pr#tmvi, pr#tfactoi, pr#ttotali;
real pr#tgmres = 0, pr#tprec = 0, pr#tmv = 0, pr#tfacto =0;
real pr#tscalprod = 0;
real pr#tloc = 0, pr#tglob = 0;
real pr#tcsi, pr#tcs = 0;
real pr#ttotalelapsed = mpiWtime();

NewMacro pr#writesummary
if (preffe#prmesh#isincomm)
{
  real[int] timings = [preffe#prmesh#tdecomp,pr#tfacto,pr#tbuildE,pr#tgmres,pr#tmv,pr#tprec,pr#tcs,pr#teigenv];
  real[int] timingsg(timings.n);
  timingsg = 0;
  mpiAllReduce(timings,timingsg,preffe#prmesh#mpicomm,mpiMAX);
  if (mpiRank(preffe#prmesh#mpicomm) == 0) {
    cout << "["+Stringification(pr)+"] timings - decomp and partition : " << timingsg[0] << endl;
    cout << "["+Stringification(pr)+"] timings - assembly and factorization local matrices : " << timingsg[1] << endl;
    cout << "["+Stringification(pr)+"] timings - assembly and factorization coarse problem : " << timingsg[2] << endl;
    cout << "["+Stringification(pr)+"] timings - GMRES : " << timingsg[3] << endl;
    cout << "["+Stringification(pr)+"] timings - MV : " << timingsg[4] << endl;
    cout << "["+Stringification(pr)+"] timings - PREC : " << timingsg[5] << endl;
    cout << "["+Stringification(pr)+"] timings - COARSE SOLVE : " << timingsg[6] << endl;
    /*cout << "timings - scalprod : " << timingsg[7] << endl;*/
    cout << "["+Stringification(pr)+"] timings - total_sum : " << timingsg[3]+timingsg[0]+timingsg[1]+timingsg[2]+timingsg[7] << endl;
    cout << "["+Stringification(pr)+"] timings - total elapsed wall time : " << mpiWtime()-pr#ttotalelapsed << endl;
  }
  pr#tgmres = 0; pr#tmv = 0; pr#tprec = 0; pr#tcs = 0; pr#tscalprod = 0;
}
EndMacro

int pr#verbosity = ffddmverbosity;

int pr#bdirect = ffddmbdirect;

pr#Tmatrix<preffe#K> pr#Aglobal;
matrix<preffe#K>[int] pr#aRd(preffe#prmesh#npart);      /* local Dirichlet matrices for parallel matrix vector product */
matrix<preffe#K> pr#matN;

IFMACRO((pr#withhpddm)|(pr#withpetsc))
if (!bpara){
	if (mpiRank(preffe#prmesh#mpicomm) == 0)
		cout << "["+Stringification(pr)+"] Error: HPDDM/PETSc is to be used only in parallel mode" << endl;
	assert(bpara);
}

int[int][int] pr#intersectionhpddm(1 + preffe#prmesh#numberIntersection);
{
  pr#intersectionhpddm[0].resize(preffe#prmesh#arrayIntersection.n);
  pr#intersectionhpddm[0] = preffe#prmesh#arrayIntersection;
  preffe#K[int] CC;
  int[int] II;
  for (int j=0; j<preffe#prmesh#numberIntersection;j++) {
    [II, pr#intersectionhpddm[1 + j], CC] = preffe#restrictionIntersection[j];
    if (CC[CC.n-1] == 0)
      pr#intersectionhpddm[1 + j].resize(CC.n-1);
  }
}
ENDIFMACRO

IFMACRO(pr#withhpddm)
load "hpddm"
IFMACRO(preffe#K,real)
schwarz<preffe#K> pr#hpddmOP(pr#aRd[mpiRank(preffe#prmesh#commddm)], pr#intersectionhpddm, preffe#Dk[mpiRank(preffe#prmesh#commddm)], scaled = false, communicator = preffe#prmesh#commddm);
ENDIFMACRO
IFMACRO(preffe#K,complex)
real[int] pr#hpddmDk = preffe#Dk[mpiRank(preffe#prmesh#commddm)].re;
schwarz<preffe#K> pr#hpddmOP(pr#aRd[mpiRank(preffe#prmesh#commddm)], pr#intersectionhpddm, pr#hpddmDk, scaled = false, communicator = preffe#prmesh#commddm);
ENDIFMACRO
set(pr#hpddmOP,sparams="-hpddm_"+Stringification(pr)+"_schwarz_method " +ffddmprecond, prefix=Stringification(pr)+"_");
if (preffe#prmesh#inexactCSsplit == 1)
  set(pr#hpddmOP,sparams="-hpddm_"+Stringification(pr)+"_reuse_preconditioner 1", prefix=Stringification(pr)+"_");
ENDIFMACRO

IFMACRO(pr#withpetsc)
IFMACRO(preffe#K,real)
load "PETSc"
Mat<preffe#K> pr#petscOP(pr#aRd[mpiRank(preffe#prmesh#commddm)], pr#intersectionhpddm, preffe#Dk[mpiRank(preffe#prmesh#commddm)], communicator = preffe#prmesh#commddm);
ENDIFMACRO
IFMACRO(preffe#K,complex)
load "PETSc-complex"
real[int] pr#petscDk = preffe#Dk[mpiRank(preffe#prmesh#commddm)].re;
Mat<preffe#K> pr#petscOP(pr#aRd[mpiRank(preffe#prmesh#commddm)], pr#intersectionhpddm, pr#petscDk, scaled = false, communicator = preffe#prmesh#commddm);
ENDIFMACRO
ENDIFMACRO

NewMacro pr#localmacrominoverlap() preffe#prmesh#mminoverlap EndMacro

IFMACRO(pr#localmacrominoverlap,0)
NewMacro pr#prfegeneo() preffe EndMacro
ENDIFMACRO

IFMACRO(pr#localmacrominoverlap,1)
NewMacro pr#prfegeneo() preffe#Aug EndMacro
ENDIFMACRO

ffddmgenerateOperatorfunctions(pr,preffe)

ffddmsetupPrecondinit(pr)

NewMacro pr#setupoperatorinit()1 EndMacro
ENDIFMACRO
// EOM


macro ffddmsetupOperatorBeminit(pr,preffe)
NewMacro pr#bem()1 EndMacro
ffddmsetupOperatorinit(pr,preffe)
// EOM

macro ffddmsetupinit(pr,preffe)
ffddmsetupOperatorinit(pr,preffe)
// EOM

macro ffddmsetupOperator(pr,preffe,Varf)

ffddmsetupOperatorinit(pr,preffe)

if (preffe#prmesh#isincomm)
{	
	preffe#prmesh#tic(pr#tfactoi)

	IFMACRO(pr#bem,1)
	if (!preffe#prmesh#excluded) {
	  Varf(vaglobal,preffe#prmesh#Thglob,preffe#Vhglob)
	  pr#Aglobal = vaglobal(preffe#Vhglob,preffe#Vhglob,commworld=pr#prfe#prmesh#commddm);
	}
	ENDIFMACRO

	IFMACRO(!pr#bem)
  if (pr#bdirect || bseq) {
    Varf(vaglobal,preffe#prmesh#Thglob,preffe#Vhglob)
    pr#Aglobal = vaglobal(preffe#Vhglob,preffe#Vhglob,sym=vsym,tgv=vtgvelim);
  }
  
  preffe#K[int] rhsFull(1), rhs(1);
 
  for(int i = 0;i<preffe#prmesh#npart;++i)
  if ((!preffe#prmesh#excluded) && ((!bpara) || (i == mpiRank(preffe#prmesh#commddm)))) {
  	     
    preffe#prmesh#Thi = preffe#prmesh#aTh[i];
  
	  NewMacro localmacroaug preffe#prmesh#buildAug EndMacro
  	IFMACRO(localmacroaug,1)
  	preffe#prmesh#AugThi = preffe#prmesh#AugaTh[i];
  	ENDIFMACRO
  	IFMACRO(localmacroaug,0)
    preffe#prmesh#meshN preffe#prmesh#AugThi = preffe#prmesh#Thi + preffe#prmesh#aThborder[i]; /* local mesh augmented of one layer to define local Dirichlet matrices without the global matrix*/
    fespace preffe#AugVhi(preffe#prmesh#AugThi, preffe#fPk);
    int[int] n2o = (0:preffe#prmesh#Thi.nt-1);
    int[int] renum = restrict(preffe#Vhi, preffe#AugVhi,n2o);
    int[int] Ic = (0:preffe#Vhi.ndof-1);
    real[int] Kc(preffe#Vhi.ndof);
    Kc = 1;
    matrix preffe#Auginterp = [Ic,renum,Kc];
    preffe#Auginterp.resize(preffe#Vhi.ndof, preffe#AugVhi.ndof);
    ENDIFMACRO
    
    rhsFull.resize(preffe#AugVhi.ndof);
    rhs.resize(preffe#Vhi.ndof);    

    if (bpara)
    {
      if (preffe#prmesh#overlap > 0) {

        Varf(vPb, preffe#prmesh#AugThi, preffe#AugVhi)

        if (preffe#prmesh#inexactCSsplit > 1)
          pr#aRd[i] = vPb(preffe#AugVhi, preffe#AugVhi,sym=vsym,tgv=vtgvelim);
        else
          pr#aRd[i] = vPb(preffe#AugVhi, preffe#AugVhi,sym=vsym,tgv=vtgv);
        renumbering(pr#aRd[i], preffe#Auginterp, rhsFull, rhs, eps=-1);

        IFMACRO(pr#withhpddm)
        changeOperator(pr#hpddmOP,pr#aRd[mpiRank(preffe#prmesh#commddm)]);
        ENDIFMACRO
        IFMACRO(pr#withpetsc)
        IFMACRO(preffe#K,real)
        Mat<preffe#K> mat(pr#aRd[mpiRank(preffe#prmesh#commddm)], pr#intersectionhpddm, preffe#Dk[mpiRank(preffe#prmesh#commddm)], communicator = preffe#prmesh#commddm);
        ENDIFMACRO
        IFMACRO(preffe#K,complex)
        real[int] pr#hpddmDk = preffe#Dk[mpiRank(preffe#prmesh#commddm)].re;
        schwarz<preffe#K> mat(pr#aRd[mpiRank(preffe#prmesh#commddm)], pr#intersectionhpddm, pr#hpddmDk, scaled = false, communicator = preffe#prmesh#commddm);
        ENDIFMACRO
        pr#petscOP = mat;
        ENDIFMACRO
      }
      else {
        Varf(vN,preffe#prmesh#Thi,preffe#Vhi)
        pr#matN = vN(preffe#Vhi,preffe#Vhi,sym=vsym,tgv=vtgv);
      }
    }
    
  }
  if (bseq)
    preffe#prmesh#Thi = preffe#prmesh#Thglob;
  ENDIFMACRO

  preffe#prmesh#toc(pr#tfactoi,"",pr#tfacto)
}
//EOM

macro ffddmsetupOperatorBem(pr,preffe,Varf)
ffddmsetupOperatorBeminit(pr,preffe)
ffddmsetupOperator(pr,preffe,Varf)
//EOM

macro ffddmsetupPrecond(pr,VarfPrec)

pr#prec = ffddmprecond;

if (pr#prfe#prmesh#isincomm)
{	
	pr#prfe#prmesh#tic(pr#tfactoi)
  
  pr#prfe#K[int] rhsFull(1), rhs(1);
 
  for(int i = 0;i<pr#prfe#prmesh#npart;++i)
  if ((!pr#prfe#prmesh#excluded) && ((!bpara) || (i == mpiRank(pr#prfe#prmesh#commddm)))) {
  	     
    if (pr#verbosity > 1 && !bpara) cout << "["+Stringification(pr)+"] Domain :" << i << "/" << pr#prfe#prmesh#npart << endl;

		IFMACRO(!VarfPrec)
		if (bseq) cout << "Error in ffddmsetupPrecond: you need to provide the varf macro for the preconditioner in sequential mode" << endl;
		assert(!bseq);
		pr#aR[i] = pr#aRd[i];
		ENDIFMACRO
		IFMACRO(VarfPrec)
		pr#prfe#prmesh#Thi = pr#prfe#prmesh#aTh[i];

		if (pr#prfe#prmesh#Thi.nt > 0) {
		  NewMacro localmacroaug pr#prfe#prmesh#buildAug EndMacro
		  IFMACRO(localmacroaug,1)
		  pr#prfe#prmesh#AugThi = pr#prfe#prmesh#AugaTh[i];
		  ENDIFMACRO
		  IFMACRO(localmacroaug,0)
		  pr#prfe#prmesh#meshN pr#prfe#prmesh#AugThi = pr#prfe#prmesh#Thi + pr#prfe#prmesh#aThborder[i]; /* local mesh augmented of one layer to define local Dirichlet matrices without the global matrix*/
		  fespace pr#prfe#AugVhi(pr#prfe#prmesh#AugThi, pr#prfe#fPk);
		  int[int] n2o = (0:pr#prfe#prmesh#Thi.nt-1);
		  int[int] renum = restrict(pr#prfe#Vhi, pr#prfe#AugVhi,n2o);
		  int[int] Ic = (0:pr#prfe#Vhi.ndof-1);
		  real[int] Kc(pr#prfe#Vhi.ndof);
		  Kc = 1;
		  matrix pr#prfe#Auginterp = [Ic,renum,Kc];
		  pr#prfe#Auginterp.resize(pr#prfe#Vhi.ndof, pr#prfe#AugVhi.ndof);
		  ENDIFMACRO

		  rhsFull.resize(pr#prfe#AugVhi.ndof);
		  rhs.resize(pr#prfe#Vhi.ndof);

		  if (pr#prec == "oras" || pr#prec == "soras"){
		    IFMACRO(!pr#bem)
		    VarfPrec(RobinInt,pr#prfe#prmesh#Thi,pr#prfe#Vhi)

		    if (pr#prfe#prmesh#inexactCSsplit > 1)
		      pr#aR[i] = RobinInt(pr#prfe#Vhi,pr#prfe#Vhi,sym=vsym,tgv=vtgvelim);
		    else
		      pr#aR[i] = RobinInt(pr#prfe#Vhi,pr#prfe#Vhi,sym=vsym,tgv=vtgv);
		    ENDIFMACRO
		    IFMACRO(pr#bem,1)
		    cout << "TODO" << endl;
		    assert(0);
		    ENDIFMACRO
		  }
		  else if (pr#prec == "ras" || pr#prec == "asm") {
		    IFMACRO(!pr#bem)
		    VarfPrec(vPb, pr#prfe#prmesh#AugThi, pr#prfe#AugVhi)
		    if (pr#prfe#prmesh#inexactCSsplit > 1)
		      pr#aR[i] = vPb(pr#prfe#AugVhi, pr#prfe#AugVhi,sym=vsym,tgv=vtgvelim);
		    else
		      pr#aR[i] = vPb(pr#prfe#AugVhi, pr#prfe#AugVhi,sym=vsym,tgv=vtgv);
		    ENDIFMACRO
		    IFMACRO(pr#bem,1)
		    VarfPrec(vPb, pr#prfe#prmesh#AugThi, pr#prfe#AugVhi)
		    pr#Tmatrix<pr#prfe#K> Hloc = vPb(pr#prfe#AugVhi, pr#prfe#AugVhi,commworld=pr#prfe#prmesh#commself);
		    pr#prfe#K[int,int] mdense(pr#prfe#AugVhi.ndof, pr#prfe#AugVhi.ndof);
		    mdense = Hloc;
		    pr#aR[i] = mdense;
		    ENDIFMACRO

		    renumbering(pr#aR[i], pr#prfe#Auginterp, rhsFull, rhs, eps=-1);
		  }
		  else if (pr#prec != "none")
		    assert(0);
		}
		ENDIFMACRO
		IFMACRO((!pr#withhpddm)&(!pr#withpetsc))
		set(pr#aR[i],solver = sparsesolver,commworld=pr#prfe#prmesh#commself,factorize=3);
		ENDIFMACRO
  }
  if (bseq)
    pr#prfe#prmesh#Thi = pr#prfe#prmesh#Thglob;
		
  pr#prfe#prmesh#toc(pr#tfactoi,"",pr#tfacto)
}
//EOM

macro ffddmsetup(pr,preffe,Varf,VarfPrec)
ffddmsetupOperator(pr,preffe,Varf)
ffddmsetupPrecond(pr,VarfPrec)
// EOM

macro ffddmbuildrhs(pr,Varfrhs,rhs)
if (pr#prfe#prmesh#isincomm)
{
	if (pr#bdirect || bseq)
	{
		{
			Varfrhs(vaglobalrhs,pr#prfe#prmesh#Thglob,pr#prfe#Vhglob)
			rhs.resize(pr#prfe#Vhglob.ndof);
			rhs = vaglobalrhs(0,pr#prfe#Vhglob,tgv=vtgvelim);
		}
	}
	
	if (bpara && !pr#prfe#prmesh#excluded)
	{ 
		
		pr#prfe#prmesh#Thi = pr#prfe#prmesh#aTh[mpiRank(pr#prfe#prmesh#commddm)];
		
		rhs.resize(pr#prfe#Vhi.ndof); 
		
		Varfrhs(vPbrhs, pr#prfe#prmesh#Thi, pr#prfe#Vhi)
		rhs = vPbrhs(0,pr#prfe#Vhi,tgv=vtgvelim);
		
		pr#prfe#update(rhs, pr#prfe#prmesh#overlap > 0);
	}
}
// EOM

macro ffddmset(pr,param,value)
pr#param = value;
// EOM

macro ffddmplot(pr,sol,msg)
pr#mplot(sol,msg)
// EOM
