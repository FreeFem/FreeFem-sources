load "PETSc"
load "hpddm_substructuring"         // HPDDM plugin
load "metis"                        // Metis partitioner
load "scotch"                       // SCOTCH partitioner
include "macro_ddm_substructuring.idp" // additional DDM functions

macro meshN()mesh// EOM             // two-dimensional problem
macro bbN()bb2// EOM                // two-dimensional bounding box
macro intN()int2d// EOM             // two-dimensional integral
macro intN1()int1d// EOM            // one-dimensional integral
macro def(i)i// EOM                 // scalar field definition
macro init(i)i// EOM                // scalar field initialization
macro grad(u)[dx(u), dy(u)]// EOM   // two-dimensional gradient
macro BC(u, val)u = val// EOM       // Dirichlet boundary conditions
func Pk = P1;                       // finite element space

int labNeumann = getARGV("-labNeumann", 2);                     // interface between subdomains
int s = getARGV("-split", 1);                                   // refinement factor
int partitioner = getARGV("-partitioner", 1);                   // partitioner (1: Metis, 2: SCOTCH)

if(verbosity > 0 && mpirank == 0) {
    cout << " --- " << mpirank << "/" << mpisize;
    cout << " - diffusion-2d-substructuring-PETSc.edp - input parameters: refinement factor = " << s << " - with partitioner? = " << partitioner << endl;
}

meshN Th = square(1, 1);
fespace Wh(Th, Pk);                         // local finite element space
int[int] arrayIntersection;                 // ranks of neighboring subdomains
int[int][int] restrictionIntersection(0);   // local-to-neighbors renumbering
int[int] interfaceNb;                       //
{
    int[int] l = [2, 1, 2, 2];
    meshN ThGlobal = square(getARGV("-global", 40), getARGV("-global", 40), label = l);    // global mesh
    buildSubstructuring(Th, interfaceNb, ThGlobal, labNeumann, s, arrayIntersection, restrictionIntersection, Wh, Pk, BC, mpiCommWorld, false)
}

func f = 10;
varf vPb(u, v) = intN(Th)(grad(u)' * grad(v)) + intN(Th)(f * v) + on(1, u = 1.0);
matrix<real> Mat = vPb(Wh, Wh, solver = CG); // local operator
real[int] rhs = vPb(0, Wh);                  // local right-hand side

dbddc A(Mat, arrayIntersection, restrictionIntersection, interfaceNb, communicator = mpiCommWorld);
Wh<real> def(u) = 0.0;    // local solution

int[int] numbering;
globalNumbering(A, numbering);
for(int i = 0; i < u[].n; ++i)
    u[][i] = numbering[i];
originalNumbering(A, u[], interfaceNb);
plotMPI(Th, u[], "Global numbering", Pk, def, real, 3, 1)

u[] = A^-1 * rhs;

originalNumbering(A, u[], interfaceNb);
plotMPI(Th, u[], "Global solution", Pk, def, real, 3, 1)
