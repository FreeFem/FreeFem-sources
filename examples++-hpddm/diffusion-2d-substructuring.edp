//  run with MPI:  ff-mpirun -np 4 script.edp
// NBPROC 4


load "hpddm_substructuring"         // HPDDM plugin
load "metis"                        // Metis partitioner
load "scotch"                       // SCOTCH partitioner
include "macro_ddm_substructuring.idp" // additional DDM functions

macro meshN()mesh// EOM             // two-dimensional problem
macro bbN()bb2// EOM                // two-dimensional bounding box
macro intN()int2d// EOM             // two-dimensional integral
macro intN1()int1d// EOM            // one-dimensional integral
macro def(i)i// EOM                 // scalar field definition
macro init(i)i// EOM                // scalar field initialization
macro grad(u)[dx(u), dy(u)]// EOM   // two-dimensional gradient
macro BC(u, val)u = val// EOM       // Dirichlet boundary conditions
func Pk = P1;                       // finite element space

int labNeumann = getARGV("-labNeumann", 2);                     // interface between subdomains
int s = getARGV("-split", 1);                                   // refinement factor
int partitioner = getARGV("-partitioner", 1);                   // partitioner (1: Metis, 2: SCOTCH)

mpiComm comm;
int p = getARGV("-hpddm_master_p", 1);
bool excluded = splitComm(mpiCommWorld, p, comm, topology = getARGV("-hpddm_master_topology", 0), exclude = (usedARGV("-hpddm_master_exclude") != -1));

if(verbosity > 0 && mpirank == 0) {
    cout << " --- " << mpirank << "/" << mpisize;
    cout << " - diffusion-2d-substructuring.edp - input parameters: refinement factor = " << s << " - with partitioner? = " << partitioner << endl;
}

meshN Th = square(1, 1);
fespace Wh(Th, Pk);                         // local finite element space
int[int] arrayIntersection;                 // ranks of neighboring subdomains
int[int][int] restrictionIntersection(0);   // local-to-neighbors renumbering
int[int] interfaceNb;                       //
{
    int[int] l = [2, 1, 2, 2];
    meshN ThGlobal = square(getARGV("-global", 40), getARGV("-global", 40), label = l);    // global mesh
    buildSubstructuring(Th, interfaceNb, ThGlobal, labNeumann, s, arrayIntersection, restrictionIntersection, Wh, Pk, BC, comm, excluded)
}

func f = 10;
varf vPb(u, v) = intN(Th)(grad(u)' * grad(v)) + intN(Th)(f * v) + on(1, u = 1.0);
matrix<real> Mat = vPb(Wh, Wh, solver = CG); // local operator
real[int] rhs = vPb(0, Wh);                  // local right-hand side

dbdd A(Mat, arrayIntersection, restrictionIntersection, communicator = comm);
// this can be replaced by dfeti
bool adaptive = isSetOption("geneo_nu") || isSetOption("geneo_threshold");

dpair ret;
if(mpisize == 1)
    renumber(A, Mat, interfaceNb, effort = rhs);
else {
    if(excluded)
        attachCoarseOperator(mpiCommWorld, A);
    else {
        Wh[int] def(Rb)(0);
        real[int] float(Wh.ndof);
        varf floatingPb(def(u), def(v)) = on(1, BC(u, 1.0));
        float = floatingPb(0, Wh);
        if(float.max < 0.9 && !adaptive) {
            Rb.resize(1);
            Rb[0][] = 1;
        }
        if(getARGV("-hpddm_substructuring_scaling", 0) != 2)
            renumber(A, Mat, interfaceNb, R = Rb, effort = rhs);
        else {
            Wh def(mu) = 1.0;
            renumber(A, Mat, interfaceNb, R = Rb, effort = rhs, rho = mu[]);
        }
        attachCoarseOperator(mpiCommWorld, A, R = Rb, ret = ret);
    }
}

Wh<real> def(u) = 0.0;    // local solution

if(mpisize == mpiSize(comm))
    u[] = A^-1 * rhs;
else
    DDM(A, u[], rhs, excluded = excluded);

if(!excluded)
    originalNumbering(A, u[], interfaceNb);
plotMPI(Th, u[], "Global solution", Pk, def, real, 3, 1)
