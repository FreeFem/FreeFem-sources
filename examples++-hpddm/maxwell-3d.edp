//  run with MPI:  ff-mpirun -np 4 script.edp
// NBPROC 4

load "hpddm"                        // HPDDM plugin
load "metis"                        // Metis partitioner
load "scotch"                       // SCOTCH partitioner
load "Element_Mixte3d"
include "macro_ddm.idp"
include "cube.idp"

macro meshN()mesh3// EOM                    // three-dimensional problem
macro intN()int3d// EOM                     // three-dimensional integral
macro intN1()int2d// EOM                    // two-dimensional integral
macro def(i)[i, i#y, i#z]// EOM             // vector field definition
macro init(i)[i, i, i]// EOM                // vector field initialization
macro defPart(u)u// EOM                     // partition of unity definition
macro initPart(u)u// EOM                    // partition of unity initialization
macro bbN()bb3// EOM                        // three-dimensional bounding box
macro Curl(ux, uy, uz)[dy(uz)-dz(uy), dz(ux)-dx(uz), dx(uy)-dy(ux)]// EOM
macro CrossN(ux, uy, uz)[uy*N.z-uz*N.y, uz*N.x-ux*N.z, ux*N.y-uy*N.x]// EOM
macro Curlabs(ux, uy, uz)[abs(dy(uz)-dz(uy)), abs(dz(ux)-dx(uz)), abs(dx(uy)-dy(ux))]// EOM
func Pk = Edge03d;
func PkPart = Edge03ds0;

int Dirichlet = 1, Robin = 2;

int overlap = getARGV("-overlap", 2);                           // geometric overlap between subdomains
int fakeInterface = getARGV("-interface", 10);                  // interface between subdomains
int s = getARGV("-split", 1);                                   // refinement factor
int partitioner = getARGV("-partitioner", 1);                   // partitioner (1: Metis, 2: SCOTCH)

if(verbosity > 0 && mpirank == 0) {
    cout << " --- " << mpirank << "/" << mpisize;
    cout << " - maxwell-3d.edp - input parameters: refinement factor = " << s << " - overlap = " << overlap << " - with partitioner? = " << partitioner << endl;
}

int [int,int] LL = [[1,2], [3,4], [5,6]];
real[int, int] BB = [[0,1], [0,1], [0,1]];
int[int] NN = [getARGV("-global", 10), getARGV("-global", 10), getARGV("-global", 10)];
int[int] CC = [1, 1, 1];
meshN ThGlobal = Cube(NN, BB, LL);
func k = 6 * pi;
int[int] chlab = [1, Robin, 2, Robin, 3, Robin, 4, Robin, 5, Robin, 6, Robin];
ThGlobal = change(ThGlobal, refface = chlab);

meshN ThBackup = ThGlobal;
meshN Th = Cube(CC, BB, LL);
fespace Wh(Th, Pk);

meshN ThBorder;
int[int] arrayIntersection;                 // ranks of neighboring subdomains
int[int][int] restrictionIntersection(0);   // local-to-neighbors renumbering
real[int] D;
{
    buildEdge(Th, ThBorder, ThGlobal, 10, s, overlap, D, arrayIntersection, restrictionIntersection, Wh, Pk, mpiCommWorld, 0, PkPart, defPart, initPart)
    ThGlobal = Cube(CC, BB, LL);
}

matrix<complex> Mat;
matrix<complex> Opt;
complex[int] rhs(Wh.ndof);
{
    meshN ThAugmented = Th + ThBorder;
    ThBorder = Cube(CC, BB, LL);
    fespace WhAugmented(ThAugmented, Pk);
    varf vPb([Ex,Ey,Ez],[vx,vy,vz]) =
        intN(ThAugmented)(Curl(vx,vy,vz)'*Curl(Ex,Ey,Ez))
        - intN(ThAugmented)(k^2*[vx,vy,vz]'*[Ex,Ey,Ez])
        - intN1(ThAugmented, Robin)(1i*k*CrossN(vx,vy,vz)'*CrossN(Ex,Ey,Ez))
        + on(Dirichlet, Ex=0, Ey=0, Ez=0);
    Mat = vPb(WhAugmented, WhAugmented, solver=GMRES);
    func f = exp(-((x-0.5)^2+(y-0.5)^2+(z-0.5)^2)*60);
    varf vPbRhs([Ex,Ey,Ez],[vx,vy,vz]) =
        - intN(ThAugmented)([vx,vy,vz]'*[0,0,f])
        + on(Dirichlet, Ex=0,Ey=0,Ez=0);
    if(mpisize > 1) {
        complex[int] rhsFull(WhAugmented.ndof);
        rhsFull = vPbRhs(0, WhAugmented);
        matrix R = interpolate(Wh, WhAugmented);
        R.thresholding(1.0e-10);
        renumbering(Mat, R, rhsFull, rhs);
    }
    else
        rhs = vPbRhs(0, WhAugmented);
}

zschwarz A(Mat, arrayIntersection, restrictionIntersection, scaling = D, communicator = mpiCommWorld);
set(A, sparams = "-hpddm_schwarz_method oras");

complex[int] nEx(Wh.ndof);
nEx = 0.0;

int solver = getOption("schwarz_method");
if(solver == 1 || solver == 2 || solver == 4) { // optimized Schwarz methods
    varf vPbOpt([Ex,Ey,Ez],[vx,vy,vz]) =
        intN(Th)(Curl(vx,vy,vz)'*Curl(Ex,Ey,Ez))
        - intN(Th)(k^2*[vx,vy,vz]'*[Ex,Ey,Ez])
        - intN1(Th, Robin)(1i*k*CrossN(vx,vy,vz)'*CrossN(Ex,Ey,Ez))
        - intN1(Th, fakeInterface)(1i*k*CrossN(vx,vy,vz)'*CrossN(Ex,Ey,Ez))
        + on(Dirichlet, Ex=0, Ey=0, Ez=0);
    Opt = vPbOpt(Wh, Wh);
}
DDM(A, nEx, rhs, O = Opt);
Wh<complex> def(sol);
sol[] = nEx;
medit("Global solution", Th, [real(sol), real(soly), real(solz)]);
