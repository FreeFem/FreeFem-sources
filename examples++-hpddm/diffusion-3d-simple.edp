//  run with MPI:  ff-mpirun -np 4 script.edp
// NBPROC 4

load "hpddm"                        // HPDDM plugin
macro partitioner metis// EOM      // metis, scotch, or parmetis
macro dimension 3// EOM            // 2D or 3D
include "macro_ddm.idp"             // additional DDM functions
include "cube.idp"

macro def(i)i// EOM                         // scalar field definition
macro init(i)i// EOM                        // scalar field initialization
macro grad(u)[dx(u), dy(u), dz(u)]// EOM    // three-dimensional gradient
func Pk = P1;                               // finite element space

int overlap = getARGV("-overlap", 1);                           // geometric overlap between subdomains
int s = getARGV("-split", 1);                                   // refinement factor

int[int, int] LL = [[2,2], [1,1], [1,1]];
real[int, int] BB = [[0,1], [0,1], [0,1]];
int[int] CC = [1, 1, 1];
meshN ThBorder, Th = Cube(CC, BB, LL);
fespace Wh(Th, Pk);                         // local finite element space
int[int] arrayIntersection;                 // ranks of neighboring subdomains
int[int][int] restrictionIntersection(0);   // local-to-neighbors renumbering
real[int] D;                                // partition of unity
{
    meshN ThGlobal = cube(getARGV("-global", 10), getARGV("-global", 10), getARGV("-global", 10) );      // global mesh
    build(Th, ThBorder, ThGlobal, 10, s, overlap, D, arrayIntersection, restrictionIntersection, Wh, Pk, mpiCommWorld, false)
}

real[int] rhs;                              // local right-hand side
matrix<real> Mat;                           // local operator
{                                           // local weak form
    meshN ThAugmented = Th + ThBorder;
    varf vPb(u, v) = intN(ThAugmented)(grad(u)' * grad(v)) + intN(ThAugmented)(v) + on(1, u = 1.0);
    fespace WhAugmented(ThAugmented, Pk);
    Mat = vPb(WhAugmented, WhAugmented, tgv = -1);
    real[int] rhsFull = vPb(0, WhAugmented, tgv = -1);
    matrix R = interpolate(Wh, WhAugmented);
    renumbering(Mat, R, rhsFull, rhs);
}
ThBorder = Cube(CC, BB, LL);

dschwarz A(Mat, arrayIntersection, restrictionIntersection, scaling = D);
set(A, sparams = "-hpddm_schwarz_coarse_correction deflated -hpddm_geneo_nu 10");

int solver = getOption("schwarz_method");
if(mpisize > 1 && isSetOption("schwarz_coarse_correction")) { // two-level Schwarz methods
    varf vPbNoPen(u, v) = intN(Th)(grad(u)' * grad(v)) + on(1, u = 0.0);
    matrix<real> noPen = vPbNoPen(Wh, Wh, solver = CG);
    attachCoarseOperator(mpiCommWorld, A, A = noPen);
}

Wh<real> def(u);    // local solution

u[] = A^-1 * rhs;

real[int] err(u[].n);
err = A * u[];      // global matrix-vector product
err -= rhs;

plotMPI(Th, u[], "Global solution", Pk, def, real, 3, 1)
plotMPI(Th, err, "Global residual", Pk, def, real, 3, 1)
