include "macro_ddm.idp"

macro partitionSubstructuring(meshName, interfaceNb, globalName, PhGlobal, part, s, ndofSkeleton, BC, comm)
        meshName = trunc(globalName, abs(part - mpiRank(comm)) < 0.1, label = 10);
        {
            fespace PhLocal(meshName, P0);
            PhLocal overshoot = hTriangle;
            real max = 2.0 * overshoot[].max;
            bbN(meshName, max, globalName)
        }
        fespace VhGlobal(globalName, P1);
        PhGlobal supp = abs(part - mpiRank(comm)) < 0.1;
        VhGlobal suppSmooth;
        AddLayers(globalName, supp[], 2, suppSmooth[]);
        {
            meshN neighbors = trunc(globalName, suppSmooth > 0.001 && suppSmooth < 0.999);
            fespace Oh(neighbors, P0);
            Oh partOverlap = part;
            Unique(partOverlap[], arrayIntersection);
        }

        VhGlobal[int] partitionIntersection(arrayIntersection.n);
        if(s > 1) {
            globalName = trunc(globalName, suppSmooth > 0.001, split = s, label = 10);
            supp = abs(part - mpiRank(comm)) < 0.1;
            suppSmooth = 0;
            AddLayers(globalName, supp[], 2, suppSmooth[]);
            meshName = trunc(meshName, 1, split = s);
        }
        globalName = trunc(globalName, suppSmooth > 0.501, label = 10);
        VhGlobal phi = 0;
        real eps = intN(globalName)(1.0);
        part = part;
        int numberIntersection = 0;
        for(int i = 0; i < arrayIntersection.n; ++i) {
            PhGlobal suppPartition = abs(arrayIntersection[i] - part) < 0.1;
            AddLayers(globalName, suppPartition[], 1, phi[]);
            real intersection = intN(globalName)(phi) / eps;
            if(intersection > 1.0e-6) {
                partitionIntersection[numberIntersection] = phi;
                arrayIntersection[numberIntersection++] = arrayIntersection[i];
            }
        }
        if(numberIntersection != arrayIntersection.n)
            arrayIntersection.resize(numberIntersection);
        Wh def(interface);
        varf vPbInterface(def(u), def(v)) = on(10, BC(u, 1.0)) + on(1, BC(u, 0.0));
        interface[] = vPbInterface(0, Wh, tgv = 1);
        matrix[int] R(arrayIntersection.n);

        for(int i = 0; i < arrayIntersection.n; ++i) {
            meshN meshIntersection = trunc(globalName, (part == mpiRank(comm) || part == arrayIntersection[i]) && partitionIntersection[i] > 1e-6, label = 10);
            fespace WhIntersection(meshIntersection, Pk);
            R[i] = interpolate(WhIntersection, Wh, inside = 1);
        }
        buildSkeleton(interface[], arrayIntersection, R, ndofSkeleton, interface = interfaceNb, redundancy = getARGV("-redundancy", 1), communicator = comm);// EOM

macro buildSubstructuring(Th, interfaceNb, ThGlobal, labNeumann, s, arrayIntersection, restrictionIntersection, Wh, P, BC, comm, excluded)
{
    real timing = mpiWtime();
    if(mpisize > 1 && !excluded) {
        fespace PhGlobal(ThGlobal, P0);
        PhGlobal part;
        if(mpiRank(comm) == 0) {
            if(verbosity > 0)
                cout.scientific << " --- global mesh of " << ThGlobal.nt << " elements (prior to refinement) generated (in " << mpiWtime() - timing << ") and partitioned with ";
            timing = mpiWtime();
            if(partitioner == 2) {
                scotch(part[], ThGlobal, mpiSize(comm));
                if(verbosity > 0)
                    cout << "SCOTCH";
            }
            else {
                metisdual(part[], ThGlobal, mpiSize(comm));
                if(verbosity > 0)
                    cout << "Metis";
            }
            if(verbosity > 0)
                cout.scientific << " (in " << mpiWtime() - timing << ")" << endl;
        }
        timing = mpiWtime();
        broadcast(processor(0, comm), part[]);
        partitionSubstructuring(Th, interfaceNb, ThGlobal, PhGlobal, part, s, restrictionIntersection, BC, comm)
    }
    else if(mpisize == 1) {
        Th = ThGlobal;
        Wh def(interface);
        varf vPbInterface(def(u), def(v)) = on(labNeumann, BC(u, 1.0)) + on(1, BC(u, 0.0));
        interface[] = vPbInterface(0, Wh, tgv = 1);
        interfaceNb.resize(Wh.ndof);
        int j = 0;
        for(int i = 0; i < Wh.ndof; ++i) {
            if(interface[][i] > 0.9)
                interfaceNb[j++] = i;
        }
        interfaceNb.resize(j);
    }
    mpiBarrier(mpiCommWorld);
    if(verbosity > 0 && mpirank == 0) cout.scientific << " --- partition of unity built (in " << mpiWtime() - timing << ")" << endl;
}// EOM
