include "macro_ddm.idp"

macro partitionSubstructuring(meshName, interfaceNb, globalName, PhGlobal, part, s, ndofSkeleton, BC, comm, fakeInterface, labDirichlet)
        meshName = trunc(globalName, abs(part - mpiRank(comm)) < 0.1, label = fakeInterface);
        {
            fespace PhLocal(meshName, P0);
            PhLocal overshoot = hTriangle;
            real max = 4.0 * overshoot[].max;
            bbN(meshName, max, globalName)
        }
        fespace VhGlobal(globalName, P1);
        PhGlobal supp = abs(part - mpiRank(comm)) < 0.1;
        VhGlobal suppSmooth;
        AddLayers(globalName, supp[], 2, suppSmooth[]);
        {
            meshN neighbors = trunc(globalName, suppSmooth > 0.001);
            fespace Oh(neighbors, P0);
            Oh partOverlap = part;
            Unique(partOverlap[], arrayIntersection, remove = mpiRank(comm));
        }

        VhGlobal[int] partitionIntersection(arrayIntersection.n);
        if(s > 1) {
            globalName = trunc(globalName, suppSmooth > 0.001, split = s, label = fakeInterface);
            supp = abs(part - mpiRank(comm)) < 0.1;
            suppSmooth = 0;
            AddLayers(globalName, supp[], 2, suppSmooth[]);
            meshName = trunc(meshName, 1, split = s);
        }
        globalName = trunc(globalName, suppSmooth > 0.501, label = fakeInterface);
        real eps = intN(globalName)(1.0);
        real[int] epsTab(arrayIntersection.n);
        mpiRequest[int] rq(2 * arrayIntersection.n);
        for(int j = 0; j < arrayIntersection.n; ++j)
            Irecv(processor(arrayIntersection[j], comm, rq[j]), epsTab[j]);
        for(int j = 0; j < arrayIntersection.n; ++j)
            Isend(processor(arrayIntersection[j], comm, rq[arrayIntersection.n + j]), eps);
        VhGlobal phi = 0;
        part = part;
        int numberIntersection = 0;
        for(int k = 0; k < 2 * arrayIntersection.n; ++k)
            mpiWaitAny(rq);
        for(int i = 0; i < arrayIntersection.n; ++i) {
            PhGlobal suppPartition = abs(arrayIntersection[i] - part) < 0.1;
            AddLayers(globalName, suppPartition[], 1, phi[]);
            real intersection = intN(globalName)(phi) / min(eps, epsTab[i]);
            if(intersection > 1.0e-6) {
                partitionIntersection[numberIntersection] = phi;
                arrayIntersection[numberIntersection++] = arrayIntersection[i];
            }
        }
        if(numberIntersection != arrayIntersection.n)
            arrayIntersection.resize(numberIntersection);
        Wh def(interface);
        varf vPbInterface(def(u), def(v)) = on(fakeInterface, BC(u, 1.0)) + on(labDirichlet, BC(u, 0.0));
        interface[] = vPbInterface(0, Wh, tgv = 1);
        matrix[int] R(arrayIntersection.n);

        for(int i = 0; i < arrayIntersection.n; ++i) {
            meshN meshIntersection = trunc(globalName, (part == mpiRank(comm) || part == arrayIntersection[i]) && partitionIntersection[i] > 1e-6, label = fakeInterface);
            fespace WhIntersection(meshIntersection, Pk);
            R[i] = interpolate(WhIntersection, Wh, inside = 1);
        }
        buildSkeleton(interface[], arrayIntersection, R, ndofSkeleton, interface = interfaceNb, redundancy = getARGV("-redundancy", 1), communicator = comm);// EOM

macro buildSubstructuringWithPartitioning(Th, interfaceNb, ThGlobal, userPartitioning, fakeInterface, labDirichlet, labNeumann, s, arrayIntersection, restrictionIntersection, Wh, P, BC, comm, excluded)
{
    real timing = mpiWtime();
    if(mpisize > 1 && !excluded) {
        fespace PhGlobal(ThGlobal, P0);
        PhGlobal partGlobal;
        if(userPartitioning.n != PhGlobal.ndof) {
            if(mpiRank(comm) == 0) {
                if(verbosity > 0)
                    cout.scientific << " --- global mesh of " << ThGlobal.nt << " elements (prior to refinement) partitioned with " << Stringification(partitioner);
                timing = mpiWtime();
                partitionerSeq(partGlobal[], ThGlobal, mpiSize(comm));
            }
            partitionerPar(partGlobal[], ThGlobal, comm, mpiSize(comm));
            if(mpiRank(comm) == 0 && verbosity > 0)
                cout.scientific << " (in " << mpiWtime() - timing << ")" << endl;
            timing = mpiWtime();
        }
        else {
            partGlobal[] = userPartitioning;
            broadcast(processor(0, comm), partGlobal[]);
        }
        partitionSubstructuring(Th, interfaceNb, ThGlobal, PhGlobal, partGlobal, s, restrictionIntersection, BC, comm, fakeInterface, labDirichlet)
    }
    else if(mpisize == 1) {
        Th = ThGlobal;
        Wh def(interface);
        varf vPbInterface(def(u), def(v)) = on(labNeumann, BC(u, 1.0)) + on(labDirichlet, BC(u, 0.0));
        interface[] = vPbInterface(0, Wh, tgv = 1);
        interfaceNb.resize(Wh.ndof);
        int j = 0;
        for(int i = 0; i < Wh.ndof; ++i) {
            if(interface[][i] > 0.9)
                interfaceNb[j++] = i;
        }
        interfaceNb.resize(j);
    }
    mpiBarrier(mpiCommWorld);
    if(verbosity > 0 && mpirank == 0) cout.scientific << " --- partition of unity built (in " << mpiWtime() - timing << ")" << endl;
}// EOM

macro buildSubstructuring(Th, interfaceNb, ThGlobal, fakeInterface, labDirichlet, labNeumann, s, arrayIntersection, restrictionIntersection, Wh, P, BC, comm, excluded)
{
    real[int] emptyArray(0);
    buildSubstructuringWithPartitioning(Th, interfaceNb, ThGlobal, emptyArray, fakeInterface, labDirichlet, labNeumann, s, arrayIntersection, restrictionIntersection, Wh, P, BC, comm, excluded)
}// EOM
