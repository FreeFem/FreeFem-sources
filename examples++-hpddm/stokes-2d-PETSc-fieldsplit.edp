//  run with MPI:  ff-mpirun -np 4 script.edp
// NBPROC 4

load "PETSc"                        // PETSc plugin
macro partitioner()metis// EOM      // metis, scotch, or parmetis
macro dimension()2// EOM            // 2D or 3D
include "macro_ddm.idp"             // additional DDM functions

macro def(i)[i, i#B, i#C]// EOM     // vector field definition
macro init(i)[i, i, i]// EOM        // vector field initialization
macro grad(u)[dx(u), dy(u)]// EOM   // two-dimensional gradient
real Sqrt = sqrt(2.);
macro epsilon(u)[dx(u), dy(u#B), (dy(u) + dx(u#B)) / Sqrt]// EOM
macro div(u)(dx(u) + dy(u#B))// EOM
func Pk = [P2, P2, P1];             // finite element space

int s = getARGV("-split", 1);                                   // refinement factor

if(verbosity > 0 && mpirank == 0) {
    cout << " --- " << mpirank << "/" << mpisize;
    cout << " - stokes-2d-PETSc.edp - input parameters: refinement factor = " << s << endl;
}

meshN Th = square(1, 1);
fespace Wh(Th, Pk);                         // local finite element space
int[int] arrayIntersection;                 // ranks of neighboring subdomains
int[int][int] restrictionIntersection(0);   // local-to-neighbors renumbering
real[int] D;                                // partition of unity
{
    meshN ThBorder, ThGlobal = square(getARGV("-global", 40), getARGV("-global", 40), [x, y]);    // global mesh
    ThGlobal = trunc(ThGlobal, (x < 0.5) || (y < 0.5), label = 5);
    Th = movemesh(ThGlobal, [-x, y]);
    ThGlobal = ThGlobal + Th;
    build(Th, ThBorder, ThGlobal, 10, s, 1, D, arrayIntersection, restrictionIntersection, Wh, Pk, mpiCommWorld, false)
}

varf vPb([u, uB, p], [v, vB, q]) = intN(Th)(grad(u)' * grad(v) + grad(uB)' * grad(vB) - div(u) * q - div(v) * p + 1e-10 * p * q) + on(1, 3, 5, u = 0, uB = 0) + on(2, u = y*(0.5-y), uB = 0);
matrix<real> K = vPb(Wh, Wh, tgv = -1);
real[int] rhs = vPb(0, Wh, tgv = -1);
Wh<real> def(b) = [1.0, 1.0, 2.0];
string[int] names(2);
names[0] = "velocity";
names[1] = "pressure";

dmatrix Mat(K, arrayIntersection, restrictionIntersection, D);
// set(Mat, sparams = "-pc_type lu -ksp_monitor -ksp_view");
// set(Mat, sparams = "-pc_type fieldsplit -pc_fieldsplit_type schur -pc_fieldsplit_detect_saddle_point -fieldsplit_velocity_sub_pc_type lu -fieldsplit_pressure_sub_pc_type lu -ksp_monitor -ksp_view", fields = b[], names = names);
// set(Mat, sparams = "-pc_type fieldsplit -ksp_type fgmres -pc_fieldsplit_type SYMMETRIC_MULTIPLICATIVE -pc_fieldsplit_detect_saddle_point -fieldsplit_velocity_ksp_type preonly -fieldsplit_velocity_pc_type lu -fieldsplit_pressure_ksp_type preonly " + " -fieldsplit_pressure_pc_type lu -fieldsplit_pressure_ksp_monitor -fieldsplit_velocity_ksp_monitor -ksp_monitor -ksp_view", fields = b[], names = names);
set(Mat, sparams = "-pc_type fieldsplit -ksp_type fgmres -pc_fieldsplit_type multiplicative -pc_fieldsplit_detect_saddle_point -fieldsplit_velocity_ksp_type preonly -fieldsplit_velocity_pc_type lu -fieldsplit_pressure_pc_type jacobi " + " -fieldsplit_pressure_ksp_type gmres -ksp_monitor -ksp_view -ksp_rtol 1e-6", fields = b[], names = names); // " + " -fieldsplit_pressure_sub_pc_type lu -fieldsplit_pressure_sub_pc_factor_mat_solver_package mumps 
b[] = 0.0;
b[] = Mat^-1 * rhs;
plotMPI(Th, b[], "Global solution PETSc", Pk, def, real, 3, 1);
