// This codes shows how to solve an eigenvalue problems
// in different coordinate systems. The example here is
// the Laplace equation in spherical coordinates, in the
// [theta,phi] plane. Solutions are the spherical harmonics.
// the [theta,phi] plane is a 2d domain, using SLEPc.
//
// Here, we consider the problem in spherical coordinates
// \theta \in [0,\pi] and \phi \in [0,2\pi], for  a fixed
// radius: -\nabla^2 u = E u
//
//  The eigenspectrum is :
//    E_n = n(n+1)  ;  deg(n) = 2n+1
//
// Usage :
// mpirun -np 4 FreeFem++-mpi -wg laplace-2d-spherical-harmonics-SLEPc.edp \
//        -split 1 -npts 400 -nev 15 -sigma 0.0
//
// Authors: Julien Garaud <julien.garaud@gmail.com>
//          Pierre Jolivet <pierre.jolivet@enseeiht.fr>
//
// WARNING: to properly work, this code would require periodic boundary
//          conditions for the variable phi. Since this is not implemented
//          yet, the eigensolver finds additional modes. Namely, it find
//          the eigenmodes that are periodic and that have integer
//          eigenvalues, but it also find mode that are anti-periodic,
//          and that should be eliminated by the periodicity...

/**************************************/
/*     Load PETSc & SLEPc macros      */
/**************************************/
load "PETSc"                             // PETSc plugin
load "SLEPc"                             // SLEPc plugin
macro partitioner()metis// End Of Macro  // metis, scotch, or parmetis
macro dimension(      )2// End Of Macro  // 2D or 3D
include "macro_ddm.idp"                  // Additional DDM functions
macro def(i)i// EOM
macro init(i)i// EOM

func Pk = P1;                    // Finite-element space

/***************************************/
/*    Options for distributed solver   */
/***************************************/
int s      = getARGV("-split", 1)   ; // Refinement factor
//
int Npts   = getARGV("-npts" , 800) ; // Number of points on the perimeter
//
int nEV    = getARGV("-nev"  ,  5)  ; // Number of eigenvalues
real sigma = getARGV("-sigma", 0.0) ; // Shift
//
real radius = getARGV("-radius",1.0); // Radius of the sphere
/***************************************/
/*     Verbosity and passed options    */
/***************************************/
if(verbosity > 0 && mpirank == 0) {
    cout << "********************************************"  << endl
        << " --- " << mpirank << "/" << mpisize
        << "- laplace-2d-spherical-harmonics-SLEPc.edp "   << endl
        << "********************************************"  << endl
        << "- input parameters: "                          << endl
        << "  refinement factor  = " << s                  << endl
        << "********************************************"  << endl
        << "  nb of pts on perimeter = " << Npts           << endl
        << "********************************************"  << endl
        << "  nb of eigenvalues  = " << nEV                << endl
        << "  value of the shift = " << sigma              << endl
        << "********************************************"  << endl
        << "  Radius of the sphere = " << radius           << endl
        << "********************************************"  << endl
        << endl;
}
/***************************************/
/*   ###############################   */
/***************************************/
meshN Th = square(1, 1);                    // Local mesh
int[int] arrayIntersection;                 // Rank of neighborings subdomains
int[int][int] restrictionIntersection(0);   // Local-to-neighbors renumbering
real[int] D;                                // Partition of unity

/***************************************/
/*         Geometry parameters         */
/***************************************/
int[int] Labels=[1,2,3,4]; // labels : bottom, right, top, left sides

/***************************************/
/*         Finite Element space        */
/***************************************/
// Definition of the finite element space on the domain Th
// P1 are the first order Lagrange elements
fespace Vh(Th, Pk);      // local finite element space
//fespace Vh(Th,Pk,periodic=[[Labels[0],x],[Labels[2],x]]); // Periodic does not work

/***************************************/
/*            ##############           */
/***************************************/
{ // Construction of the rectangular domain
    int Thetapts = int(Npts/6.0); // pts on the x-axis sides
    int Phipts   = int(Npts/3.0); // pts on the y-axis sides

    meshN ThBorder, ThGlobal ;
    ThGlobal = square(Thetapts,Phipts,[x*pi,2.0*pi*y],label=Labels);
    // .....
    build(Th,       // The local mesh
            ThBorder, // The interface mesh
            ThGlobal, // The global mesh
            10,       // Fake interface
            s,        // Refinement factor
            1,        // overlap
            D,        // partition of unity
            arrayIntersection,       // ranks of neighboring subdomains
            restrictionIntersection, // local-to-neighbors renumbering
            Vh,           // The local Finite Element space
            Pk,           // FE-space
            mpiCommWorld, // Communicator
            false         // excluded
         );
}
/***********************************************************************/
/*         Coordinate dependant differential operators                 */
/***********************************************************************/
/*        Spherical coordinates in the (theta,phi)-plane               */
/*                                                                     */
/*                  r     --> not used                                 */
/*                  theta --> x  in [0,pi]                             */
/*                  phi   --> y  in [0,2*pi]                           */
/*                                                                     */
/*           Jacobian determinant on the half-plane                    */
/*              The det(J) = r^2*sin(theta) --> r^2*sin(x)             */
/*                                                                     */
macro Jac()( radius^2*sin(x) )             // End Of Macro /*          */
  ;; /*  The Jacobian                                                  */
/*                                                                     */
/*        The gradiant operator in spherical coordinates               */
/*                                                                     */
/*                d/dr                                                 */
/*       grad =   1/r*d/dtheta              ->  1/radius*d/dx          */
/*                1/(r*sin(theta))*d/dphi   ->                         */
/*                                   1/(radius*sin(x)*d/dy             */
/*                                                                     */
macro Grad(u) [dx(u)/radius,dy(u)/(radius*sin(x))] // End Of Macro /*  */
  ;; /*  The Gradient operator                                         */
macro Lap(u,v) ( Grad(u)'*Grad(v)) //')      // End Of Macro /*        */
  ;; /*  The Laplace operator                                          */
/*                                                                     */
/*                                                                     */
/***********************************************************************/
/***************************************/
/*          Problem parameters         */
/***************************************/

/***************************************/
/*          Problem definition         */
/***************************************/
varf vA(uh,vh)= intN(Th)        //  Definion of  the problem
  (Jac*(Lap(uh,vh)-sigma*uh*vh ))//  Bilinear form
  //  ( 0.5*(dx(uh)*dx(vh)+dy(uh)*dy(vh))
  //+( 0.5*(x^2+y^2)-sigma)*uh*vh)//  Bilinear form
//  +on(Labels[3], uh = 0.0)      //  Boundary Conditions bottom
//  +on(Labels[2], uh = 0.0)      //  Boundary Conditions right
//  +on(Labels[1], uh = 0.0)      //  Boundary Conditions top
//  +on(Labels[0], uh = 0.0)      //  Boundary Conditions left
  ;

varf vB(uh,vh)= intN(Th)  //  Definion of  the problem
  ( Jac*uh*vh )               //  Bilinear form
  ;

matrix<real> A = vA(Vh,Vh);
matrix<real> B = vB(Vh,Vh);
/***************************************/
/*      Build distributed matrices     */
/***************************************/
dmatrix DistA(A, arrayIntersection, restrictionIntersection, D);
dmatrix DistB(DistA, B);
/***************************************/
/*          Problem resolution         */
/***************************************/
real[int]     EigenVAL(0);       // array to store eigenvalues
Vh<real>[int] def(EigenVEC)(1); // array to store eigenvectors
EigenVEC[0][] = 0.0;

string ssparams =            // Parameters for the distributed EigenValue solver
  " -eps_nev " + nEV       + // Number of eigenvalues
  " -eps_type krylovschur" +
  " -eps_target "+ sigma   + // Shift value
  " -st_type sinvert "     +
  " -st_pc_type lu "       +
  " -st_pc_factor_mat_solver_package mumps" +
  " -eps_view"             +
  " -eps_gen_hermitian"      // The problem is symmetric
  ;

int k = deigensolver
(DistA,              // matrix OP = A âˆ’ sigma*B
 DistB,              //
 vectors = EigenVEC, // Array to store the FEM-EigenFunctions
 values  = EigenVAL, // Array to store the EigenValues
 sparams = ssparams  // Parameters for the distributed EigenValue solver
);

k=min(k,nEV); // some time the number of converged eigen value
              // can be greater than nev;
/***************************************/
/*           View the solution         */
/***************************************/
Vh<real> Temp;

for(int i=0;i<k;i++){
    if(!mpirank) cout << " Eigenvalue #"+i+" = "+EigenVAL[i]<<endl;
    Temp = EigenVEC[i];
    plotMPI(Th,     // The local mesh
            Temp[], // The local solution
            "Psi("+i+")  EV = "+EigenVAL[i], // Comment
            Pk,     // Local FE-space
            def,    // Macro for field definition
            real,   // Type
            2,      // 2d/3d view
            1       // Wait
           )
}
