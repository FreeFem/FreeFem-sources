//  run with MPI:  ff-mpirun -np 4 script.edp
// NBPROC 4

load "hpddm"                        // HPDDM plugin
macro partitioner()metis// EOM      // metis, scotch, or parmetis
macro dimension()3// EOM            // 2D or 3D
include "macro_ddm.idp"             // additional DDM functions
include "cube.idp"

macro def(i)[i, i#B, i#C]// EOM     // vector field definition
macro init(i)[i, i, i]// EOM        // vector field initialization
real Sqrt = sqrt(2.0);
macro epsilon(u)[dx(u), dy(u#B), dz(u#C), (dz(u#B) + dy(u#C)) / Sqrt, (dz(u) + dx(u#C)) / Sqrt, (dy(u) + dx(u#B)) / Sqrt]// EOM
macro div(u)(dx(u) + dy(u#B) + dz(u#C))// EOM
func Pk = [P1, P1, P1];             // finite element space

int overlap = getARGV("-overlap", 2);                           // geometric overlap between subdomains
int s = getARGV("-split", 1);                                   // refinement factor

int[int, int] LL = [[1,3], [2,2], [2,2]];
real[int, int] BB = [[0,6], [0,1], [0,1]];
int[int] CC = [1, 1, 1];
meshN ThBorder, Th = Cube(CC, BB, LL);
fespace Wh(Th, Pk);                         // local finite element space
int[int] arrayIntersection;                 // ranks of neighboring subdomains
int[int][int] restrictionIntersection(0);   // local-to-neighbors renumbering
real[int] D;                                // partition of unity
{
    meshN ThGlobal = cube(6 * getARGV("-global", 5), getARGV("-global", 5), getARGV("-global", 5), [6 * x, y, z]);
    build(Th, ThBorder, ThGlobal, 10, s, overlap, D, arrayIntersection, restrictionIntersection, Wh, Pk, mpiCommWorld , false)
}

real f = -9000.0;
real strain = 100.0;
real Young = 2.0e11;
real poisson = 0.35;
real tmp = 1.0 + poisson;
real mu = Young  / (2.0 * tmp);
real lambda = Young * poisson / (tmp * (1.0 - 2.0 * poisson));
int dirichlet = 4;
real[int] rhs;                              // local right-hand side
matrix<real> Mat;                           // local operator
{                                           // local weak form
    meshN ThAugmented = Th + ThBorder;
    varf vPb(def(u), def(v)) = intN(ThAugmented)(lambda * div(u) * div(v) + 2.0 * mu * (epsilon(u)' * epsilon(v))) + intN(ThAugmented)(f * vC) + on(dirichlet, u = 0.0, uB = 0.0, uC = 0.0);
    fespace WhAugmented(ThAugmented, Pk);
    Mat = vPb(WhAugmented, WhAugmented, tgv = -1);
    real[int] rhsFull = vPb(0, WhAugmented, tgv = -1);
    matrix R = interpolate(Wh, WhAugmented);
    renumbering(Mat, R, rhsFull, rhs);
}
ThBorder = Cube(CC, BB, LL);

dschwarz A(Mat, arrayIntersection, restrictionIntersection, scaling = D);
set(A, sparams = "-hpddm_schwarz_coarse_correction balanced -hpddm_geneo_nu 6");

int solver = getOption("schwarz_method");
if(mpisize > 1 && isSetOption("schwarz_coarse_correction")) { // two-level Schwarz methods
    varf vPbNoPen(def(u), def(v)) = intN(Th)(lambda * div(u) * div(v) + 2.0 * mu * (epsilon(u)' * epsilon(v))) + on(dirichlet, u = 0.0, uB = 0.0, uC = 0.0);
    matrix<real> noPen = vPbNoPen(Wh, Wh, solver = CG);
    attachCoarseOperator(mpiCommWorld, A, A = noPen);
}

Wh<real> def(u);    // local solution

u[] = A^-1 * rhs;

real[int] err(u[].n);
err = A * u[];      // global matrix-vector product
err -= rhs;

plotMPI(Th, u[], "Global solution", Pk, def, real, 3, 1)
plotMPI(Th, err, "Global residual", Pk, def, real, 3, 1)
real alpha = 1200.0;
meshN ThMoved = movemesh3(Th, transfo = [x + alpha * u, y + alpha * uB, z + alpha * uC]);
u[] = mpirank;
plotMPI(ThMoved, u[], "Global moved solution", Pk, def, real, 3, 1)
