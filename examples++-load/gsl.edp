load "gsl"
cout << "gsl_sf_airy_zero_Ai(1) =  " << gslsfairyzeroAi(1)  << endl; 
cout << "gsl_sf_airy_zero_Bi(1) =  " << gslsfairyzeroBi(1)  << endl; 
cout << "gsl_sf_airy_zero_Ai_deriv(1) =  " << gslsfairyzeroAideriv(1)  << endl; 
cout << "gsl_sf_airy_zero_Bi_deriv(1) =  " << gslsfairyzeroBideriv(1)  << endl; 
cout << "gsl_sf_bessel_J0(0.55) =  " << gslsfbesselJ0(0.55)  << endl; 
cout << "gsl_sf_bessel_J1(0.55) =  " << gslsfbesselJ1(0.55)  << endl; 
cout << "gsl_sf_bessel_Y0(0.55) =  " << gslsfbesselY0(0.55)  << endl; 
cout << "gsl_sf_bessel_Y1(0.55) =  " << gslsfbesselY1(0.55)  << endl; 
cout << "gsl_sf_bessel_I0(0.55) =  " << gslsfbesselI0(0.55)  << endl; 
cout << "gsl_sf_bessel_I1(0.55) =  " << gslsfbesselI1(0.55)  << endl; 
cout << "gsl_sf_bessel_I0_scaled(0.55) =  " << gslsfbesselI0scaled(0.55)  << endl; 
cout << "gsl_sf_bessel_I1_scaled(0.55) =  " << gslsfbesselI1scaled(0.55)  << endl; 
cout << "gsl_sf_bessel_K0(0.55) =  " << gslsfbesselK0(0.55)  << endl; 
cout << "gsl_sf_bessel_K1(0.55) =  " << gslsfbesselK1(0.55)  << endl; 
cout << "gsl_sf_bessel_K0_scaled(0.55) =  " << gslsfbesselK0scaled(0.55)  << endl; 
cout << "gsl_sf_bessel_K1_scaled(0.55) =  " << gslsfbesselK1scaled(0.55)  << endl; 
cout << "gsl_sf_bessel_j0(0.55) =  " << gslsfbesselj0(0.55)  << endl; 
cout << "gsl_sf_bessel_j1(0.55) =  " << gslsfbesselj1(0.55)  << endl; 
cout << "gsl_sf_bessel_j2(0.55) =  " << gslsfbesselj2(0.55)  << endl; 
cout << "gsl_sf_bessel_y0(0.55) =  " << gslsfbessely0(0.55)  << endl; 
cout << "gsl_sf_bessel_y1(0.55) =  " << gslsfbessely1(0.55)  << endl; 
cout << "gsl_sf_bessel_y2(0.55) =  " << gslsfbessely2(0.55)  << endl; 
cout << "gsl_sf_bessel_i0_scaled(0.55) =  " << gslsfbesseli0scaled(0.55)  << endl; 
cout << "gsl_sf_bessel_i1_scaled(0.55) =  " << gslsfbesseli1scaled(0.55)  << endl; 
cout << "gsl_sf_bessel_i2_scaled(0.55) =  " << gslsfbesseli2scaled(0.55)  << endl; 
cout << "gsl_sf_bessel_k0_scaled(0.55) =  " << gslsfbesselk0scaled(0.55)  << endl; 
cout << "gsl_sf_bessel_k1_scaled(0.55) =  " << gslsfbesselk1scaled(0.55)  << endl; 
cout << "gsl_sf_bessel_k2_scaled(0.55) =  " << gslsfbesselk2scaled(0.55)  << endl; 
cout << "gsl_sf_bessel_zero_J0(1) =  " << gslsfbesselzeroJ0(1)  << endl; 
cout << "gsl_sf_bessel_zero_J1(1) =  " << gslsfbesselzeroJ1(1)  << endl; 
cout << "gsl_sf_clausen(0.55) =  " << gslsfclausen(0.55)  << endl; 
cout << "gsl_sf_dawson(0.55) =  " << gslsfdawson(0.55)  << endl; 
cout << "gsl_sf_debye_1(0.55) =  " << gslsfdebye1(0.55)  << endl; 
cout << "gsl_sf_debye_2(0.55) =  " << gslsfdebye2(0.55)  << endl; 
cout << "gsl_sf_debye_3(0.55) =  " << gslsfdebye3(0.55)  << endl; 
cout << "gsl_sf_debye_4(0.55) =  " << gslsfdebye4(0.55)  << endl; 
cout << "gsl_sf_debye_5(0.55) =  " << gslsfdebye5(0.55)  << endl; 
cout << "gsl_sf_debye_6(0.55) =  " << gslsfdebye6(0.55)  << endl; 
cout << "gsl_sf_dilog(0.55) =  " << gslsfdilog(0.55)  << endl; 
cout << "gsl_sf_erfc(0.55) =  " << gslsferfc(0.55)  << endl; 
cout << "gsl_sf_log_erfc(0.55) =  " << gslsflogerfc(0.55)  << endl; 
cout << "gsl_sf_erf(0.55) =  " << gslsferf(0.55)  << endl; 
cout << "gsl_sf_erf_Z(0.55) =  " << gslsferfZ(0.55)  << endl; 
cout << "gsl_sf_erf_Q(0.55) =  " << gslsferfQ(0.55)  << endl; 
cout << "gsl_sf_hazard(0.55) =  " << gslsfhazard(0.55)  << endl; 
cout << "gsl_sf_exp(0.55) =  " << gslsfexp(0.55)  << endl; 
cout << "gsl_sf_expm1(0.55) =  " << gslsfexpm1(0.55)  << endl; 
cout << "gsl_sf_exprel(0.55) =  " << gslsfexprel(0.55)  << endl; 
cout << "gsl_sf_exprel_2(0.55) =  " << gslsfexprel2(0.55)  << endl; 
cout << "gsl_sf_expint_E1(0.55) =  " << gslsfexpintE1(0.55)  << endl; 
cout << "gsl_sf_expint_E2(0.55) =  " << gslsfexpintE2(0.55)  << endl; 
cout << "gsl_sf_expint_E1_scaled(0.55) =  " << gslsfexpintE1scaled(0.55)  << endl; 
cout << "gsl_sf_expint_E2_scaled(0.55) =  " << gslsfexpintE2scaled(0.55)  << endl; 
cout << "gsl_sf_expint_Ei(0.55) =  " << gslsfexpintEi(0.55)  << endl; 
cout << "gsl_sf_expint_Ei_scaled(0.55) =  " << gslsfexpintEiscaled(0.55)  << endl; 
cout << "gsl_sf_Shi(0.55) =  " << gslsfShi(0.55)  << endl; 
cout << "gsl_sf_Chi(0.55) =  " << gslsfChi(0.55)  << endl; 
cout << "gsl_sf_expint_3(0.55) =  " << gslsfexpint3(0.55)  << endl; 
cout << "gsl_sf_Si(0.55) =  " << gslsfSi(0.55)  << endl; 
cout << "gsl_sf_Ci(0.55) =  " << gslsfCi(0.55)  << endl; 
cout << "gsl_sf_atanint(0.55) =  " << gslsfatanint(0.55)  << endl; 
cout << "gsl_sf_fermi_dirac_m1(0.55) =  " << gslsffermidiracm1(0.55)  << endl; 
cout << "gsl_sf_fermi_dirac_0(0.55) =  " << gslsffermidirac0(0.55)  << endl; 
cout << "gsl_sf_fermi_dirac_1(0.55) =  " << gslsffermidirac1(0.55)  << endl; 
cout << "gsl_sf_fermi_dirac_2(0.55) =  " << gslsffermidirac2(0.55)  << endl; 
cout << "gsl_sf_fermi_dirac_mhalf(0.55) =  " << gslsffermidiracmhalf(0.55)  << endl; 
cout << "gsl_sf_fermi_dirac_half(0.55) =  " << gslsffermidirachalf(0.55)  << endl; 
cout << "gsl_sf_fermi_dirac_3half(0.55) =  " << gslsffermidirac3half(0.55)  << endl; 
cout << "gsl_sf_lngamma(0.55) =  " << gslsflngamma(0.55)  << endl; 
cout << "gsl_sf_gamma(0.55) =  " << gslsfgamma(0.55)  << endl; 
cout << "gsl_sf_gammastar(0.55) =  " << gslsfgammastar(0.55)  << endl; 
cout << "gsl_sf_gammainv(0.55) =  " << gslsfgammainv(0.55)  << endl; 
cout << "gsl_sf_fact(1) =  " << gslsffact(1)  << endl; 
cout << "gsl_sf_doublefact(1) =  " << gslsfdoublefact(1)  << endl; 
cout << "gsl_sf_lnfact(1) =  " << gslsflnfact(1)  << endl; 
cout << "gsl_sf_lndoublefact(1) =  " << gslsflndoublefact(1)  << endl; 
cout << "gsl_sf_lambert_W0(0.55) =  " << gslsflambertW0(0.55)  << endl; 
cout << "gsl_sf_lambert_Wm1(0.55) =  " << gslsflambertWm1(0.55)  << endl; 
cout << "gsl_sf_legendre_P1(0.55) =  " << gslsflegendreP1(0.55)  << endl; 
cout << "gsl_sf_legendre_P2(0.55) =  " << gslsflegendreP2(0.55)  << endl; 
cout << "gsl_sf_legendre_P3(0.55) =  " << gslsflegendreP3(0.55)  << endl; 
cout << "gsl_sf_legendre_Q0(0.55) =  " << gslsflegendreQ0(0.55)  << endl; 
cout << "gsl_sf_legendre_Q1(0.55) =  " << gslsflegendreQ1(0.55)  << endl; 
cout << "gsl_sf_log(0.55) =  " << gslsflog(0.55)  << endl; 
cout << "gsl_sf_log_abs(0.55) =  " << gslsflogabs(0.55)  << endl; 
cout << "gsl_sf_log_1plusx(0.55) =  " << gslsflog1plusx(0.55)  << endl; 
cout << "gsl_sf_log_1plusx_mx(0.55) =  " << gslsflog1plusxmx(0.55)  << endl; 
cout << "gsl_sf_psi_int(1) =  " << gslsfpsiint(1)  << endl; 
cout << "gsl_sf_psi(0.55) =  " << gslsfpsi(0.55)  << endl; 
cout << "gsl_sf_psi_1piy(0.55) =  " << gslsfpsi1piy(0.55)  << endl; 
cout << "gsl_sf_psi_1_int(1) =  " << gslsfpsi1int(1)  << endl; 
cout << "gsl_sf_psi_1(0.55) =  " << gslsfpsi1(0.55)  << endl; 
cout << "gsl_sf_synchrotron_1(0.55) =  " << gslsfsynchrotron1(0.55)  << endl; 
cout << "gsl_sf_synchrotron_2(0.55) =  " << gslsfsynchrotron2(0.55)  << endl; 
cout << "gsl_sf_transport_2(0.55) =  " << gslsftransport2(0.55)  << endl; 
cout << "gsl_sf_transport_3(0.55) =  " << gslsftransport3(0.55)  << endl; 
cout << "gsl_sf_transport_4(0.55) =  " << gslsftransport4(0.55)  << endl; 
cout << "gsl_sf_transport_5(0.55) =  " << gslsftransport5(0.55)  << endl; 
cout << "gsl_sf_sin(0.55) =  " << gslsfsin(0.55)  << endl; 
cout << "gsl_sf_cos(0.55) =  " << gslsfcos(0.55)  << endl; 
cout << "gsl_sf_sinc(0.55) =  " << gslsfsinc(0.55)  << endl; 
cout << "gsl_sf_lnsinh(0.55) =  " << gslsflnsinh(0.55)  << endl; 
cout << "gsl_sf_lncosh(0.55) =  " << gslsflncosh(0.55)  << endl; 
cout << "gsl_sf_angle_restrict_symm(0.55) =  " << gslsfanglerestrictsymm(0.55)  << endl; 
cout << "gsl_sf_angle_restrict_pos(0.55) =  " << gslsfanglerestrictpos(0.55)  << endl; 
cout << "gsl_sf_zeta_int(2) =  " << gslsfzetaint(2)  << endl; 
cout << "gsl_sf_zeta(0.55) =  " << gslsfzeta(0.55)  << endl; 
cout << "gsl_sf_zetam1(0.55) =  " << gslsfzetam1(0.55)  << endl; 
cout << "gsl_sf_zetam1_int(2) =  " << gslsfzetam1int(2)  << endl; 
cout << "gsl_sf_eta_int(1) =  " << gslsfetaint(1)  << endl; 
cout << "gsl_sf_eta(0.55) =  " << gslsfeta(0.55)  << endl; 

// FFCS - avoid using P2 and P3 which already define something very precise
real [int] p2=[ 2,-3,1];
real [int] p3=[ 8,-10,1,1];
real [int] X(3);
complex[int] Z(4);
real [int] Q4=[ -1,0,0,0,1];
gslpolysolvequadratic(p2,X);
cout << X[0] << " " << X[1] << endl; 
gslpolysolvecubic(p3,X);
cout << X[0] << " " << X[1] << " " << X[2] << endl; 
gslpolycomplexsolve(Q4,Z); 
cout << Z[0] << " " << Z[1] << " " << Z[2] << " " << Z[3] <<endl;

cout << "\n\n gsl random :\n\n";
 cout << " list of generator " << ngslrng << endl;
 for(int i=0; i <ngslrng ; ++i)
   cout << i << " name  " <<  gslname(gslrngtype(i)) << endl; 
gslrng r;
for (int i = 0; i < 10; i++) 
   cout << gslrnguniform(r) << endl;;  
 