// file tetgencube.edp
load "msh3"
load "tetgen"
load "popen"

real x0,x1,y0,y1;
x0=1.; x1=2.; y0=0.; y1=2*pi;
mesh Thsq1 = square(5,35,[x0+(x1-x0)*x,y0+(y1-y0)*y]);

func ZZ1min = 0;
func ZZ1max = 1.5;
func XX1 = x;
func YY1 = y;

mesh3 Th31h = movemesh2D3Dsurf(Thsq1,transfo=[XX1,YY1,ZZ1max]);
mesh3 Th31b = movemesh2D3Dsurf(Thsq1,transfo=[XX1,YY1,ZZ1min]);

/////////////////////////////////
x0=1.; x1=2.; y0=0.; y1=1.5;
mesh Thsq2 = square(5,8,[x0+(x1-x0)*x,y0+(y1-y0)*y]);

func ZZ2 = y;
func XX2 = x;
func YY2min = 0.;
func YY2max = 2*pi;

mesh3 Th32h = movemesh2D3Dsurf(Thsq2,transfo=[XX2,YY2max,ZZ2]);  
mesh3 Th32b = movemesh2D3Dsurf(Thsq2,transfo=[XX2,YY2min,ZZ2]);

/////////////////////////////////
x0=0.; x1=2*pi; y0=0.; y1=1.5;
mesh Thsq3 = square(35,8,[x0+(x1-x0)*x,y0+(y1-y0)*y]);
func XX3min = 1.;
func XX3max = 2.;

func YY3 = x;
func ZZ3 = y;

mesh3 Th33h = movemesh2D3Dsurf(Thsq3,transfo=[XX3max,YY3,ZZ3]);  
mesh3 Th33b = movemesh2D3Dsurf(Thsq3,transfo=[XX3min,YY3,ZZ3]); 

////////////////////////////////
mesh3 Th33 = Th31h+Th31b+Th32h+Th32b+Th33h+Th33b; // "gluing" surface meshs to obtain the surface of cube
savemesh(Th33,"Th33.mesh");

// build a mesh of a axis parallel box with TetGen
real[int] domaine = [1.5,pi,0.75,145,0.01];
mesh3 Thfinal = tetg(Th33,switch="pqaAAQ",nbofregions=1,regionlist=domaine);    // Tetrahelize the interior of the cube with tetgen
<<<<<<< tetgencube.edp
=======
/*
>>>>>>> 1.4
savemesh(Thfinal,"Thfinal.mesh");
<<<<<<< tetgencube.edp
=======
int ttt=0;
int pp;
func distc= x*x+y*y+z*z;
func v1= x;
func v2= y;
func v3= z;

//pp=savesol("Thfinal.sol",Thfinal,nbscalar=1,scalar=[v1],order=1);
//pp=meditmeshsol("solsca",Thfinal,solution=1,scalar=distc);
//p=meditmeshsol("solvec",Thfinal,solution=1,vector=[v1,v2,v3]);



cout << "%%%%%%%%%%%%%%"<< endl;
cout << "rafinement " << endl;
cout << "%%%%%%%%%%%%%%"<< endl;
// build a mesh of a axis parallel box with TetGen
real[int] domainrefine =[1.75,pi,1.2,140,0.001];
real avol = 0.000000001;
real maxvol = 0.01;
func raffinage= 0.01*((pi+avol)/(y+avol))^4;

mesh3 Thfinalrefine = tetgreconstruction(Thfinal,maxvol,switch="raAQ",nbofregions=1,regionlist=domainrefine,sizeofvolume=min(0.01,raffinage));    // Tetrahelize the interior of the cube with tetgen
savemesh(Thfinalrefine,"Thfinalrefine.mesh");
>>>>>>> 1.4

// build a mesh of a half cylindrical shell of interior radius 1. and exterior radius 2 and heigh 1.5
func mv2x = x*cos(y);
func mv2y = x*sin(y);
func mv2z = z;
mesh3 Thmv2 = movemesh3D(Thfinal, transfo=[mv2x,mv2y,mv2z]);
savemesh(Thmv2,"halfcylindricalshell.mesh");




