/*
 *     min   x1*x4*(x1 + x2 + x3)  +  x3
            (= x1^2.x4 + x1.x2.x4 + x1.x3.x4 + x3)
 *     s.t.  x1*x2*x3*x4                   >=  25
 *           x1**2 + x2**2 + x3**2 + x4**2  =  40
 *           1 <=  x1,x2,x3,x4  <= 5
 *
 *     Starting point:
 *        x = (1, 5, 5, 1)
 *
 *     Optimal solution:
 *        x = (1.00000000, 4.74299963, 3.82114998, 1.37940829)
 */
 
 load "ff-Ipopt"
 
 real[int] xlb=[1.,1.,1.,1.],xub=[5.,5.,5.,5.],glb=[25.,40.],gub=[1.e19,40.];
 
 func real J(real[int] &X)
 {
 	return X[0]*X[3]*(X[0] + X[1] + X[2]) + X[2];
 }
 
 func real[int] dJ(real[int] &X)
 {
 	real[int] grad(X.n);
 	grad[0] = 2.*X[0]*X[3] + X[1]*X[3] + X[2]*X[3];
 	grad[1] = X[0]*X[3];
 	grad[2] = X[0]*X[3] + 1.;
 	grad[3] = X[0]*X[0] + X[0]*X[1] + X[0]*X[2];
 	return grad;
 }
 
matrix H; 

	int[int] hi=[0,1,1,2,2,2,3,3,3,3],hj=[0,0,1,0,1,2,0,1,2,3];
	real[int] hc(hi.n);
	hc=0.;

func matrix HJ(real[int] &X,real jfactor,real[int] &lambda)
{
	H = [hi,hj,hc];
	H(0,0) = jfactor * 2*X[3];
	H(1,0) = jfactor * X[3];
	H(2,0) = jfactor * X[3];
	H(3,0) = jfactor * (2*X[0] + X[1] + X[2]);
	H(3,1) = jfactor * X[0];
	H(3,2) = jfactor * X[0];
	H(1,0) += lambda[0] * (X[2]*X[3]);
	H(2,0) += lambda[0] * (X[1]*X[3]);
	H(2,1) += lambda[0] * (X[0]*X[3]);
	H(3,0) += lambda[0] * (X[1]*X[2]);
	H(3,1) += lambda[0] * (X[0]*X[2]);
	H(3,2) += lambda[0] * (X[0]*X[1]);
	H(0,0) += lambda[1] * 2.;
	H(1,1) += lambda[1] * 2.;
	H(2,2) += lambda[1] * 2.;
	H(3,3) += lambda[1] * 2.;
	//cout << H << endl;
	return H;
}
 
 func real[int] G(real[int] &X)
 {
 	real[int] g(2);
 	g[0] = X[0]*X[1]*X[2]*X[3];
 	g[1] = square(X.l2);
 	return g;
 }
 
 matrix GG;
 int[int] II=[0, 0, 0, 0, 1, 1, 1, 1], JJ=[0, 1, 2, 3, 0, 1, 2, 3];
 real[int] CC=[0.,0.,0.,0.,0.,0.,0.,0.];
 
 GG = [II,JJ,CC];
 
 func matrix jacG(real[int] &X)
 {
    GG(0,0) = X[1]*X[2]*X[3];
    GG(0,1) = X[0]*X[2]*X[3];
    GG(0,2) = X[0]*X[1]*X[3];
    GG(0,3) = X[0]*X[1]*X[2];
    GG(1,0) = 2.*X[0];
    GG(1,1) = 2.*X[1];
    GG(1,2) = 2.*X[2];
    GG(1,3) = 2.*X[3];
 	return GG;
 }
 
 real[int] start=[1, 5, 5, 1];
 real[int] optimsol=[1.00000000, 4.74299963, 3.82114998, 1.37940829];
IPOPT(J,dJ,HJ,G,jacG,start,ub=xub, lb=xlb,clb=glb,cub=gub);
optimsol -= start;
cout << "Dist : " << optimsol.l2 << endl;
 