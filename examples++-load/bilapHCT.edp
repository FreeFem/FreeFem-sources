load "Element_HCT"
load "qf11to25" // for tripleQF function... 

int n=100,nn=n+10;
real[int] xx(nn),yy(nn);

mesh Th=square(40,40);  // mesh definition of $\Omega$
fespace Wh(Th,P2);
fespace Vh(Th,HCT);      // finite element space
// correct june 21 2007 (Thank to  Hui Zhang hzhang@mailst.xjtu.edu.cn who find the error)
macro bilaplacien(u,v) ( dxx(u)*dxx(v)+dyy(u)*dyy(v)+2.*dxy(u)*dxy(v)) // fin macro 
real f=1;
Vh [u,ux,uy],[v,vx,vy];
// Warning the quadrature formula must be def un 3 sub triangle 
// the function tripleQF build this king of formular from classical quadrature. 
QF2 qfHCT5=tripleQF(qf5pT) ;
solve bilap([u,ux,uy],[v,vx,vy]) =
    int2d(Th,qft=qfHCT5)(  bilaplacien(u,v) )
   - int2d(Th)(f*v)
   + on(1,2,3,4,u=0,ux=0,uy=0) 
; 
   
plot(u,cmm="u", wait=1,fill=1);
plot(ux,wait=1,cmm="u_x");
plot(uy,wait=1,cmm="u_y");
Wh uu=u;
real umax = uu[].max; 
int err =  (abs(umax-0.0012782) > 1e-4); 
cout << " uu max " << umax << " ~ 0.0012782,  err = " << err << endl; 



for (int i=0;i<=n;i++)
 {
   xx[i]=real(i)/n;
   yy[i]=u(0.5,real(i)/n); // value of uh at point (0.5, i/10.) 
 }
 plot([xx(0:n),yy(0:n)],wait=1);
 assert(err==0); 