load "Element_HCT"
load "splitmesh3"
load "Element_P3dc"

macro DD(f,hx,hy) ( (f(x1+hx,y1+hy)-f(x1-hx,y1-hy))/(2*(hx+hy))) //
macro dn(f) ( N.x*dx(f)+N.y*dy(f)) //
macro dnn(f) ( N.x*f#2+N.y*f#3) //
mesh Th=square(1,1,flags=3);//,[10*(x+y/3),10*(y-x/3)]);
// Th=trunc(Th,x<0.5); 
mesh Th3=splitmesh3(trunc(Th,1,split=10));
for(int i=0; i<3;++i)
cout <<i << " "  <<" "<<  Th[0][i].x << " " << Th[0][i].y  << endl;
real x1=0.7,y1=0.9, h=1e-6;
int it1=Th(x1,y1).nuTriangle; 

func ff =  2*x*x + 3*y*y + 4.5*y*x + 5*x + 6*y + 7;
func ffx = 4*x + 4.5*y + 5;
func ffy = 6*y + 4.5*x + 6;
func ffxx = 4.;
func ffyy = 6.;
func ffxy =4.5;

fespace Vh(Th,HCT);
fespace Wh(Th3,P3dc);
fespace Eh(Th,P0edge);

Eh  edges;

Vh [a1,a2,a3],[b1,b2,b3],[c1,c2,c3];

 
[a1,a2,a3] = [ ff,ffx,ffy];
cout << a1(0,0) << endl; 
if(1)
for(int k=0; k<12; ++k)
{
    a1[]=0;
    a1[][Vh(0,k)]=1;
    Wh aa=a1,dxaa=dx(aa),dyaa=dy(aa);
    real err=int2d(Th)( square(aa-a1));
    real errx=int2d(Th)( square(dx(aa)-a2));
    real erry=int2d(Th)( square(dy(aa)-a3));
    real errxx=int2d(Th)( square(dx(dxaa)-dxx(a1)));
    cout << int2d(Th)( square(dxaa));
    cout << int2d(Th)( square(dxx(a1)));
  assert(errxx<1e-9);
 
    real erryy=int2d(Th)( square(dy(dyaa)-dyy(a1)));
    real errxy=int2d(Th)( square(dy(dxaa)-dxy(a1)));
    cout << " err= " <<k << ":" << err << " /" << errx << " "<< erry << " / " << errxx << " "<< errxy << " " 
    << erryy << endl;
    assert(int2d(Th)( square(dy(a2)-dyx(a1))) < 1e-9);
    assert(int2d(Th)( square(dy(a3)-dyy(a1))) < 1e-9);
    assert(int2d(Th)( square(dx(a2)-dxx(a1))) < 1e-9);
    assert(int2d(Th)( square(dx(a3)-dxy(a1))) < 1e-9);
    assert(errx<1e-9);
    assert(erry<1e-9);
   assert(errxx<1e-9);
   assert(errxy<1e-9);
   assert(erryy<1e-9);
   [b1,b2,b3]=[a1,a2,a3];
   cout << " a2, a3 :" << a2(0.5,0.5) << " " << a3(0.5,0.5) <<endl; 
   cout << k <<  " b1 = " << b1[] << endl;
   b1[]-=a1[];
   assert(b1[].linfty < 1e-6);
}
 cout << a1(0.6,0.2) << " == " << ff(0.6,0.2) << endl;
 cout << a2(0.6,0.2) << " == " << ffx(0.6,0.2) << endl;
  cout << a3(0.6,0.2) << " == " << ffy(0.6,0.2) << endl;
  cout << dxx(a1)(0.6,0.2) << " xx== " << ffxx(0.6,0.2) << endl;
  cout << dyy(a1)(0.6,0.2) << " yy== " << ffyy(0.6,0.2) << endl;
  cout << dxy(a1)(0.6,0.2) << " xy== " << ffxy(0.6,0.2) << endl;
  cout << dyx(a1)(0.6,0.2) << " yx== " << ffxy(0.6,0.2) << endl;
 cout << a1(0.2,0.6) << " == " << ff(0.2,0.6) << endl;
 cout << a2(0.2,0.6) << " == " << ffx(0.2,0.6) << endl;
  cout << a3(0.2,0.6) << " == " << ffy(0.2,0.6) << endl;
 cout << " 00 = " << int2d(Th)(square(a1-ff)) << endl;
 cout << " 00 = " << int2d(Th)(square(a2-ffx)) << endl;
 cout << " 00 = " << int2d(Th)(square(a3-ffy)) << endl;
plot(a1,wait=1);

//Th=square(1,1,[10*(x+y/3),10*(y-x/3)]);

varf vFlux([a],[e]) = intalledges(Th)( dn(a1)*e*(jump(real(nuTriangle))<= 0));
varf vMean([a],[e]) = intalledges(Th)( (a1)*e*(jump(real(nuTriangle))<= 0)/lenEdge);


for (int i=0;i<Vh.ndofK;++i)
	cout << i << " -> " << Vh(0,i) << endl;
for (int i=0;i<Vh.ndofK;++i)
{
  cout << " ***  node " << i << " of Traingle " << it1 << endl;
  a1[]=0;	
  int j=Vh(it1,i);
  a1[][j]=1;
  for (int k=0; k< 3; ++k)
    cout <<" v at " << Th[it1][k] <<  " == " << a1(Th[it1][k].x, Th[it1][k].y) << " " << Th[it1][k].x<< " " <<  Th[it1][k].y <<endl;
  edges[]=vFlux(0,Eh);
  cout << "Flux  edges = " << edges[] << endl; 
  edges[]=vMean(0,Eh);
  cout << " Mean   edges = " << edges[] << endl; 

  plot(a1, wait=1,cmm="w_"+i); 
  [b1,b2,b3]=[a1,a2,a3];

  plot(a1,b1,cmm="w"+i, wait=1); 

  c1[] = a1[] - b1[];
  cout << " int_1 " <<  int1d(Th,1) (dn(a1)) << endl;
  cout << " int_3 " <<  int1d(Th,3) (dn(a1)) << endl;
  cout << " int_2 " <<  int1d(Th,2) (dn(a1)) << endl;
  cout << " int_4 " <<  int1d(Th,4) (dn(a1)) << endl;

  cout << " int_1 " <<  int1d(Th,1) (dnn(a)) << endl;
  cout << " int_3 " <<  int1d(Th,3) (dnn(a)) << endl;
  cout << " int_2 " <<  int1d(Th,2) (dnn(a)) << endl;
  cout << " int_4 " <<  int1d(Th,4) (dnn(a)) << endl;

  cout << " ---------" << i << " " << c1[].max << " " << c1[].min << endl;	
  cout << " a = " << a1[] <<endl;
  cout << " b = " << b1[] <<endl;

  assert(c1[].max < 1e-5 && c1[].min > -1e-9);

  cout << " dx(a1)(x1,y1) = " << dx(a1)(x1,y1) << " == " << DD(a1,h,0) << " == " << a2(x1,y1) << endl; 
  cout << " dy(a1)(x1,y1) = " << dy(a1)(x1,y1) << " == " << DD(a1,0,h) << " == " << a3(x1,y1) << endl; 

  cout << " dx(a2)(x1,y1) = " << dx(a2)(x1,y1) << " == " << DD(a2,h,0)  << " == " << dxx(a1) << endl; 
  cout << " dy(a2)(x1,y1) = " << dy(a2)(x1,y1) << " == " << DD(a2,0,h)  << " == " << dxy(a1) << endl; 
  cout << " dx(a3)(x1,y1) = " << dx(a3)(x1,y1) << " == " << DD(a3,h,0)  << " == " << dxy(a1) << endl; 
  cout << " dy(a3)(x1,y1) = " << dy(a3)(x1,y1) << " == " << DD(a3,0,h)  << " == " << dyy(a1) << endl; 

  assert( abs(dx(a1)(x1,y1)-DD(a1,h,0) ) < 1e-4);
  assert( abs((a2)(x1,y1)-DD(a1,h,0) ) < 1e-4);
  assert( abs((a3)(x1,y1)-DD(a1,0,h) ) < 1e-4);
  assert( abs(dx(a2)(x1,y1)-DD(a2,h,0) ) < 1e-4);
  assert( abs(dy(a1)(x1,y1)-DD(a1,0,h) ) < 1e-4);
  assert( abs(dy(a2)(x1,y1)-DD(a2,0,h) ) < 1e-4);


} 

