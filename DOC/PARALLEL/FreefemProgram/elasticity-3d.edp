/*# Script #*/
macro K()real// EOM
macro def()def3// EOM
macro init()init3// EOM
macro BC()BC3// EOM
macro meshN()mesh3// EOM
macro intN()int3d// EOM
macro measureN()volume// EOM
macro bbN()bb3// EOM
include "Schwarz/macro.idp"

/*# problemPhysics #*/
real Sqrt = sqrt(2.);
macro epsilon(u)[dx(u), dy(u#B), dz(u#C), (dz(u#B) + dy(u#C)) / Sqrt, (dz(u) + dx(u#C)) / Sqrt, (dy(u) + dx(u#B)) / Sqrt]// EOM
macro div(u)(dx(u) + dy(u#B) + dz(u#C))// EOM

macro Varf(varfName, meshName, PhName)
    coefficients(meshName, PhName)
    varf varfName(def(u), def(v)) = intN(meshName)(lambda * div(u) * div(v) + 2. * mu * (epsilon(u)' * epsilon(v))) + intN(meshName)(f * vB) + on(1, BC(u, 0));
// EOM
/*# problemPhysicsEnd #*/
/*# vfGENEO #*/
macro EVproblem(varfName, meshName, PhName)
    coefficients(meshName, PhName)
    varf varfName(def(u), def(v)) = intN(meshName)(lambda * div(u) * div(v) + 2. * mu * (epsilon(u)' * epsilon(v))) + on(1, BC(u, 0));
// EOM
/*# vfGENEOEnd #*/

/*# sequentialMesh #*/
real depth = 0.25;
int discrZ = getARGV("-discrZ", 1);
real L = 2.5;
real H = 0.71;
real Hsupp = 0.61;
real r = 0.05;
real l = 0.35;
real h = 0.02;
real width = 2.5*L/4.;
real alpha = asin(h/(2.*r))/2;
/*# twoDsequentialMesh #*/
border a0a(t=0, 1){x=0; y=-t*Hsupp; label=2;};
border a0(t=0, (L - width)/2.){x=t; y=-Hsupp; label=1;};
border a0b(t=0, 1){x=(L - width)/2.; y=-(1-t)*Hsupp; label=2;};
border aa(t=0, 0.5^(1/0.75)){x=L/2. - width/2.*cos(pi*t^0.75); y=sin(pi*t^0.75)/4.; label=2;};
border ab(t=0, 0.5^(1/0.75)){x=L/2. + width/2.*cos(pi*t^0.75); y=sin(pi*t^0.75)/4.; label=2;};
border a2a(t=0, 1){x=(L + width)/2.; y=-t*Hsupp; label=2;};
border a2(t=(L + width)/2., L){x=t; y=-Hsupp; label=1;};
border a2b(t=0, 1){x=L; y=-(1-t)*Hsupp; label=2;};
border e(t=0, 1){x=L; y=t*H; label=2;};
border c(t=0, 1){x=(1-t)*L; y=H; label=3;};
border d(t=0, 1){x=0; y=(1-t)*H; label=2;};
mesh ThGlobal2d = buildmesh(a0(global * (L - width)/(2.*L)) + a0a(global*Hsupp/L) + a0b(global*Hsupp/L) + a2(global * (L - width)/(2*L)) + a2a(global*Hsupp/L) + a2b(global*Hsupp/L) + aa(global * width/(2*L)) + ab(-global * width/(2*L)) + e(global*H/L) + c(global) + d(global*H/L));
ThGlobal2d = adaptmesh(ThGlobal2d, 1/200., IsMetric=1, nbvx=100000);
/*# twoDsequentialMeshEnd #*/
macro minimalMesh()Cube(CC, BB, LL)// EOM
macro generateTh(name)name = buildlayers(ThGlobal2d, discrZ, zbound=[0, depth])// EOM
int[int, int] LL = [[1,3], [2,2], [2,2]];
real[int, int] BB = [[0,10], [0,1], [0,1]];
int[int] CC = [1, 1, 1];
/*# sequentialMeshEnd #*/

include "Schwarz/additional_macro.idp"

int overlap = getARGV("-overlap", 1);

if(mpirank == 0) {
    cout << " --- " << mpirank << "/" << mpisize;
    cout << " - input parameters: global size = " << global << " - refinement factor = " << s << " - precision = " << getARGV("-eps", 1e-8) << " - overlap = " << overlap << " - with partitioner? = " << partitioner << endl;
}

/*# parallelMesh #*/
func Pk = [P2, P2, P2];

build(generateTh, Th, ThBorder, ThOverlap, D, numberIntersection, arrayIntersection, restrictionIntersection, Wh, Pk, mpiCommWorld, s)
ThGlobal2d = square(1, 1);
/*# parallelMeshEnd #*/

Wh def(u);
/*# chooseSolver #*/
solver = getARGV("-solver", 0);
if(solver == 0)
{
	if(mpirank == 0) {
	    cout << "What kind of solver would you like to use ?" << endl;
	    cout << "   [1]   PETSc GMRES" << endl;
	    cout << "   [2]   GAMG" << endl;
	    cout << "   [3]   MUMPS" << endl;
	    cout << "   [10]  ASM" << endl;
	    cout << "   [11]  RAS" << endl;
	    cout << "   [12]  Schwarz GenEO" << endl;
	    cout << "   [13]  GMRES" << endl;
	    cout << "Please type in a number: ";
	    cin >> solver;
	    if(solver != 1 && solver != 2 && solver != 3 && solver != 4 && solver != 10 && solver != 11 && solver != 12) {
	        cout << "Wrong choice, using GMRES instead !" << endl;
	        solver = 10;
	    }
	}
}	
broadcast(processor(0), solver);
/*# chooseSolverEnd #*/

/*# physicalParameters #*/
real f = -900000.;
func real stripes(real a, real b, real paramA, real paramB) {
    int da = int(a * 10);
    return (da == (int(da / 2) * 2) ?  paramB : paramA);
}

macro coefficients(meshName, PhName)
    fespace PhName(meshName, P0);
    PhName Young = stripes(y, x, 2e11, 1e7);
    PhName poisson = stripes(y, x, 0.25, 0.45);
    PhName tmp = 1. + poisson;
    PhName mu = Young  / (2. * tmp);
    PhName lambda = Young * poisson / (tmp * (1. - 2. * poisson));// EOM
/*# physicalParametersEnd #*/

real[int] res(Wh.ndof);
real[int] rhs(Wh.ndof);

if(solver == 1 || solver == 2 || solver == 3) {
/*# StiffnessRhsMatrix #*/
    Varf(vPb, Th, Ph)
    matrix A = vPb(Wh, Wh);
    rhs = vPb(0, Wh);
    dmatrix Mat(A, arrayIntersection, restrictionIntersection, D, bs = 3);
/*# StiffnessRhsMatrixEnd #*/
    // sparams will override command line arguments !
    if(solver == 2) {
/*# rigidBodyMotion #*/
        Wh[int] def(Rb)(6);
        [Rb[0], RbB[0], RbC[0]] = [ 1,  0,  0];
        [Rb[1], RbB[1], RbC[1]] = [ 0,  1,  0];
        [Rb[2], RbB[2], RbC[2]] = [ 0,  0,  1];
        [Rb[3], RbB[3], RbC[3]] = [ y, -x,  0];
        [Rb[4], RbB[4], RbC[4]] = [-z,  0,  x];
        [Rb[5], RbB[5], RbC[5]] = [ 0,  z, -y];
/*# rigidBodyMotionEnd #*/
/*# SolverPETSc #*/
        set(Mat, sparams = "-pc_type gamg -ksp_type gmres -pc_gamg_threshold 0.05 -ksp_monitor", nearnullspace = Rb);
    }
    else if(solver == 3)
        set(Mat, sparams = "-pc_type lu -pc_factor_mat_solver_package mumps -mat_mumps_icntl_7 2 -ksp_monitor");
    mpiBarrier(mpiCommWorld);
    timing = mpiWtime();
    u[] = Mat^-1 * rhs;
/*# SolverPETScEnd #*/
    timing = mpiWtime() - timing;
/*# matrixVectorPETSc #*/
    res = Mat * u[];
/*# matrixVectorPETScEnd #*/
}
else {
    /*# localMatrix #*/
    assemble(A, rhs, Wh, Th, ThBorder, Varf)
    /*# localMatrixEnd #*/

    dschwarz Aglob(A, arrayIntersection, restrictionIntersection, scaling = D);

    mpiBarrier(mpiCommWorld);
    timing = mpiWtime();
    /*# coarseSpace #*/
    matrix N;
    if(mpisize > 1 && solver == 12) {
        int[int] parm(1);
        parm(0) = getARGV("-nu", 20);
        EVproblem(vPbNoPen, Th, Ph)
        matrix noPen = vPbNoPen(Wh, Wh, solver = CG);
        attachCoarseOperator(mpiCommWorld, Aglob, A = noPen, /*threshold = 2. * h[].max / diam,*/ parameters = parm);
    }
    /*# coarseSpaceEnd #*/
    /*# SolverDDM #*/
    DDM(Aglob, u[], rhs, dim = getARGV("-gmres_restart", 60), iter = getARGV("-iter", 100), eps = getARGV("-eps", 1e-8), solver = solver - 9);
    /*# SolverDDMEnd #*/
    timing = mpiWtime() - timing;
    /*# matrixVectorFFpp #*/
    res = Aglob * u[];
    /*# matrixVectorFFppEnd #*/
}
/*# trueResidual #*/
res -= rhs;
real rhsnorm = dscalprod(D, rhs, rhs);
real dist = dscalprod(D, res, res);
if(mpirank == 0)
    cout << " --- normalized L^2 norm of the true residual: " << sqrt(dist / rhsnorm) << endl;
/*# trueResidualEnd #*/

mpiBarrier(mpiCommWorld);
if(mpirank == 0)
    cout << " --- time to solution: " << timing << endl;
/*# Visualization #*/
plotMPI(Th, u, "Global solution", Pk, def, 3, 1);
meshN ThMoved = movemesh3(Th, transfo = [x + u, y + uB, z + uC]);
plotMPI(ThMoved, u, "Moved mesh", Pk, def, 3, 1);
/*# VisualizationEnd #*/
/*# ScriptEnd #*/
