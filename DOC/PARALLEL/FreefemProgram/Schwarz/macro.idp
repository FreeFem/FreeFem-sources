load "msh3"
load "metis"
load "Element_P3"
load "Element_P4"
load "scotch"
load "utility"
load "removeDOF"
load "schwarz"

macro floating(meshName, VhName, vecName)
        varf floatingPb(def(u), def(v)) = on(1, BC(u, 1));
        vecName = floatingPb(0, VhName);
// EOM

macro simple3d(Ph, function, comm, deltaX, deltaY, deltaZ)
        Ph xx = x / deltaX, yy = y / deltaY, zz = z / deltaZ;
        i = int(mpiSize(comm)^(0.333333333333333));
        while(mpiSize(comm) % i != 0)
            --i;
        real trash = mpiSize(comm) / i;
        j = int(sqrt(trash));
        while(trash % j != 0)
            --j;
        real k = int(trash / j);
        function = int(i * xx) * k * j + int(j * yy) * k + int(k * zz);// EOM

macro simple2d(Ph, function, comm, deltaX, deltaY)
        Ph xx = x / deltaX, yy = y / deltaY;
        i = int(sqrt(mpiSize(comm)));
        while(mpiSize(comm) % i != 0)
            --i;
        j = mpiSize(comm) / i;
        function = int(j * xx) + int(i * yy) * j;// EOM

macro bb2(boundingMesh, overshoot, ThGlobal)
            real[int] bb(4);
            bb2d(bb, boundingMesh/*, intersection = possibleIntersection, offset = 2. * overlap / global*/);
            diam = sqrt((bb(1) - bb(0))^2 + (bb(3) - bb(2))^2);
            bb(0) -= overshoot;
            bb(1) += overshoot;
            bb(2) -= overshoot;
            bb(3) += overshoot;

            ThGlobal = trunc(ThGlobal, (x >= bb(0) && x <= bb(1) && y >= bb(2) && y <= bb(3)));// EOM

macro bb3(boundingMesh, overshoot, ThGlobal)
            real[int] bb(6);
            bb3d(bb, boundingMesh/*, intersection = possibleIntersection, offset = 2. * overlap / global*/);
            diam = sqrt((bb(1) - bb(0))^2 + (bb(3) - bb(2))^2 + (bb(5) - bb(4))^2);
            bb(0) -= overshoot;
            bb(1) += overshoot;
            bb(2) -= overshoot;
            bb(3) += overshoot;
            bb(4) -= overshoot;
            bb(5) += overshoot;

            ThGlobal = trunc(ThGlobal, (x >= bb(0) && x <= bb(1) && y >= bb(2) && y <= bb(3) && z >= bb(4) && z <= bb(5)));// EOM

/*# visualization #*/
macro plotMPI(Th, u, legend, Pk, def, d, w)
    if(mpirank == 0) {
        meshN ThCurrent = Th;
        meshN[int] meshTab(mpisize);
        fespace Xh(ThCurrent, Pk);
        Xh<K>[int] def(uTab)(mpisize);
        uTab[0][] = u[];
        meshTab[0] = Th;
        mpiRequest[int] rq(mpisize - 1);
        for(i = 1; i < mpisize; ++i)
            Irecv(processor(i, mpiCommWorld, rq[i - 1]), meshTab[i]);
        for(i = 1; i < mpisize; ++i)
            mpiWaitAny(rq);
        for(i = 1; i < mpisize; ++i) {
            ThCurrent = meshTab[i];
            Irecv(processor(i, mpiCommWorld, rq[i - 1]), uTab[i][]);
        }
        for(i = 1; i < mpisize; ++i)
            mpiWaitAny(rq);
        plot(uTab, wait = w, nbiso = 40, fill = 1, value = 1, dim = d, cmm = legend);
    }
    else {
        mpiRequest[int] rq(2);
        Isend(processor(0, rq[0]), Th);
        Isend(processor(0, rq[1]), u[]);
        mpiWait(rq[0]);
        mpiWait(rq[1]);
    }// EOM

macro plotAll(Th, u, legend, Pk, def, d)
    if(mpirank == 0) {
        meshN ThCurrent = Th;
        meshN[int] meshTab(mpisize);
        fespace Xh(ThCurrent, Pk);
        Xh<K>[int] def(uTab)(mpisize);
        uTab[0][] = u[];
        meshTab[0] = Th;
        mpiRequest[int] rq(mpisize - 1);
        for(i = 1; i < mpisize; ++i)
            Irecv(processor(i, mpiCommWorld, rq[i - 1]), meshTab[i]);
        for(i = 1; i < mpisize; ++i)
            mpiWaitAny(rq);
        for(i = 1; i < mpisize; ++i) {
            ThCurrent = meshTab[i];
            Irecv(processor(i, mpiCommWorld, rq[i - 1]), uTab[i][]);
        }
        for(i = 1; i < mpisize; ++i)
            mpiWaitAny(rq);
        for(i = 0; i < mpisize; ++i)
            plot(meshTab[i], uTab[i], wait = 1, nbiso = 40, fill = 1, value = 1, dim = d, cmm = legend + " (from " + i + ")");
    }
    else {
        mpiRequest[int] rq(2);
        Isend(processor(0, rq[0]), Th);
        Isend(processor(0, rq[1]), u[]);
        mpiWait(rq[0]);
        mpiWait(rq[1]);
    }// EOM
/*# visualizationEnd #*/

macro AddLayersMacro(M, Ph, Vh, ssd, n, unssd)
    unssd = 0;
    Vh u;
    for(j = 0; j < n; ++j) {
        u[] = M * ssd[];
        u = u > .1;
        unssd += u[];
        ssd[] = M' * u[];
        ssd = ssd > 0.1;
    }
    unssd /= n;// EOM

/* THE FOLLOWING IS PART OF THE FREEFEM++ DISTRIBUTION */

func bool AddLayers(meshN & Th, real[int] &ssd,int n,real[int] &unssd)
{
  //  build a continuous function  uussd (P1) and modifies ssd :
  //  IN: ssd in the caracteristics function on the input sub domain.
  //  OUT: ssd and unssd
  //  such that : 
  //   ssd is a boolean function 
  //   unssd is a smooth function
  //   ssd = 1 when   unssd >0;
  //   add n layer of element (size of the overlap)
  //   and unssd = 0 ouside of this layer ...
  // ---------------------------------
  fespace Vh(Th,P1);
  fespace Ph(Th,P0);
  Ph s;
  // assert(ssd.n==Ph.ndof);
  // assert(unssd.n==Vh.ndof);
  unssd=0;
  s[]= ssd;
  Vh u;
  varf vM(uuuu,v)=intN(Th,qforder=1)(uuuu*v/measureN);
  matrix M=vM(Ph,Vh);
  
  for(int i=0;i<n;++i)
    {
      u[]= M*s[];
      u = u>.1; 
      unssd+= u[];
      s[]= M'*u[];
      s = s >0.1;
    }
  return true;
}

func int usedARGV(string after)
{
  int ret=-1;
  for(int i=ARGV.n-1;i>=0;--i)        
       if(ARGV[i]==after) { ret=++i; break;}
  if(ARGV.n<ret) ret=-1;
  return ret;
}

func real getARGV(string after,real default)
{
   real d=default;
   int k=usedARGV(after);
   if(k>0) d=atof(ARGV[k]);
   return d;
}

func int getARGV(string after,int default)
{
   int d=default;
   int k=usedARGV(after);
   if(k>0) d=atoi(ARGV[k]);
    return d;
}


macro def1(i)i// EOM
macro def2(i)[i, i#B]// EOM
macro def3(i)[i, i#B, i#C]// EOM
macro def4(i)[i, i#B, i#C, i#D]// EOM
macro init1(i)i// EOM
macro init2(i)[i, i]// EOM
macro init3(i)[i, i, i]// EOM
macro init4(i)[i, i, i, i]// EOM
macro BC1(i, val)i = val// EOM
macro BC2(i, val)i = val, i#B = val// EOM
macro BC3(i, val)i = val, i#B = val, i#C = val// EOM
macro BC4(i, val)i = val, i#B = val, i#C = val, i#D = val// EOM

searchMethod = 1;

/*# initialization #*/
verbosity = getARGV("-v", 0); // the higher this value, the more verbose ⠶\tt FreeFem++⠶ is
int s = getARGV("-split", 1); // refinement factor of each local meshes
int global = getARGV("-global", 20); // global number of discretization points in one direction
int solver = getARGV("-solver", 3); // 1: Additive Schwarz+CG, 2: RAS+GMRES, 3:RGENEO+GMRES, 4: in progress
int partitioner = getARGV("-partitioner", 1); // usage of a partitioner 0: regular , 1: Metis, 2: Scotch
int i, j;
real diam;
real[int] stats(5);
/*# initializationEnd #*/
macro rectangle(A, l, L, lab1, lab2, lab3, lab4, N, M)
border A#1(t=0, l) { x=t; y=0; label=lab1; }
border A#2(t=0., L) { x=l.; y=t; label=lab2; }
border A#3(t=l,0) { x=t; y=L; label=lab3; }
border A#4(t=L,0) { x=0; y=t; label=lab4; }
func A = A#1(N) + A#2(M) + A#3(N)+A#4(M);// EOM

func mesh3 Cube(int[int] & NN,real[int,int] &BB ,int[int,int] & L)
{    
  //  first  build the 6 faces of the hex.
  real x0=BB(0,0),x1=BB(0,1);
  real y0=BB(1,0),y1=BB(1,1);
  real z0=BB(2,0),z1=BB(2,1);
  
  int nx=NN[0],ny=NN[1],nz=NN[2];
  mesh Thx = square(nx,ny,[x0+(x1-x0)*x,y0+(y1-y0)*y]);
  
  int[int] rup=[0,L(2,1)],  rdown=[0,L(2,0)], 
    rmid=[1,L(1,0),  2,L(0,1),  3, L(1,1),  4, L(0,0) ];
  mesh3 Th=buildlayers(Thx,nz,   zbound=[z0,z1], 
                       labelmid=rmid,   labelup = rup,
                       labeldown = rdown);
  
  return Th;
}
