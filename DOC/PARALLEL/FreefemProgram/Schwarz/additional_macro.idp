macro partition(meshName, borderName, overlapName, D, Vh, P, comm, s)
        meshName = trunc(overlapName, abs(part - mpiRank(comm)) < 0.1, label = 10);
        /*
        savemesh(meshName, "Th-0-" + mpirank + ".msh");
        coefficients
        fespace Ph(meshName, P0);
        Ph poisson = skyscraper(x, y);
        load "iovtk"
        int[int] fforder=[1];
        savevtk("SC-" + mpirank + ".vtk", meshName, poisson, dataname = "kappa", order = fforder);
        */
        mpiBarrier(comm);
        real timerPartition = mpiWtime();
        {
            /*
            PhGlobal overshoot = hTriangle;
            */
            fespace PhLocal(meshName, P0);
            PhLocal overshoot = hTriangle;
            real max = 2. * overlap * overshoot[].max;
            bbN(meshName, max, overlapName)
        }
        /*
        mpiBarrier(comm);
        if(mpiRank(comm) == 0)
            cout << "Bounding box: " << mpiWtime() - timerPartition << endl;
        timerPartition = mpiWtime();
        */
        fespace VhGlobal(overlapName, P1);
        PhGlobal supp = abs(part - mpiRank(comm)) < 0.1;
        VhGlobal suppSmooth;
        AddLayers(overlapName, supp[], overlap * 2, suppSmooth[]);
        /*
        mpiBarrier(comm);
        if(mpiRank(comm) == 0)
            cout << "AddLayers: " << mpiWtime() - timerPartition << endl;
        timerPartition = mpiWtime();
        */
        {
            meshN neighbors = trunc(overlapName, suppSmooth > 0.001 && (suppSmooth < 2 * overlap - 0.001));
            fespace Oh(neighbors, P0);
            Oh partOverlap = part;
            findDiff(partOverlap[], arrayIntersection);
        }
        /*
        mpiBarrier(comm);
        if(mpiRank(comm) == 0)
            cout << "findDiff: " << mpiWtime() - timerPartition << endl;
        timerPartition = mpiWtime();
        */
        fespace Vh(meshName, P1);
        Vh[int] partitionIntersection(arrayIntersection.n);
        /*
        plotAll(overlapName, suppSmooth[], "khi", P1, def1, 3)
        mpiBarrier(comm);
        if(mpiRank(comm) == 0)
            cout << "Initialization: " << mpiWtime() - timerPartition << endl;
        timerPartition = mpiWtime();
        */
        if(s > 1) {
            overlapName = trunc(overlapName, suppSmooth > 0.001, split = s);
            supp = abs(part - mpiRank(comm)) < 0.1;
            suppSmooth = 0;
            AddLayers(overlapName, supp[], overlap * 2, suppSmooth[]);
        }
        overlapName = trunc(overlapName, suppSmooth > overlap - 0.999);
        supp = supp;
        suppSmooth = suppSmooth;
        meshName = trunc(overlapName, suppSmooth > overlap + 0.001, label = 10);
        borderName = trunc(overlapName, (suppSmooth > overlap - 0.999) && (suppSmooth < overlap + 0.001), label = 20);
        if(0) {
            supp = abs(part - mpiRank(comm)) > 0.1;
            AddLayers(overlapName, supp[], overlap * 2, suppSmooth[]);
            overlapName = trunc(overlapName, suppSmooth > 0.001);
            suppSmooth = suppSmooth;
            part = part;
        }
        Vh khi = max(suppSmooth - overlap, 0.) / overlap;
        Vh sum = khi;
        VhGlobal phi = 0;
        varf vM(u, v) = intN(overlapName, qforder = 1)(u * v / measureN);
        matrix M = vM(PhGlobal, VhGlobal);
        /*
        mpiBarrier(comm);
        if(mpiRank(comm) == 0)
            cout << "Localization: " << mpiWtime() - timerPartition << endl;
        timerPartition = mpiWtime();
        */
        for(i = 0; i < arrayIntersection.n; ++i) {
            PhGlobal suppPartition = abs(arrayIntersection[i] - part) < 0.1;
            AddLayersMacro(M, PhGlobal, VhGlobal, suppPartition, overlap, phi[])
            partitionIntersection[numberIntersection] = phi;
            sum[] += partitionIntersection[numberIntersection][];
            arrayIntersection[numberIntersection++] = arrayIntersection[i];
        }

        khi[] = khi[] ./= sum[];
        if(solver != 3 && solver != 5)
            overlapName = minimalMesh;
        else
            overlapName = trunc(meshName, khi < 0.99);
        if(numberIntersection != arrayIntersection.n)
            arrayIntersection.resize(numberIntersection);
        Wh def(func2vec) = init(khi);
        D.resize(Wh.ndof);
        D = func2vec[];
        /* DEBUG   
        sum[] = khi[];
        for(j = 0; j < numberIntersection; ++j)
            sum[] += partitionIntersection[j][];
        assert(sum[].min > 1. - 1e-6 && sum[].max < 1. + 1e-6);
        mpiBarrier(comm);
        if(mpiRank(comm) == 0)
            cout << "Neighbors: " << mpiWtime() - timerPartition << endl;
        timerPartition = mpiWtime();
           DEBUG */

        /* savemesh(meshName, "Th-" + overlap + "-" + mpirank + ".msh"); */
        restrictionIntersection.resize(numberIntersection);
        for(i = 0; i < numberIntersection; ++i) {
            meshN meshIntersection  = trunc(meshName, partitionIntersection[i] > 1e-6);
            fespace WhIntersection(meshIntersection, P);
            matrix R = interpolate(WhIntersection, Wh);
            real[int] C;
            int[int] I;
            [I, restrictionIntersection[i], C] = R;
            restrictionIntersection[i].resize(R.nbcoef);
            /*
            int[int] n2o;
            meshN meshIntersection  = trunc(meshName, partitionIntersection[i] > 1e-6, new2old = n2o);
            fespace WhIntersection(meshIntersection, P);
            restrictionIntersection[i] = restrict(WhIntersection, Wh, n2o);
            */
        }
        /*
        mpiBarrier(comm);
        if(mpiRank(comm) == 0)
            cout << "Construction: " << mpiWtime() - timerPartition << endl;
        timerPartition = mpiWtime();
        */
// EOM

macro build(globalTh, Th, ThBorder, ThOverlap, D, numberIntersection, arrayIntersection, restrictionIntersection, Wh, P, comm, s)
meshN Th = minimalMesh, ThOverlap, ThBorder;

/*# partition #*/
int[int] arrayIntersection;
fespace Wh(Th, P);
int[int][int] restrictionIntersection(0);
real[int] D;

int numberIntersection = 0;
real timing;
{
    timing = mpiWtime();
    if(mpisize > 1) {
        globalTh(ThOverlap);
        fespace PhGlobal(ThOverlap, P0);
        PhGlobal part;
        if(partitioner == 1 || partitioner == 2) {
            int[int] balancing(ThOverlap.nt);
            balancing = 0;
            if(mpiRank(comm) == 0) {
                cout.scientific << " --- global mesh of " << ThOverlap.nt << " elements (prior to refinement) generated (in " << mpiWtime() - timing << ") and partitioned with ";
                timing = mpiWtime();
                if(partitioner == 1) {
                    metisdual(balancing, ThOverlap, mpiSize(comm));
                    cout << "Metis";
                }
                else if(partitioner == 2) {
                    scotch(balancing, ThOverlap, mpiSize(comm));
                    cout << "SCOTCH";
                }
                cout.scientific << " (in " << mpiWtime() - timing << ")" << endl;
            }
            timing = mpiWtime();
            broadcast(processor(0, comm), balancing);
            fast(part[], balancing);
        }
        partition(Th, ThBorder, ThOverlap, D, Vh, P, comm, s)
    }
    else if(mpisize == 1) {
        globalTh(Th);
        D.resize(Wh.ndof);
        D = 1.;
        /*
        coefficients
        fespace Ph(Th, P0);
        Ph poisson = skyscraper(x, y);
        load "iovtk"
        int[int] fforder=[1];
        savevtk("SC.vtk", Th, poisson, dataname = "kappa", order = fforder);
        exit(1);
        */
    }
    mpiBarrier(mpiCommWorld);
    if(mpirank == 0) cout.scientific << " --- partition of unity built (in " << mpiWtime() - timing << ")" << endl;
}
/*# partitionEnd #*/
// EOM

macro assemble(K, rhs, Wh, Th, ThBorder, Varf)
matrix K;
{ /* all memory of objects defined between this set of curly brackets
     will be freed when the closing bracket is reached */
    meshN ThAugmented = Th + ThBorder; /* ⠶$\Omega^{\delta + 1}_k = \Omega^\delta_k \cup \left(\Omega^{\delta + 1}_k \setminus \Omega^{\delta}_k\right)$⠶ */
    ThBorder = minimalMesh;
    Varf(vPb, ThAugmented, PhAugmented)
    fespace WhAugmented(ThAugmented, Pk);
    /* K = vPb(WhAugmented, WhAugmented, solver = CG); */
    K = vPb(WhAugmented, WhAugmented);
    real[int] rhsFull = vPb(0, WhAugmented);
    matrix R = interpolate(Wh, WhAugmented);

    removeDOF(K, R, rhsFull, rhs);
}
// EOM
