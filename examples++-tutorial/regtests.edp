// Regression tests
// ----------------

// $Id$

// The values tested here may not have a physical or mathematical
// meaning. Their main property is to gather numerical values from the
// whole domain, to be checked for consistency with previous runs.

NoUseOfWait=true;
int verbosityy=verbosity;

cout << "--------- file : adapt.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "adapt.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : adaptindicatorP1.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "adaptindicatorP1.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : adaptindicatorP2.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "adaptindicatorP2.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : algo.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "algo.edp";
};

cout << "--------- file : algowithmacro.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "algowithmacro.edp";
};

cout << "--------- file : array.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "array.edp";
};

cout << "--------- file : a_tutorial.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "a_tutorial.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : beam.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "beam.edp";
	real ref=uu[]'*uu[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : blakschol.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "blakschol.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : calculus.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "calculus.edp";
};

cout << "--------- file : cavity.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "cavity.edp";
	real ref=psi[]'*psi[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : convect2.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "convect2.edp";
	real ref=v[]'*v[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : convect-apt.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "convect-apt.edp";
	real ref=v[]'*v[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : convect.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "convect.edp";
	real ref=v[]'*v[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : dumptable.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "dumptable.edp";
};

cout << "--------- file : ex-vf.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "ex-vf.edp";
};

cout << "--------- file : FE.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "FE.edp";
	real ref=wdc[]'*wdc[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : fluidStructAdapt.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "fluidStructAdapt.edp";
	real ref=uu[]'*uu[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : fluidStruct.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "fluidStruct.edp";
	real ref=uu[]'*uu[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : freeboundary.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "freeboundary.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : freeboundary-weak.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "freeboundary-weak.edp";
	real ref=p[]'*p[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : LapDG2.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "LapDG2.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : Laplace.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "Laplace.edp";
	real ref=uh[]'*uh[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : LaplaceP1bis.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "LaplaceP1bis.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : LaplaceP1.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "LaplaceP1.edp";
	real ref=uh[]'*uh[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : LaplaceP1P2h.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "LaplaceP1P2h.edp";
	real ref=u2h[]'*u2h[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : LaplaceRT.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "LaplaceRT.edp";
	real ref=u1[]'*u1[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : mesh.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "mesh.edp";
};

cout << "--------- file : movemesh.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "movemesh.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : nolinear-elas.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "nolinear-elas.edp";
	real ref=un[]'*un[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : NSUzawaCahouetChabart.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "NSUzawaCahouetChabart.edp";
	real ref=u1[]'*u1[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : onde.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "onde.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : periodic4.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "periodic4.edp";
	real ref=uh[]'*uh[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : Periodic.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "Periodic.edp";
	real ref=uh[]'*uh[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : plot.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "plot.edp";
	real ref=uh[]'*uh[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : readmesh.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "readmesh.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : region.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "region.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : saverestore.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "saverestore.edp";
};

cout << "--------- file : schwarz-gc.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "schwarz-gc.edp";
	real ref=u1[]'*u1[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : schwarz-no-overlap.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "schwarz-no-overlap.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : schwarz-overlap.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "schwarz-overlap.edp";
	real ref=u[]'*u[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : sparse-matrix.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "sparse-matrix.edp";
	real ref=xx[]'*xx[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : StokesUzawa.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "StokesUzawa.edp";
	real ref=u1[]'*u1[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};

cout << "--------- file : tablefunction.edp -----------------" << endl;
verbosity=verbosityy;
{
	include "tablefunction.edp";
	real ref=fxy[]'*fxy[];
	cout<<"reference value="<<ref<<endl;
	assert(ref<286);
	assert(ref>284);
};
