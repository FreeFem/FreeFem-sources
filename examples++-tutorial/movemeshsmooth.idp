/*
  a function do movemesh add some laplacien smoothing before movemesh
    Th mesh, 
    lab the array of label with fixe diplacement  on boundary
    ux,uy the x,y movevement (P1 fespace on Th)
    nstep : max number of laplacien smoothing
*/
func mesh movemeshsmooth(mesh & Th,int[int] &lab,real[int] &ux,real[int] &uy,int nstep)
{
fespace WWWWWh(Th,P1); 
WWWWWh u,v;
WWWWWh uo,vo;
u[]=ux;
v[]=uy; 
uo[]=ux;
vo[]=uy; 
varf vmass(u,v) = int2d(Th)(u*v/area);
varf vmass1(u,v) = int2d(Th)(v/area);
varf vonu(u,v) = on(lab,u=uo);
varf vonv(u,v) = on(lab,u=vo);
matrix Mg = vmass(WWWWWh,WWWWWh);
real[int] Dii =  vmass1(0,WWWWWh);
real[int] D1(Dii.n); D1=1;
D1 = D1 ./ Dii;  
int step ;
for(step= 0; step < nstep; ++ step)
{
	real[int] um=Mg*u[];
	um ./= Dii; 
	um += vonu(0,WWWWWh,tgv=1);
	real[int] vm=Mg*v[];
	vm ./= Dii; 
	vm += vonv(0,WWWWWh,tgv=1);
	u[] -= um;
	v[] -= vm;
	
	real err = u[].linfty + v[].linfty ;
	u[]=um;
	v[]=vm; 
	if(verbosity>5) cout << " err  "<< err << " " << step <<  endl;

	if(verbosity>9999){
		if(verbosity>99999) plot([u,v], wait=1);
	    mesh Thm= movemesh(Th,[u,v]);
	    plot(Thm,Th);
     }
	if(err < 1e-6) break; 
}
return movemesh(Th,[u,v]);
}
/*
// For test ... 
//  smothing before move mesh
mesh Th=square(3,3);
int[int] lab=[1,2,3,4]; 
Th=adaptmesh(Th,0.1,IsMetric=1);
fespace Vh(Th,P1); 

Vh u=x,v=y;
verbosity=10; 
Th=movemeshsmooth(Th,lab,u[],v[],100);
*/